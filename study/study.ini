#!/usr/bin/ksh
. /home/qdzhusr/.profile

db2 connect to qdzhdb user qdzhusr using qdzhusr
db2 -stvf /home/qdzhusr/test/clearHisData1.sql

--压缩date.del和date.lob文件
echo `gzip *.del` >>del.log
echo `gzip *.lob` >>lob.log
exit


 设计模式的六大原则
1、开闭原则（Open Close Principle）
开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能
去修改原有的代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的
扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，
后面的具体设计中我们会提到这点

2、里氏代换原则（Liskov Substitution Principle）
里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之
一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP 是
继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，
基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原宝贵建议请发送至：
则是对“开-闭” 原则的补充。实现“开-闭” 原则的关键步骤就是抽象化。而基类
与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具
体步骤的规范

3、依赖倒转原则（Dependence Inversion Principle）
这个是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具
体。

4、接口隔离原则（Interface Segregation Principle）
这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降
低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思
想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，
降低耦合

5、迪米特法则（最少知道原则）（Demeter Principle）
为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生
相互作用，使得系统功能模块相对独立。

6、合成复用原则（Composite Reuse Principle）
原则是尽量使用合成/聚合的方式，而不是使用继承。

单例模式
单例模式表示一个类只会生成唯一的一个对象

单例模式有两张实现方式:宝贵建议请发送至：liangshenghai@itcast.cn
http://www.itcast.cn/ Copyright? 2016 传智.黑马程序员版权所有
第一种：
public class Singleton {
public static void main(String[] args) {
A a1=A.getInstance();
A a2=A.getInstance();
System.out.println(a1==a2);//判断 A 类型的引用是否相等，是的话返回 true，
}
}
class A{
private static A a=new A();//必须用修饰符 private，且 static 修饰，否则无法被静态方
法使用
private A(){ //构造方法也要设成私有的，这样防止在别的方法里 new 一个 A。
}
public static A getInstance(){ //获得实例，且用 static 是为了使用方便使用类调用静态
方法，因为构造方法已经 new，无法生成一个引用啊
return a; //将返回 A 类型的引用 a 的地址，即 new A（）；
}
}
第二种：
public class Singleton {
public static void main(String[] args) {
A a1=A.getInstance();
A a2=A.getInstance();
System.out.println(a1==a2);//判断 A 类型的引用是否相等，是的话返回 true，
}
}
class A{
private static A a;//必须用修饰符 private，且 static 修饰，否则无法被静态方法使用
private A(){ //构造方法也要设成私有的，这样在别的方法里就无法 new 一个 A。
}
public static A getInstance(){ //获得实例
if(a==null){
a=new A();
}
return a; //将返回 A 类型的引用 a 的地址，即 new A（）；
}
}
总结：单例模式有以下特点：宝贵建议请发送至：liangshenghai@itcast.cn
http://www.itcast.cn/ Copyright? 2016 传智.黑马程序员版权所有
1、单例类只能有一个实例。
2、单例类必须自己创建自己的唯一实例。
3、单例类必须给所有其他对象提供这一实例。
单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这
个实例
我们说 Singleton 通过将构造方法限定为 private 避免了类在外部被实例化，
在同一个虚拟机范围内，Singleton 的唯一实例只能通过 getInstance()方法访问。
（事实上，通过 Java 反射机制是能够实例化构造方法为 private 的类的，那基本上
会使所有的 Java 单例实现失效。此问题在此处不做讨论，姑且掩耳盗铃地认为反射
机制不存在。）
但是以上实现没有考虑线程安全问题。所谓线程安全是指：如果你的代码所在
的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次
运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，
就是线程安全的。或者说：一个类或者程序所提供的接口对于线程来说是原子操作
或者多个线程之间的切换不会导致该接口的执行结果存在二义性,也就是说我们不
用考虑同步的问题。显然以上实现并不满足线程安全的要求，在并发环境下很可能
出现多个 Singleton 实例。
结论：总之一句话，单例模式为一个面向对象的应用程序提供了对象惟一的访问点，
不管它实现何种功能，整个应用程序都会同享一个实例对象

装饰设计模式
什么是装饰设计模式（Decoration design patterns）呢？当想要对已有的对
象进行功能增强时，可以自定义类，将已有对象对象传入，基于已有的功能，并提
供加强功能。那么自定义的该类称为装饰类。
装饰类通常会通过构造方法接受被装饰的对象。并基于被装饰的对象的功能，
提供更强的功能。
我们知道 IO 流中 Bufferedwrite()和 BufferedReader 就是属于装饰类的一种，
现在我们通过一个简单程序来看看装饰设计模式的例子：
/*
以前人们出去都是走路
在 run 方法里描述
*/
class Person
{
public void run(){
System.out.println("走路");
}
}
/*
现代的人们出去的方式更多了
以前的功能需要增强，自定义了一个增强类
称为装饰类
*/
class ModernPerson
{
private Person p;
ModernPerson(Person p){
this.p=p;
}
public void run(){ //增强方法
p.run();
System.out.println("自行车");宝贵建议请发送至：liangshenghai@itcast.cn
http://www.itcast.cn/ Copyright? 2016 传智.黑马程序员版权所有
System.out.println("电动车");
System.out.println("公交车");
}
}
class DecorationDesignPatternsDemo
{
public static void main(String[] args)
{
Person p=new Person();
//p.run();需求不够，被弃用，使用装饰类里的增强型 run 方法
ModernPerson mp=new ModernPerson(p);//将以前 Person 对象传给装饰类的
构造方法
mp.run();//增强性 run 方法。
}
}
很多人就会疑惑了，我们可以使用继承去实现啊？但是如果使用继承的话，我
们来看看继承的使用与装饰类的区别：
我们假设一个体系 MyReader 是父类中的最顶层，父类下面有三个子类
MyTxtReader，MyMediaReader，MyDataReader。而这三个类是由于功能上的
不 足 ， 我 们 分 别 继 承 这 三 个 类 来 增 强 功 能 。 MyBufferedTxtReader ，
MyBufferedMediaReader，MyBufferedDataReader。
我们看到一个 MyReader 体系：
MyReader
|--MyTxtReader
|-- MyBufferedTxtReader
|-- MyMediaReader
|-- MyBufferedMediaReader
|-- MyDataReader
|-- MyBufferedDataReader
我们想通过一个类来使用传特定对象的方式，哪部分需要增强我们就传那部分
的对象。所以看下面
class MyBufferedReader｛
MyBufferedReader(MyTxtReader text){}宝贵建议请发送至：liangshenghai@itcast.cn
http://www.itcast.cn/ Copyright? 2016 传智.黑马程序员版权所有
MyBufferedReader(MyMediaReader media){}
MyBufferedReader(MyDataReader data){}
｝
我们看到上面 MyReader 因为需求如果又出现了很多的子类，那么就又得在内
部改代码，这样麻烦。可以看到上面的这个类扩展性极差。
那么我们怎么办呢？我们想到我们何不找一个期参数的共同类型，通过一种多
态的形式来提高扩展性。那么我们知道 MyReader 是父类的顶层，我们把他作为参
数类型。
class MyBufferedReader extends MyReader（）｛
MyBufferedReader(MyReader r){};
｝
那么我又看到 MyReader 的体系发生了变化
MyReader
|--MyTxtReader
|-- MyMediaReader
|-- MyDataReader
|--MyBufferedReader
我们看到装饰模式比继承要灵活的多。避免了继承体系的臃肿。而且降低了类
与类之间的关系。
我们知道装饰类因为增强已有对象，具备的功能和已有的是相同的，只不过提
供了更强的功能。所以装饰类和被装饰类都属于一个体系中的。
其实我所说的就是 IO 流中体系，我们看看 IO 流中的装饰设计模式。我在这呢
我复写了 BufferedReader 的 readLine 方法并继承了 Reader 类。
import java.io.*;
class MyBuffered extends Reader
{
private Reader fr;
MyBuffered(Reader fr){
this.fr=fr;
}
//复写了父类的 readLine宝贵建议请发送至：liangshenghai@itcast.cn
http://www.itcast.cn/ Copyright? 2016 传智.黑马程序员版权所有
public String readLine()throws IOException{
StringBuilder sb=new StringBuilder();
int i=0;
while((i=fr.read())!=-1){
if(i=='\r')
continue;
if(i=='\n')
return sb.toString();
else
sb.append((char)i);
}
if(sb.length()!=0){
return sb.toString();
}
return null;
}
//父类中的抽象方法必须要写
public int read(char[] cbuf,int off,int len)throws IOException{
return fr.read(cbuf,off,len);
}
//父类中的抽象方法必须要写
public void close()throws IOException{
fr.close();
}
}
class MyBufferedDemo
{
public static void main(String[] args) throws IOException
{
FileReader fr=new FileReader("BufferedWriterDemo.txt");
MyBuffered mb=new MyBuffered(fr);
String s=null;
while((s=mb.readLine())!=null){
System.out.println(s);
}
mb.close();
}
}

 观察者设计模式
监听器（观察者）概念宝贵建议请发送至：liangshenghai@itcast.cn
http://www.itcast.cn/ Copyright? 2016 传智.黑马程序员版权所有
1. 事件源：发生事件的对象
2. 监听器：是一个接口，监听事件源上要发生的动作。
3. 事件：事件对象一般是作为监听器方法的参数存在的，它封装了发生事件
的对象。
自定义监听器
1. 概述：我们拿学生(Student)做例子，学生就好比是事件源，可以吃和学
习这两个行为。它的父母是监听器(StudentListener)，可以监听这学生的吃和学习
的行为，并定义了学生事件（StudentEvent）对象作为参数，调用学生的两个行为。
学生饿了，触发了事件，父母拿食物给他。学生玩疯了，触发了事件，父母督促他
学习。
2. 事件源：学生拥有吃和学习的行为，学生必须得有一个名字，通过构造函
数进行注入。如下代码：
public class Student {
private String name;// 姓名
// 注入
public Student(String name) {
super();
this.name = name;
}
public String getName() {
return name;
}
// 吃的行为
public void eat() {
System.out.println("开始吃");
}
// 学习的行为
public void study() {
System.out.println("开始学习");宝贵建议请发送至：liangshenghai@itcast.cn
http://www.itcast.cn/ Copyright? 2016 传智.黑马程序员版权所有
}
}
3. 监听器：它是一个接口，里面定义了监听学生行为的两个方法。这两个方
法分别需要传入 StudentEvent 对象参数，进行学生两个行为的调用。就比如说父
母的职责就是监听学生，并对学生的行为进行相应的方法声明，一旦学生触发了某
种事件，就开始执行监听器里的对应方法。代码如下：
// 学生的监听器。
public interface StudentListener {
// 准备吃的事件
void preEat(StudentEvent event);
// 准备学习的事件
void preStudy(StudentEvent event);
}
4. 事件：作为学生的监听器的参数存在，可以获取到事件源。代码如下：
//学生事件
public class StudentEvent {
private Object source;
//事件源注入
public StudentEvent(Object source) {
super();
this.source = source;
}
//获取事件源
public Object getSource() {
return source;
}
}
5. 给学生注册事件监听器：每个事件源都有一个监听器，学生此时还是个孤
儿，需要注册监听器，才能被监听，这个监听器就好比父母。那么现在我们就为
Student 注册监听。代码如下：
public class Student {
private String name;// 姓名
//学生的监听器
private StudentListener studentListener;宝贵建议请发送至：liangshenghai@itcast.cn
http://www.itcast.cn/ Copyright? 2016 传智.黑马程序员版权所有
// 注入
public Student(String name) {
super();
this.name = name;
}
public String getName() {
return name;
}
// 吃的行为
public void eat() {
//注册了学生监听器就可调用此方法。
if(studentListener!=null){
studentListener.preEat(new StudentEvent(this));
}
System.out.println("开始吃");
}
// 学习的行为
public void study() {
if(studentListener!=null){
studentListener.preStudy(new StudentEvent(this));
}
System.out.println("开始学习");
}
//注册监听器
public void addStudentListener(StudentListener studentListener){
this.studentListener=studentListener;
}
}
6. 测试我们的自定义的监听器。比如：三毛
a) 第一步:此时三毛还是自由之身，代码如下：
public class StudentTest {
public static void main(String[] args) {
Student s1=new Student("三毛");
//自由之身，想吃就吃想学习就学习
s1.eat();
s1.study();宝贵建议请发送至：liangshenghai@itcast.cn
http://www.itcast.cn/ Copyright? 2016 传智.黑马程序员版权所有
}
}
b) 给三毛注册监听器。
public class StudentTest {
public static void main(String[] args) {
Student s1=new Student("三毛");
//给学生注册事件
s1.addStudentListener(new StudentListener() {
@Override
public void preStudy(StudentEvent event) {
Student s1=(Student) event.getSource();
System.out.println(s1.getName()+"好好学习");
}
@Override
public void preEat(StudentEvent event) {
Student s1=(Student) event.getSource();
System.out.println(s1.getName()+"慢慢吃");
}
});
//触发吃的事件
s1.eat();
//触发学习的事件
s1.study();
}
}