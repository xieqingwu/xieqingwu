最高效的删除重复记录方法 ( 因为使用了 ROWID)例子：
DELETE FROM EMP E WHERE E.ROWID > (SELECT MIN(X.ROWID)
FROM EMP X WHERE X.EMP_NO = E.EMP_NO);

11.1.16 识别’ 低效执行’ 的 SQL 语句
虽然目前各种关于 SQL 优化的图形化工具层出不穷,但是写出自己的 SQL
工具来解决问题始终是一个最好的方法：
SELECT EXECUTIONS , DISK_READS, BUFFER_GETS,
ROUND((BUFFER_GETS-DISK_READS)/BUFFER_GETS,2) Hit_radio,
ROUND(DISK_READS/EXECUTIONS,2) Reads_per_run,
SQL_TEXT
FROM V$SQLAREA
WHERE EXECUTIONS>0
AND BUFFER_GETS > 0
AND (BUFFER_GETS-DISK_READS)/BUFFER_GETS < 0.8
ORDER BY 4 DESC;


尽量多使用 COMMIT
只要有可能,在程序中尽量多使用 COMMIT, 这样程序的性能得到提高,需
求也会因为 COMMIT 所释放的资源而减少:
COMMIT 所释放的资源:
a. 回滚段上用于恢复数据的信息.
b. 被程序语句获得的锁
c. redo log buffer 中的空间
d. ORACLE 为管理上述 3 种资源中的内部花费
11.1.11 用 Where 子句替换 HAVING 子句

用 TRUNCATE 替代 DELETE
当删除表中的记录时,在通常情况下, 回滚段(rollback segments ) 用来存
放可以被恢复的信息. 如果你没有 COMMIT 事务,ORACLE 会将数据恢复到删除之
前的状态(准确地说是恢复到执行删除命令之前的状况) 而当运用 TRUNCATE 时,
回滚段不再存放任何可被恢复的信息.当命令运行后,数据不能被恢复.因此很少的资
源被调用,执行时间也会很短. (译者按: TRUNCATE 只在删除全表适用,TRUNCATE
是 DDL 不是 DML)

 用索引提高效率
索引是表的一个概念部分,用来提高检索数据的效率，ORACLE 使用了一个
复杂的自平衡 B-tree 结构. 通常,通过索引查询数据比全表扫描要快. 当 ORACLE
找出执行查询和 Update 语句的最佳路径时, ORACLE 优化器将使用索引. 同样在
联结多个表时使用索引也可以提高效率. 另一个使用索引的好处是,它提供了主键
(primary key)的唯一性验证.。那些 LONG 或 LONG RAW 数据类型, 你可以索引
几乎所有的列. 通常, 在大型表中使用索引特别有效. 当然,你也会发现, 在扫描小
表时,使用索引同样能提高效率. 虽然使用索引能得到查询效率的提高,但是我们也
必须注意到它的代价. 索引需要空间来存储,也需要定期维护, 每当有记录在表中增
减或索引列被修改时, 索引本身也会被修改. 这意味着每条记录的 INSERT ,
DELETE , UPDATE 将为此多付出 4 , 5 次的磁盘 I/O . 因为索引需要额外的存储空
间和处理,那些不必要的索引反而会使查询反应时间变慢.。定期的重构索引是有必要
的.：
ALTER INDEX <INDEXNAME> REBUILD <TABLESPACENAME>

用 EXISTS 替换 DISTINCT
当提交一个包含一对多表信息(比如部门表和雇员表)的查询时,避免在
SELECT 子句中使用 DISTINCT. 一般可以考虑用 EXIST 替换, EXISTS 使查询更为
迅速,因为 RDBMS 核心模块将在子查询的条件一旦满足后,立刻返回结果. 例子：
(低效):
SELECT DISTINCT DEPT_NO,DEPT_NAME FROM DEPT D , EMP E
WHERE D.DEPT_NO = E.DEPT_NO
(高效):
SELECT DEPT_NO,DEPT_NAME FROM DEPT D WHERE EXISTS ( SELECT ‘X’
FROM EMP E WHERE E.DEPT_NO = D.DEPT_NO);

sql 语句大写
sql 语句用大写的；因为 oracle 总是先解析 sql 语句，把小写的字母转换成大
写的再执行

避免在索引列上使用 NOT
通常， 我们要避免在索引列上使用 NOT, NOT 会产生在和在索引列上使用函
数相同的影响. 当 ORACLE” 遇到”NOT,他就会停止使用索引转而执行全表扫描

避免在索引列上使用计算
WHERE 子句中，如果索引列是函数的一部分．优化器将不使用索引而使
用全表扫描．
举例:
低效：SELECT … FROM DEPT WHERE SAL * 12 > 25000;
高效:SELECT … FROM DEPT WHERE SAL > 25000/12;

用 UNION 替换 OR (适用于索引列)
通常情况下, 用 UNION 替换 WHERE 子句中的 OR 将会起到较好的效果.
对索引列使用 OR 将造成全表扫描. 注意, 以上规则只针对多个索引列有效. 如果有
column 没有被索引, 查询效率可能会因为你没有选择 OR 而降低. 在下面的例子
中, LOC_ID 和 REGION 上都建有索引.
高效:
SELECT LOC_ID , LOC_DESC , REGION
FROM LOCATION
WHERE LOC_ID = 10
UNION
SELECT LOC_ID , LOC_DESC , REGION
FROM LOCATION
WHERE REGION = “MELBOURNE”
低效:
SELECT LOC_ID , LOC_DESC , REGION
FROM LOCATION
WHERE LOC_ID = 10 OR REGION = “MELBOURNE”
如果你坚持要用 OR, 那就需要返回记录最少的索引列写在最前面

 用 IN 来替换 OR
这是一条简单易记的规则，但是实际的执行效果还须检验，在 ORACLE8i
下，两者的执行路径似乎是相同的．
低效:
SELECT…. FROM LOCATION WHERE LOC_ID = 10 OR LOC_ID = 20 OR LOC_ID =
30
高效
SELECT… FROM LOCATION WHERE LOC_IN IN (10,20,30);

 避免在索引列上使用 IS NULL 和 IS NOT NULL
避免在索引中使用任何可以为空的列，ORACLE 将无法使用该索引．对于
单列索引，如果列包含空值，索引中将不存在此记录. 对于复合索引，如果每个列都
为空，索引中同样不存在此记录. 如果至少有一个列不为空，则记录存在于索引
中．举例: 如果唯一性索引建立在表的 A 列和 B 列上, 并且表中存在一条记录的 A,B
值为(123,null) , ORACLE 将不接受下一条具有相同 A,B 值（123,null）的记录(插
入). 然而如果所有的索引列都为空，ORACLE 将认为整个键值为空而空不等于空.
因此你可以插入 1000 条具有相同键值的记录,当然它们都是空! 因为空值不存在于
索引列中,所以 WHERE 子句中对索引列进行空值比较将使 ORACLE 停用该索引.
低效: (索引失效)
SELECT … FROM DEPARTMENT WHERE DEPT_CODE IS NOT NULL;
高效: (索引有效)
SELECT … FROM DEPARTMENT WHERE DEPT_CODE >=0;

总是使用索引的第一个列
如果索引是建立在多个列上, 只有在它的第一个列(leading column)被
where 子句引用时,优化器才会选择使用该索引. 这也是一条简单而重要的规则，当
仅引用索引的第二个列时,优化器使用了全表扫描而忽略了索引



用 UNION-ALL 替换 UNION ( 如果有可能的话)
当 SQL 语句需要 UNION 两个查询结果集合时,这两个结果集合会以
UNION-ALL 的方式被合并, 然后在输出最终结果前进行排序. 如果用 UNION ALL
替代 UNION, 这样排序就不是必要了. 效率就会因此得到提高. 需要注意的是，
UNION ALL 将重复输出两个结果集合中相同记录. 因此各位还是要从业务需求分
析使用 UNION ALL 的可行性. UNION 将对结果集合排序,这个操作会使用到
SORT_AREA_SIZE 这块内存. 对于这块内存的优化也是相当重要的. 下面的 SQL 可
以用来查询排序的消耗量
低效：
SELECT ACCT_NUM, BALANCE_AMT
FROM DEBIT_TRANSACTIONS
WHERE TRAN_DATE = ’31-DEC-95’
UNION
SELECT ACCT_NUM, BALANCE_AMT
FROM DEBIT_TRANSACTIONS
WHERE TRAN_DATE = ’31-DEC-95’
高效:
SELECT ACCT_NUM, BALANCE_AMT
FROM DEBIT_TRANSACTIONS
WHERE TRAN_DATE = ’31-DEC-95’
UNION ALL
SELECT ACCT_NUM, BALANCE_AMT
FROM DEBIT_TRANSACTIONS
WHERE TRAN_DATE = ’31-DEC-95’


 用 WHERE 替代 ORDER BY
ORDER BY 子句只在两种严格的条件下使用索引.
ORDER BY 中所有的列必须包含在相同的索引中并保持在索引中的排列顺
序.
ORDER BY 中所有的列必须定义为非空.
WHERE 子句使用的索引和 ORDER BY 子句中所使用的索引不能并列.
例如:
表 DEPT 包含以下列:
DEPT_CODE PK NOT NULL
DEPT_DESC NOT NULL
DEPT_TYPE NULL
低效: (索引不被使用)
SELECT DEPT_CODE FROM DEPT ORDER BY DEPT_TYPE
高效: (使用索引)
SELECT DEPT_CODE FROM DEPT WHERE DEPT_TYPE > 0



11.1.30 避免改变索引列的类型
当比较不同数据类型的数据时, ORACLE 自动对列进行简单的类型转换.
假设 EMPNO 是一个数值类型的索引列.
SELECT … FROM EMP WHERE EMPNO = ‘123’
实际上,经过 ORACLE 类型转换, 语句转化为:
SELECT … FROM EMP WHERE EMPNO = TO_NUMBER(‘123’)
幸运的是,类型转换没有发生在索引列上,索引的用途没有被改变.
现在,假设 EMP_TYPE 是一个字符类型的索引列.
SELECT … FROM EMP WHERE EMP_TYPE = 123
这个语句被 ORACLE 转换为:
SELECT … FROM EMP WHERETO_NUMBER(EMP_TYPE)=123宝贵建议请发送至：liangshenghai@itcast.cn
http://www.itcast.cn/ Copyright? 2016 传智.黑马程序员版权所有
因为内部发生的类型转换, 这个索引将不会被用到! 为了避免 ORACLE 对
你的 SQL 进行隐式的类型转换, 最好把类型转换用显式表现出来. 注意当字符和数
值比较时, ORACLE 会优先转换数值类型到字符类型
11.1.31 需要当心的 WHERE 子句
某些 SELECT 语句中的 WHERE 子句不使用索引. 这里有一些例子.
在下面的例子里,
(1)‘!=’ 将不使用索引. 记住, 索引只能告诉你什么存在于表中, 而不能
告诉你什么不存在于表中.
(2) ‘||’ 是字符连接函数. 就象其他函数那样, 停用了索引.
(3) ‘+’ 是数学函数. 就象其他数学函数那样, 停用了索引.
(4)相同的索引列不能互相比较,这将会启用全表扫描.
11.1.32
a. 如果检索数据量超过 30%的表中记录数.使用索引将没有显著的效率提
高.
b. 在特定情况下, 使用索引也许会比全表扫描慢, 但这是同一个数量级上
的区别. 而通常情况下,使用索引比全表扫描要块几倍乃至几千倍!


避免使用耗费资源的操作
带有 DISTINCT,UNION,MINUS,INTERSECT,ORDER BY 的 SQL 语句会启
动 SQL 引擎宝贵建议请发送至：liangshenghai@itcast.cn
http://www.itcast.cn/ Copyright? 2016 传智.黑马程序员版权所有
执行耗费资源的排序(SORT)功能. DISTINCT 需要一次排序操作, 而其他
的至少需要执行两次排序. 通常, 带有 UNION, MINUS , INTERSECT 的 SQL 语句
都可以用其他方式重写. 如果你的数据库的 SORT_AREA_SIZE 调配得好, 使用
UNION , MINUS, INTERSECT 也是可以考虑的, 毕竟它们的可读性很强

 优化 GROUP BY
提高 GROUP BY 语句的效率, 可以通过将不需要的记录在 GROUP BY 之
前过滤掉.下面两个查询返回相同结果但第二个明显就快了许多

 SQL 性能优化技巧
11.2.1 选用适合的 ORACLE 优化器
ORACLE 的优化器共有 3 种
A、 RULE (基于规则) b、 COST (基于成本) c、 CHOOSE (选择性)
设置缺省的优化器，可以通过对 init.ora 文件中 OPTIMIZER_MODE 参数的各种声明，如
RULE，COST，CHOOSE，ALL_ROWS，FIRST_ROWS 。 你当然也在 SQL 句级或是会话
(session)级对其进行覆盖。
为了使用基于成本的优化器(CBO， Cost-Based Optimizer) ， 你必须经常运行 analyze
命令，以增加数据库中的对象统计信息(object statistics)的准确性。
如果数据库的优化器模式设置为选择性(CHOOSE)，那么实际的优化器模式将和是否运行过
analyze 命令有关。 如果 table 已经被 analyze 过， 优化器模式将自动成为 CBO ， 反
之，数据库将采用 RULE 形式的优化器。
在缺省情况下，ORACLE 采用 CHOOSE 优化器，为了避免那些不必要的全表扫描(full table
scan) ， 你必须尽量避免使用 CHOOSE 优化器，而直接采用基于规则或者基于成本的优
化器。

























http://subclipse.tigris.org/update_1.6.x

(对公人民币)小金额有规律的分散转入、集中转出                                       FROM ( SELECT * FROM ( SELECT a.*, SUM( CASE WHEN DCR_FLG = '2' THEN TRAN_AMT ELSE NULL END)over (partition BY TRAN_ACCT) AS sumAmt, SUM( CASE WHEN DCR_FLG = '1' THEN TRAN_AMT ELSE NULL END) over (partition BY TRAN_ACCT) AS sumAmt1, COUNT( CASE WHEN DCR_FLG = '2' THEN TRAN_AMT ELSE NULL END)over (partition BY TRAN_ACCT) AS num, COUNT( CASE WHEN DCR_FLG = '1' THEN TRAN_AMT ELSE NULL END)over (partition BY TRAN_ACCT) AS num1 FROM F_TRAN_BASINFO a WHERE DATE(to_date(TRAN_DATE,'yyyy-mm-dd')) + {dayNum} DAY >= {workDate} AND DATE(to_date(TRAN_DATE,'yyyy-mm-dd')) <= {workDate} AND CASH_FLG = '2' AND TRAN_ACCTFLG = '1' AND CUR_CODE = 'CNY') t WHERE t.sumAmt/t.sumAmt1 <= 1.1 AND t.sumAmt/t.sumAmt1 >= 0.9 AND t.num/t.num1 >= {nums})
(对私人民币)小金额有规律的分散转入、集中转出                                       FROM ( SELECT * FROM ( SELECT a.*, SUM( CASE WHEN DCR_FLG = '2' THEN TRAN_AMT ELSE NULL END)over (partition BY TRAN_ACCT) AS sumAmt, SUM( CASE WHEN DCR_FLG = '1' THEN TRAN_AMT ELSE NULL END) over (partition BY TRAN_ACCT) AS sumAmt1, COUNT( CASE WHEN DCR_FLG = '2' THEN TRAN_AMT ELSE NULL END)over (partition BY TRAN_ACCT) AS num, COUNT( CASE WHEN DCR_FLG = '1' THEN TRAN_AMT ELSE NULL END)over (partition BY TRAN_ACCT) AS num1 FROM F_TRAN_BASINFO a WHERE DATE(to_date(TRAN_DATE,'yyyy-mm-dd')) + {dayNum} DAY >= {workDate} AND DATE(to_date(TRAN_DATE,'yyyy-mm-dd')) <= {workDate} AND CASH_FLG = '2' AND TRAN_ACCTFLG = '2' AND CUR_CODE = 'CNY') t WHERE t.sumAmt/t.sumAmt1 <= 1.1 AND t.sumAmt/t.sumAmt1 >= 0.9 AND t.num/t.num1 >= {nums})
不动户短期内频繁交易                                                               FROM ( SELECT bas.*, COUNT(1) over(partition BY bas.tran_acct) AS count1 FROM f_tran_basinfo bas LEFT JOIN ( ( SELECT reco_acct FROM f_sav_demand_pers WHERE acct_st = {acctType}) UNION ( SELECT reco_acct FROM f_sav_demand_corp WHERE acct_st = {acctType}) )a ON a.reco_acct = bas.tran_acct WHERE DATE(to_date(bas.TRAN_DATE,'yyyy-mm-dd')) + {dayNum} DAY >= {workDate} AND DATE(to_date(TRAN_DATE,'yyyy-mm-dd')) <= {workDate} AND a.reco_acct IS NOT NULL) b WHERE b.count1 > {nums}
资金账户短期内交易异常                                                             FROM ( SELECT bas.*, COUNT(1) over(partition BY bas.tran_acct) AS mcount, SUM(bas.tran_amt) over(partition BY bas.tran_acct) AS sumAmt FROM f_tran_basinfo bas WHERE DATE(to_date(bas.tran_date,'yyyy-MM-dd')) + {dayNum} DAY > {workDate} AND DATE(to_date(bas.tran_date,'yyyy-MM-dd')) <= {workDate}) a LEFT JOIN ( SELECT corp.reco_acct FROM f_sav_demand_corp corp WHERE corp.acct_st = {acctType} UNION SELECT pers.reco_acct FROM f_sav_demand_pers pers WHERE pers.acct_st = {acctType}) b ON b.reco_acct = a.tran_acct WHERE a.mcount> {nums} AND a.sumAmt > {sumAmt} AND b.reco_acct IS NOT NULL
资金汇入地为重点地区                                                               FROM JZ_GENERAL_EXCHANGE tran LEFT JOIN YW_RISK_AREA aera ON aera.CODE = tran.PAYEEACCPROVINCE WHERE DATE(tran.TRADEDATE) = {workDate} AND aera.FLAG = '2'
交易频率有一定规律性的规则                                                         FROM ( SELECT tran.*, TO_CHAR(DATE(to_date(tran.tran_date,'yyyy-MM-dd')),'iw') AS week, COUNT(1) over (partition BY tran.tran_acct, TO_CHAR(DATE(to_date(tran.tran_date, 'yyyy-MM-dd')),'iw'))                       AS mcount, COUNT(1) over (partition BY tran.tran_acct) AS ncount FROM f_tran_basinfo TRAN WHERE DATE(to_date(tran.TRAN_DATE,'yyyy-MM-dd')) <= {workDate} AND DATE(to_date(tran.tran_date,'yyyy-MM-dd'))+1 MONTH >= {workDate}) t WHERE t.ncount/t.mcount = 4
交易对手为网店，交易有敏感关键字                                                   FROM F_TRAN_BASINFO bas LEFT JOIN F_TRAN_ADVINFO adv ON bas.TRAN_SERNO = adv.TRAN_SERNO WHERE bas.TRAN_DATE = {eDate} AND bas.SER_NO=adv.SER_NO AND( adv.ADV_ACCTNA LIKE'%多多%' OR  adv.ADV_ACCTNA LIKE '%迷幻药%' OR  adv.ADV_ACCTNA LIKE '%牙签果子%' OR  adv.ADV_ACCTNA LIKE '%冰钻石%' OR  adv.ADV_ACCTNA LIKE '%开心水%' OR  adv.ADV_ACCTNA LIKE '%K粉%')
资金汇入对手为高风险地区的化工企业、化学试剂公司、医药公司、中药材市场。           FROM JZ_GENERAL_EXCHANGE TRAN LEFT JOIN YW_RISK_AREA aera ON aera.CODE = tran.PAYEEACCPROVINCE WHERE DATE(tran.TRADEDATE) = {workDate} AND aera.FLAG = '2' AND ( tran.PAYEEACCNAME LIKE'%化工%' OR tran.PAYEEACCNAME LIKE '%化学试剂%' OR tran.PAYEEACCNAME LIKE '%医药%' OR tran.PAYEEACCNAME LIKE '%中药材%' )


212103	acctType	(null)	2121	账户类型(长期不动账户	(null)	(null)	7	(null)	1	(null)	0	0	1	1	(null)	(null)	7	0	(null)	0	0000	1  
212203	acctType	(null)	2122	账户类型(资金账户	(null)	(null)	2	(null)	1	(null)	0	0	1	1	(null)	(null)	2	0	(null)	0	0000	1      
212204	sumAmt	(null)	2122	短期累计交易金额	(null)	(null)	10000	(null)	1	(null)	1	0	1	1	(null)	(null)	10000	0	(null)	0	0000	1
211901	dayNum	(null)	2119	查询的天数	(null)	(null)	9	(null)	1	(null)	1	0	1	1	(null)	(null)	9	0	(null)	0	0000	1              
211902	nums	(null)	2119	分散进入的笔数阈值	(null)	(null)	3	(null)	1	(null)	1	0	1	1	(null)	(null)	3	0	(null)	0	0000	1     
212001	dayNum	(null)	2120	查询的天数	(null)	(null)	9	(null)	1	(null)	1	0	1	1	(null)	(null)	9	0	(null)	0	0000	1         
212002	nums	(null)	2120	分散进入的笔数阈值	(null)	(null)	3	(null)	1	(null)	1	0	1	1	(null)	(null)	3	0	(null)	0	0000	1
212101	dayNum	(null)	2121	查询的天数	(null)	(null)	3	(null)	1	(null)	1	0	1	1	(null)	(null)	3	0	(null)	0	0000	1      
212102	nums	(null)	2121	异常交易的笔数阈值	(null)	(null)	3	(null)	1	(null)	1	0	1	1	(null)	(null)	3	0	(null)	0	0000	1
212202	nums	(null)	2122	异常交易的笔数阈值	(null)	(null)	3	(null)	1	(null)	1	0	1	1	(null)	(null)	3	0	(null)	0	0000	1
212201	dayNum	(null)	2122	查询的天数	(null)	(null)	3	(null)	1	(null)	1	0	1	1	(null)	(null)	3	0	(null)	0	0000	1    


F_TRAN_BASINFO     f_sav_demand_pers  f_sav_demand_corp  F_TRAN_ADVINFO



select 1 from F_TRAN_BASINFO where TRAN_DATE='20160311';
select 1 from F_TRAN_ADVINFO where TRAN_DATE='20160311';
select 1 from F_SAV_DEMAND_CORP where PM_BEGIN_DT = '20160311';
select 1 from F_SAV_DEMAND_PERS where PM_BEGIN_DT = '20160311';




insert into XT_RULE_MAIN (ID, CODE, RULE_NAME, RULE_SCORE, DISPLAY_NAME, YES_OR_NO, RULE_PATH, RULE_TYPE, PERIOD, PEC_RULE, IS_TRANSFERTRADE_TYPE, IS_RISK, RISK_TYPE, IS_RUN_IN_TIME, RUN_PERIOD, HAS_FOREIGN, GROUP_BY, VIEW_TYPE, SHORT_NAME, DEPT_ID, CATEGORY_ID, ISREALTIME, RULE_EXPLAIN, IS_PUBLIC, RUN_TYPE, RUN_INTERVAL, IS_USEABLE, RULE_GRADE, IS_ACCOUNTING, ISHEADBANK, DATA_TABLE_NAME, DEAL_METHOD, DEAL_TYPE, SEND_TYPE) values ('2130', 'DXFZP003', 'RULE2119', 0.0, '电信防诈骗(对公人民币)小金额有规律的分散转入、集中转出', 1, null, 1, 1, null, 1, 1, 1, 0, 0, 1, 'TRAN_ACCT', -1, null, '0000', '2', '0', '电信防诈骗(对公人民币)小金额有规律的分散转入、集中转出', 0, 'D', 0, 0, '1020-1010', 0, 0, 'TB_TRADE', '', '2', '0');
insert into XT_RULE_MAIN (ID, CODE, RULE_NAME, RULE_SCORE, DISPLAY_NAME, YES_OR_NO, RULE_PATH, RULE_TYPE, PERIOD, PEC_RULE, IS_TRANSFERTRADE_TYPE, IS_RISK, RISK_TYPE, IS_RUN_IN_TIME, RUN_PERIOD, HAS_FOREIGN, GROUP_BY, VIEW_TYPE, SHORT_NAME, DEPT_ID, CATEGORY_ID, ISREALTIME, RULE_EXPLAIN, IS_PUBLIC, RUN_TYPE, RUN_INTERVAL, IS_USEABLE, RULE_GRADE, IS_ACCOUNTING, ISHEADBANK, DATA_TABLE_NAME, DEAL_METHOD, DEAL_TYPE, SEND_TYPE) values ('2131', 'DXFZP004', 'RULE2120', 0.0, '电信防诈骗(对私人民币)小金额有规律的分散转入、集中转出', 1, null, 1, 1, null, 1, 1, 1, 0, 0, 1, 'TRAN_ACCT', -1, null, '0000', '2', '0', '电信防诈骗(对私人民币)小金额有规律的分散转入、集中转出', 0, 'D', 0, 0, '1020-1010', 0, 0, 'TB_TRADE', '', '2', '0');

insert into XT_RULE_INSERT_SQL (ID, RULE_ID, FLAG, RISK_TYPE, SRCTABLENAME, COMMON_COLUMN_NAME, DETAIL_COLUMN_NAME, SUM_COLUMN_NAME, SELECTSQL, FROMSQL, ALERT_TABLE_NAME, SUM_TABLE_NAME) values (10230, '2130', 0, -1, 'TB_TRADE', 'CUSTOM_ID,TRANSCALER,ORG_ID,TRAN_ORG_ID,ACC_ORG_ID', 'TRAN_SERNO,TRAN_BANKNO,TRAN_ACCT,TRAN_AMT,CUR_CODE,TRAN_TLR,TRAN_DATE,TRAN_TIME,ALERT_DATE,FK_1', null, 'select {ruleId} as rule_id, '''' as custom_id,TRAN_TLR as transcaler,TRAN_BANKNO  as org_id, TRAN_BANKNO as tran_org_id,TRAN_BANKNO as acc_org_id, {ruleId}||{groupby}||to_char(current timestamp,''yyyyMMddhh24miss'') as group_by, date(current date) as alert_date,TRAN_SERNO,TRAN_BANKNO,TRAN_ACCT,TRAN_AMT,CUR_CODE,TRAN_TLR,TRAN_DATE,TRAN_TIME,TRAN_SERNO as fk_1', 'FROM ( SELECT * FROM ( SELECT a.*, SUM( CASE WHEN DCR_FLG = ''2'' THEN TRAN_AMT ELSE NULL END)over (partition BY TRAN_ACCT) AS sumAmt, SUM( CASE WHEN DCR_FLG = ''1'' THEN TRAN_AMT ELSE NULL END) over (partition BY TRAN_ACCT) AS sumAmt1, COUNT( CASE WHEN DCR_FLG = ''2'' THEN TRAN_AMT ELSE NULL END)over (partition BY TRAN_ACCT) AS num, COUNT( CASE WHEN DCR_FLG = ''1'' THEN TRAN_AMT ELSE NULL END)over (partition BY TRAN_ACCT) AS num1 FROM F_TRAN_BASINFO a WHERE DATE(to_date(TRAN_DATE,''yyyy-mm-dd'')) + {dayNum} DAY >= {workDate} AND DATE(to_date(TRAN_DATE,''yyyy-mm-dd'')) <= {workDate} AND CASH_FLG = ''2'' AND TRAN_ACCTFLG = ''1'' AND CUR_CODE = ''CNY'') t WHERE t.sumAmt/t.sumAmt1 <= 1.1 AND t.sumAmt/t.sumAmt1 >= 0.9 AND t.num/t.num1 >= {nums})', 'T_2119_DETAIL', 'T_2119_SUM');
insert into XT_RULE_INSERT_SQL (ID, RULE_ID, FLAG, RISK_TYPE, SRCTABLENAME, COMMON_COLUMN_NAME, DETAIL_COLUMN_NAME, SUM_COLUMN_NAME, SELECTSQL, FROMSQL, ALERT_TABLE_NAME, SUM_TABLE_NAME) values (10231, '2131', 0, -1, 'TB_TRADE', 'CUSTOM_ID,TRANSCALER,ORG_ID,TRAN_ORG_ID,ACC_ORG_ID', 'TRAN_SERNO,TRAN_BANKNO,TRAN_ACCT,TRAN_AMT,CUR_CODE,TRAN_TLR,TRAN_DATE,TRAN_TIME,ALERT_DATE,FK_1', null, 'select {ruleId} as rule_id, '''' as custom_id,TRAN_TLR as transcaler,TRAN_BANKNO  as org_id, TRAN_BANKNO as tran_org_id,TRAN_BANKNO as acc_org_id, {ruleId}||{groupby}||to_char(current timestamp,''yyyyMMddhh24miss'') as group_by, date(current date) as alert_date,TRAN_SERNO,TRAN_BANKNO,TRAN_ACCT,TRAN_AMT,CUR_CODE,TRAN_TLR,TRAN_DATE,TRAN_TIME,TRAN_SERNO as fk_1', 'FROM ( SELECT * FROM ( SELECT a.*, SUM( CASE WHEN DCR_FLG = ''2'' THEN TRAN_AMT ELSE NULL END)over (partition BY TRAN_ACCT) AS sumAmt, SUM( CASE WHEN DCR_FLG = ''1'' THEN TRAN_AMT ELSE NULL END) over (partition BY TRAN_ACCT) AS sumAmt1, COUNT( CASE WHEN DCR_FLG = ''2'' THEN TRAN_AMT ELSE NULL END)over (partition BY TRAN_ACCT) AS num, COUNT( CASE WHEN DCR_FLG = ''1'' THEN TRAN_AMT ELSE NULL END)over (partition BY TRAN_ACCT) AS num1 FROM F_TRAN_BASINFO a WHERE DATE(to_date(TRAN_DATE,''yyyy-mm-dd'')) + {dayNum} DAY >= {workDate} AND DATE(to_date(TRAN_DATE,''yyyy-mm-dd'')) <= {workDate} AND CASH_FLG = ''2'' AND TRAN_ACCTFLG = ''2'' AND CUR_CODE = ''CNY'') t WHERE t.sumAmt/t.sumAmt1 <= 1.1 AND t.sumAmt/t.sumAmt1 >= 0.9 AND t.num/t.num1 >= {nums})', 'T_2120_DETAIL', 'T_2120_SUM');

insert into XT_RULE_TABLE_COLUMN_INFO (ID, RULE_ID, TABLE_NAME, COLUMN_NAME, COLUMN_CODE, DATA_TYPE, DATA_LENGTH, PRECISION, SRC_TABLE_NAME, SRC_COLUMN_CODE, HANDLE, DICT_TYPE, IS_VALID, TABLE_TYPE, IS_SHOW) values ('213001', '2130', 'T_2119_DETAIL', '流水号', 'TRAN_SERNO', '0', '40', null, null, null, null, null, '1', 'DETAIL', '1');
insert into XT_RULE_TABLE_COLUMN_INFO (ID, RULE_ID, TABLE_NAME, COLUMN_NAME, COLUMN_CODE, DATA_TYPE, DATA_LENGTH, PRECISION, SRC_TABLE_NAME, SRC_COLUMN_CODE, HANDLE, DICT_TYPE, IS_VALID, TABLE_TYPE, IS_SHOW) values ('213002', '2130', 'T_2119_DETAIL', '交易行代码', 'TRAN_BANKNO', '0', '40', null, null, null, null, null, '1', 'DETAIL', '1');
insert into XT_RULE_TABLE_COLUMN_INFO (ID, RULE_ID, TABLE_NAME, COLUMN_NAME, COLUMN_CODE, DATA_TYPE, DATA_LENGTH, PRECISION, SRC_TABLE_NAME, SRC_COLUMN_CODE, HANDLE, DICT_TYPE, IS_VALID, TABLE_TYPE, IS_SHOW) values ('213003', '2130', 'T_2119_DETAIL', '交易账号', 'TRAN_ACCT', '0', '40', null, null, null, null, null, '1', 'DETAIL', '1');
insert into XT_RULE_TABLE_COLUMN_INFO (ID, RULE_ID, TABLE_NAME, COLUMN_NAME, COLUMN_CODE, DATA_TYPE, DATA_LENGTH, PRECISION, SRC_TABLE_NAME, SRC_COLUMN_CODE, HANDLE, DICT_TYPE, IS_VALID, TABLE_TYPE, IS_SHOW) values ('213004', '2130', 'T_2119_DETAIL', '交易金额', 'TRAN_AMT', '0', '40', null, null, null, null, null, '1', 'DETAIL', '1');
insert into XT_RULE_TABLE_COLUMN_INFO (ID, RULE_ID, TABLE_NAME, COLUMN_NAME, COLUMN_CODE, DATA_TYPE, DATA_LENGTH, PRECISION, SRC_TABLE_NAME, SRC_COLUMN_CODE, HANDLE, DICT_TYPE, IS_VALID, TABLE_TYPE, IS_SHOW) values ('213005', '2130', 'T_2119_DETAIL', '币种', 'CUR_CODE', '0', '40', null, null, null, null, null, '1', 'DETAIL', '1');
insert into XT_RULE_TABLE_COLUMN_INFO (ID, RULE_ID, TABLE_NAME, COLUMN_NAME, COLUMN_CODE, DATA_TYPE, DATA_LENGTH, PRECISION, SRC_TABLE_NAME, SRC_COLUMN_CODE, HANDLE, DICT_TYPE, IS_VALID, TABLE_TYPE, IS_SHOW) values ('213006', '2130', 'T_2119_DETAIL', '交易柜员', 'TRAN_TLR', '0', '40', null, null, null, null, null, '1', 'DETAIL', '1');
insert into XT_RULE_TABLE_COLUMN_INFO (ID, RULE_ID, TABLE_NAME, COLUMN_NAME, COLUMN_CODE, DATA_TYPE, DATA_LENGTH, PRECISION, SRC_TABLE_NAME, SRC_COLUMN_CODE, HANDLE, DICT_TYPE, IS_VALID, TABLE_TYPE, IS_SHOW) values ('213007', '2130', 'T_2119_DETAIL', '交易日期', 'TRAN_DATE', '0', '40', null, null, null, null, null, '1', 'DETAIL', '1');
insert into XT_RULE_TABLE_COLUMN_INFO (ID, RULE_ID, TABLE_NAME, COLUMN_NAME, COLUMN_CODE, DATA_TYPE, DATA_LENGTH, PRECISION, SRC_TABLE_NAME, SRC_COLUMN_CODE, HANDLE, DICT_TYPE, IS_VALID, TABLE_TYPE, IS_SHOW) values ('213008', '2130', 'T_2119_DETAIL', '交易时间', 'TRAN_TIME', '0', '40', null, null, null, null, null, '1', 'DETAIL', '1');
insert into XT_RULE_TABLE_COLUMN_INFO (ID, RULE_ID, TABLE_NAME, COLUMN_NAME, COLUMN_CODE, DATA_TYPE, DATA_LENGTH, PRECISION, SRC_TABLE_NAME, SRC_COLUMN_CODE, HANDLE, DICT_TYPE, IS_VALID, TABLE_TYPE, IS_SHOW) values ('213009', '2130', 'T_2119_DETAIL', '预警日期', 'ALERT_DATE', '0', '40', null, null, null, null, null, '1', 'DETAIL', '1');
insert into XT_RULE_TABLE_COLUMN_INFO (ID, RULE_ID, TABLE_NAME, COLUMN_NAME, COLUMN_CODE, DATA_TYPE, DATA_LENGTH, PRECISION, SRC_TABLE_NAME, SRC_COLUMN_CODE, HANDLE, DICT_TYPE, IS_VALID, TABLE_TYPE, IS_SHOW) values ('213010', '2130', 'T_2119_DETAIL', '外键', 'FK_1', '0', '80', null, null, null, null, null, '1', 'DETAIL', '0');
insert into XT_RULE_TABLE_COLUMN_INFO (ID, RULE_ID, TABLE_NAME, COLUMN_NAME, COLUMN_CODE, DATA_TYPE, DATA_LENGTH, PRECISION, SRC_TABLE_NAME, SRC_COLUMN_CODE, HANDLE, DICT_TYPE, IS_VALID, TABLE_TYPE, IS_SHOW) values ('213011', '2130', 'T_2119_SUM', '笔数', 'COUNT', '0', '2', null, null, null, null, null, '1', 'SUM', '1');


insert into XT_RULE_TABLE_COLUMN_INFO (ID, RULE_ID, TABLE_NAME, COLUMN_NAME, COLUMN_CODE, DATA_TYPE, DATA_LENGTH, PRECISION, SRC_TABLE_NAME, SRC_COLUMN_CODE, HANDLE, DICT_TYPE, IS_VALID, TABLE_TYPE, IS_SHOW) values ('213101', '2131', 'T_2120_DETAIL', '流水号', 'TRAN_SERNO', '0', '40', null, null, null, null, null, '1', 'DETAIL', '1');     
insert into XT_RULE_TABLE_COLUMN_INFO (ID, RULE_ID, TABLE_NAME, COLUMN_NAME, COLUMN_CODE, DATA_TYPE, DATA_LENGTH, PRECISION, SRC_TABLE_NAME, SRC_COLUMN_CODE, HANDLE, DICT_TYPE, IS_VALID, TABLE_TYPE, IS_SHOW) values ('213102', '2131', 'T_2120_DETAIL', '交易行代码', 'TRAN_BANKNO', '0', '40', null, null, null, null, null, '1', 'DETAIL', '1');
insert into XT_RULE_TABLE_COLUMN_INFO (ID, RULE_ID, TABLE_NAME, COLUMN_NAME, COLUMN_CODE, DATA_TYPE, DATA_LENGTH, PRECISION, SRC_TABLE_NAME, SRC_COLUMN_CODE, HANDLE, DICT_TYPE, IS_VALID, TABLE_TYPE, IS_SHOW) values ('213103', '2131', 'T_2120_DETAIL', '交易账号', 'TRAN_ACCT', '0', '40', null, null, null, null, null, '1', 'DETAIL', '1');    
insert into XT_RULE_TABLE_COLUMN_INFO (ID, RULE_ID, TABLE_NAME, COLUMN_NAME, COLUMN_CODE, DATA_TYPE, DATA_LENGTH, PRECISION, SRC_TABLE_NAME, SRC_COLUMN_CODE, HANDLE, DICT_TYPE, IS_VALID, TABLE_TYPE, IS_SHOW) values ('213104', '2131', 'T_2120_DETAIL', '交易金额', 'TRAN_AMT', '0', '40', null, null, null, null, null, '1', 'DETAIL', '1');     
insert into XT_RULE_TABLE_COLUMN_INFO (ID, RULE_ID, TABLE_NAME, COLUMN_NAME, COLUMN_CODE, DATA_TYPE, DATA_LENGTH, PRECISION, SRC_TABLE_NAME, SRC_COLUMN_CODE, HANDLE, DICT_TYPE, IS_VALID, TABLE_TYPE, IS_SHOW) values ('213105', '2131', 'T_2120_DETAIL', '币种', 'CUR_CODE', '0', '40', null, null, null, null, null, '1', 'DETAIL', '1');         
insert into XT_RULE_TABLE_COLUMN_INFO (ID, RULE_ID, TABLE_NAME, COLUMN_NAME, COLUMN_CODE, DATA_TYPE, DATA_LENGTH, PRECISION, SRC_TABLE_NAME, SRC_COLUMN_CODE, HANDLE, DICT_TYPE, IS_VALID, TABLE_TYPE, IS_SHOW) values ('213106', '2131', 'T_2120_DETAIL', '交易柜员', 'TRAN_TLR', '0', '40', null, null, null, null, null, '1', 'DETAIL', '1');     
insert into XT_RULE_TABLE_COLUMN_INFO (ID, RULE_ID, TABLE_NAME, COLUMN_NAME, COLUMN_CODE, DATA_TYPE, DATA_LENGTH, PRECISION, SRC_TABLE_NAME, SRC_COLUMN_CODE, HANDLE, DICT_TYPE, IS_VALID, TABLE_TYPE, IS_SHOW) values ('213107', '2131', 'T_2120_DETAIL', '交易日期', 'TRAN_DATE', '0', '40', null, null, null, null, null, '1', 'DETAIL', '1');    
insert into XT_RULE_TABLE_COLUMN_INFO (ID, RULE_ID, TABLE_NAME, COLUMN_NAME, COLUMN_CODE, DATA_TYPE, DATA_LENGTH, PRECISION, SRC_TABLE_NAME, SRC_COLUMN_CODE, HANDLE, DICT_TYPE, IS_VALID, TABLE_TYPE, IS_SHOW) values ('213108', '2131', 'T_2120_DETAIL', '交易时间', 'TRAN_TIME', '0', '40', null, null, null, null, null, '1', 'DETAIL', '1');    
insert into XT_RULE_TABLE_COLUMN_INFO (ID, RULE_ID, TABLE_NAME, COLUMN_NAME, COLUMN_CODE, DATA_TYPE, DATA_LENGTH, PRECISION, SRC_TABLE_NAME, SRC_COLUMN_CODE, HANDLE, DICT_TYPE, IS_VALID, TABLE_TYPE, IS_SHOW) values ('213109', '2131', 'T_2120_DETAIL', '预警日期', 'ALERT_DATE', '0', '40', null, null, null, null, null, '1', 'DETAIL', '1');   
insert into XT_RULE_TABLE_COLUMN_INFO (ID, RULE_ID, TABLE_NAME, COLUMN_NAME, COLUMN_CODE, DATA_TYPE, DATA_LENGTH, PRECISION, SRC_TABLE_NAME, SRC_COLUMN_CODE, HANDLE, DICT_TYPE, IS_VALID, TABLE_TYPE, IS_SHOW) values ('213110', '2131', 'T_2120_DETAIL', '外键', 'FK_1', '0', '80', null, null, null, null, null, '1', 'DETAIL', '0');             
insert into XT_RULE_TABLE_COLUMN_INFO (ID, RULE_ID, TABLE_NAME, COLUMN_NAME, COLUMN_CODE, DATA_TYPE, DATA_LENGTH, PRECISION, SRC_TABLE_NAME, SRC_COLUMN_CODE, HANDLE, DICT_TYPE, IS_VALID, TABLE_TYPE, IS_SHOW) values ('213111', '2131', 'T_2120_SUM', '笔数', 'COUNT', '0', '2', null, null, null, null, null, '1', 'SUM', '1');              

insert into XT_RULE_CONFIG (ID, RULE_KEY, RULE_VALUE, RULE_ID, DISPLAY_NAME, RULE_UNIT, DEFAULT_VALUE, RULE_VALUE_STRING, COLUMN_STR, STATUS, CATALOGY, IS_NUMBER, IS_AUTO_SQL, IS_VISIBLE, IS_AUTO_CONDITION, PUBLIC_FOREIGN_CURRENCY_VALUE, PRIVATE_FOREIGN_CURRENCY_VALUE, PRIVATE_VALUE, IS_IN_CONDITON, SELECT_TYPE, IS_SELECT, DEPT_ID, ISCLOSE) values (213001, 'dayNum', null, '2130', '查询的天数', null, null, '9', null, '1', null, 1, 0, 1, 1, null, null, '9', 0, null, 0, '0000', 1);      
insert into XT_RULE_CONFIG (ID, RULE_KEY, RULE_VALUE, RULE_ID, DISPLAY_NAME, RULE_UNIT, DEFAULT_VALUE, RULE_VALUE_STRING, COLUMN_STR, STATUS, CATALOGY, IS_NUMBER, IS_AUTO_SQL, IS_VISIBLE, IS_AUTO_CONDITION, PUBLIC_FOREIGN_CURRENCY_VALUE, PRIVATE_FOREIGN_CURRENCY_VALUE, PRIVATE_VALUE, IS_IN_CONDITON, SELECT_TYPE, IS_SELECT, DEPT_ID, ISCLOSE) values (213002, 'nums', null, '2130', '分散进入的笔数阈值', null, null, '3', null, '1', null, 1, 0, 1, 1, null, null, '3', 0, null, 0, '0000', 1);     

insert into XT_RULE_CONFIG (ID, RULE_KEY, RULE_VALUE, RULE_ID, DISPLAY_NAME, RULE_UNIT, DEFAULT_VALUE, RULE_VALUE_STRING, COLUMN_STR, STATUS, CATALOGY, IS_NUMBER, IS_AUTO_SQL, IS_VISIBLE, IS_AUTO_CONDITION, PUBLIC_FOREIGN_CURRENCY_VALUE, PRIVATE_FOREIGN_CURRENCY_VALUE, PRIVATE_VALUE, IS_IN_CONDITON, SELECT_TYPE, IS_SELECT, DEPT_ID, ISCLOSE) values (213101, 'dayNum', null, '2131', '查询的天数', null, null, '9', null, '1', null, 1, 0, 1, 1, null, null, '9', 0, null, 0, '0000', 1);      
insert into XT_RULE_CONFIG (ID, RULE_KEY, RULE_VALUE, RULE_ID, DISPLAY_NAME, RULE_UNIT, DEFAULT_VALUE, RULE_VALUE_STRING, COLUMN_STR, STATUS, CATALOGY, IS_NUMBER, IS_AUTO_SQL, IS_VISIBLE, IS_AUTO_CONDITION, PUBLIC_FOREIGN_CURRENCY_VALUE, PRIVATE_FOREIGN_CURRENCY_VALUE, PRIVATE_VALUE, IS_IN_CONDITON, SELECT_TYPE, IS_SELECT, DEPT_ID, ISCLOSE) values (213102, 'nums', null, '2131', '分散进入的笔数阈值', null, null, '3', null, '1', null, 1, 0, 1, 1, null, null, '3', 0, null, 0, '0000', 1);

insert into GL_RULE_ORG (RULE_ID, ATTACH_ORG, ISOPENING, ISUSEABLE) values ('2130', '0000', 1, 1);
insert into GL_RULE_ORG (RULE_ID, ATTACH_ORG, ISOPENING, ISUSEABLE) values ('2131', '0000', 1, 1);


SELECT bas.*, COUNT(1) over(partition BY bas.tran_acct) 
AS count1 FROM f_tran_basinfo bas LEFT JOIN ( ( SELECT reco_acct FROM f_sav_demand_pers WHERE acct_st = {acctType}) 
UNION ( SELECT reco_acct FROM f_sav_demand_corp WHERE acct_st = {acctType}) )a ON a.reco_acct = bas.tran_acct WHERE DATE(to_date(bas.TRAN_DATE,'yyyy-mm-dd')) + {dayNum} DAY >= {workDate} AND DATE(to_date(TRAN_DATE,'yyyy-mm-dd')) <= {workDate} AND a.reco_acct IS NOT NULL) b WHERE b.count1 > {nums}