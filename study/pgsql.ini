    1. Sed简介  
    sed 是一种在线编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有 改变，除非你使用重定向存储输出。Sed主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。以下介绍的是Gnu版本的Sed 3.02。  
    2. 定址  
    可以通过定址来定位你所希望编辑的行，该地址用数字构成，用逗号分隔的两个行数表示以这两行为起止的行的范围（包括行数表示的那两行）。如1，3表示1，2，3行，美元符号($)表示最后一行。范围可以通过数据，正则表达式或者二者结合的方式确定 。  
      
    3. Sed命令  
    调用sed命令有两种形式：  
    *  
    sed [options] 'command' file(s)  
    *  
    sed [options] -f scriptfile file(s)  
    a\  
    在当前行后面加入一行文本。  
    b lable  
    分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。  
    c\  
    用新的文本改变本行的文本。  
    d  
    从模板块（Pattern space）位置删除行。  
    D  
    删除模板块的第一行。  
    i\  
    在当前行上面插入文本。  
    h  
    拷贝模板块的内容到内存中的缓冲区。  
    H  
    追加模板块的内容到内存中的缓冲区  
    g  
    获得内存缓冲区的内容，并替代当前模板块中的文本。  
    G  
    获得内存缓冲区的内容，并追加到当前模板块文本的后面。  
    l  
    列表不能打印字符的清单。  
    n  
    读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。  
    N  
    追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。  
    p  
    打印模板块的行。  
    P（大写）  
    打印模板块的第一行。  
    q  
    退出Sed。  
    r file  
    从file中读行。  
    t label  
    if分支，从最后一行开始，条件一旦满足或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。  
    T label  
    错误分支，从最后一行开始，一旦发生错误或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。  
    w file  
    写并追加模板块到file末尾。  
    W file  
    写并追加模板块的第一行到file末尾。  
    !  
    表示后面的命令对所有没有被选定的行发生作用。  
    s/re/string  
    用string替换正则表达式re。  
    =  
    打印当前行号码。  
    #  
    把注释扩展到下一个换行符以前。  
    以下的是替换标记  
    *  
    g表示行内全面替换。  
    *  
    p表示打印行。  
    *  
    w表示把行写入一个文件。  
    *  
    x表示互换模板块中的文本和缓冲区中的文本。  
    *  
    y表示把一个字符翻译为另外的字符（但是不用于正则表达式）  
      
    4. 选项  
    -e command, --expression=command  
    允许多台编辑。  
    -h, --help  
    打印帮助，并显示bug列表的地址。  
    -n, --quiet, --silent  
      
    取消默认输出。  
    -f, --filer=script-file  
    引导sed脚本文件名。  
    -V, --version  
    打印版本和版权信息。  
      
    5. 元字符集^  
    锚定行的开始 如：/^sed/匹配所有以sed开头的行。   
    $  
    锚定行的结束 如：/sed$/匹配所有以sed结尾的行。   
    .  
    匹配一个非换行符的字符 如：/s.d/匹配s后接一个任意字符，然后是d。   
    *  
    匹配零或多个字符 如：/*sed/匹配所有模板是一个或多个空格后紧跟sed的行。  
    [] 
    匹配一个指定范围内的字符，如/[Ss]ed/匹配sed和Sed。  
    [^] 
    匹配一个不在指定范围内的字符，如：/[^A-RT-Z]ed/匹配不包含A-R和T-Z的一个字母开头，紧跟ed的行。  
    \(..\) 
    保存匹配的字符，如s/\(love\)able/\1rs，loveable被替换成lovers。  
    & 
    保存搜索字符用来替换其他字符，如s/love/**&**/，love这成**love**。   
    \<  
    锚定单词的开始，如:/\<love/匹配包含以love开头的单词的行。   
    \>  
    锚定单词的结束，如/love\>/匹配包含以love结尾的单词的行。   
    x\{m\}  
    重复字符x，m次，如：/0\{5\}/匹配包含5个o的行。   
    x\{m,\}  
    重复字符x,至少m次，如：/o\{5,\}/匹配至少有5个o的行。   
    x\{m,n\}  
    重复字符x，至少m次，不多于n次，如：/o\{5,10\}/匹配5--10个o的行。  
    6. 实例  
    删除：d命令  
    *  
    $ sed '2d' example-----删除example文件的第二行。  
    *  
    $ sed '2,$d' example-----删除example文件的第二行到末尾所有行。  
    *  
    $ sed '$d' example-----删除example文件的最后一行。  
    *  
    $ sed '/test/'d example-----删除example文件所有包含test的行。  
    替换：s命令  
    *  
    $ sed 's/test/mytest/g' example-----在整行范围内把test替换为mytest。如果没有g标记，则只有每行第一个匹配的test被替换成mytest。  
    *  
    $ sed -n 's/^test/mytest/p' example-----(-n)选项和p标志一起使用表示只打印那些发生替换的行。也就是说，如果某一行开头的test被替换成mytest，就打印它。  
    *  
    $ sed 's/^192.168.0.1/&localhost/' example-----&符号表示替换换字符串中被找到的部份。所有以192.168.0.1开头的行都会被替换成它自已加 localhost，变成192.168.0.1localhost。  
    *  
    $ sed -n 's/\(love\)able/\1rs/p' example-----love被标记为1，所有loveable会被替换成lovers，而且替换的行会被打印出来。  
    *  
    $ sed 's#10#100#g' example-----不论什么字符，紧跟着s命令的都被认为是新的分隔符，所以，“#”在这里是分隔符，代替了默认的“/”分隔符。表示把所有10替换成100。  
    选定行的范围：逗号  
    *  
    $ sed -n '/test/,/check/p' example-----所有在模板test和check所确定的范围内的行都被打印。  
    *  
    $ sed -n '5,/^test/p' example-----打印从第五行开始到第一个包含以test开始的行之间的所有行。  
    *  
    $ sed '/test/,/check/s/$/sed test/' example-----对于模板test和west之间的行，每行的末尾用字符串sed test替换。  
    多点编辑：e命令  
    *  
    $ sed -e '1,5d' -e 's/test/check/' example-----(-e)选项允许在同一行里执行多条命令。如例子所示，第一条命令删除1至5行，第二条命令用check替换test。命令的执 行顺序对结果有影响。如果两个命令都是替换命令，那么第一个替换命令将影响第二个替换命令的结果。  
    *  
    $ sed --expression='s/test/check/' --expression='/love/d' example-----一个比-e更好的命令是--expression。它能给sed表达式赋值。  
    从文件读入：r命令  
    *  
    $ sed '/test/r file' example-----file里的内容被读进来，显示在与test匹配的行后面，如果匹配多行，则file的内容将显示在所有匹配行的下面。  
    写入文件：w命令  
    *  
    $ sed -n '/test/w file' example-----在example中所有包含test的行都被写入file里。  
    追加命令：a命令  
    *  
    $ sed '/^test/a\\--->this is a example' example<-----'this is a example'被追加到以test开头的行后面，sed要求命令a后面有一个反斜杠。  
    插入：i命令  
    $ sed '/test/i\\  
    new line  
    -------------------------' example  
    如果test被匹配，则把反斜杠后面的文本插入到匹配行的前面。  
    下一个：n命令  
    *  
    $ sed '/test/{ n; s/aa/bb/; }' example-----如果test被匹配，则移动到匹配行的下一行，替换这一行的aa，变为bb，并打印该行，然后继续。  
    变形：y命令  
    *  
    $ sed '1,10y/abcde/ABCDE/' example-----把1--10行内所有abcde转变为大写，注意，正则表达式元字符不能使用这个命令。  
    退出：q命令  
    *  
    $ sed '10q' example-----打印完第10行后，退出sed。  
    保持和获取：h命令和G命令  
    *  
    $ sed -e '/test/h' -e '$G example-----在sed处理文件的时候，每一行都被保存在一个叫模式空间的临时缓冲区中，除非行被删除或者输出被取消，否则所有被处理的行都将 打印在屏幕上。接着模式空间被清空，并存入新的一行等待处理。在这个例子里，匹配test的行被找到后，将存入模式空间，h命令将其复制并存入一个称为保 持缓存区的特殊缓冲区内。第二条语句的意思是，当到达最后一行后，G命令取出保持缓冲区的行，然后把它放回模式空间中，且追加到现在已经存在于模式空间中 的行的末尾。在这个例子中就是追加到最后一行。简单来说，任何包含test的行都被复制并追加到该文件的末尾。  
    保持和互换：h命令和x命令  
    *  
    $ sed -e '/test/h' -e '/check/x' example -----互换模式空间和保持缓冲区的内容。也就是把包含test与check的行互换。  
    7. 脚本  
    Sed脚本是一个sed的命令清单，启动Sed时以-f选项引导脚本文件名。Sed对于脚本中输入的命令非常挑剔，在命令的末尾不能有任何空白或文本，如果在一行中有多个命令，要用分号分隔。以#开头的行为注释行，且不能跨行。  

git clone myhost.example.com:/path-to/gitroot/newrepo.git
echo"Short project description" >README.txt
git add README.txt
git commit -a -m "Add README file"
git push origin maste

git 服务器搭建，在自己服务器上搭建私有仓库

创建一个简单的私人Git版本控制服务器，首先得有个服务器（屁话）。这种方式适合人比较少的情况，管理不需要很复杂，只要增加几个账号就能搞定。

如下面的情况，有一个服务器，两个客户端。

服务器：Debian7.5 (192.168.10.14)
用  户：git (git-shell)
仓  库：sample.git
地  址：git@192.168.10.14:/home/git/sample.git

客户端：Mac    mymac.pub（mac git公钥）
       win7   mywin.pub（win7 git公钥）
简单步骤：

1、安装git服务，并创建git账号
2、创建示例仓库sample
3、导入客户端公钥
4、客户端连接并提交内容
5、修改Git权限，只使用git-shell命令
-- OK --
一、安装git
直接通过apt-get安装git。使用这个方式比较简单，当然也可以使用git源代码自己编译最新版本。

# apt-get update
# apt-get install git -y
1.1 创建git用户

创建git账户并登录，直接指定用户目录到/home/git

# useradd git -d /home/git -m -s /bin/bash
# su git
添加用户 user add
-d：指定用户目录
-m：如果目录不存在则创建
-s：可以指定用户使用的命令

二、创建sample库
创建库很简单，注意使用--bare参数。作为代码仓库服务器并不会在上面修改东西，所以只要有相关提交日子就可以。

$ cd ~
$ git init --bare sample.git
三、设置SSH Key
收集客户端公钥，复制到服务器上。 客户端当前账号RSA或DSA的数字签名文件id_rsa.pub 在.ssh用户目录中。通常情况下windows在 %userprofile%\.ssh 目录中，Mac在~/.ssh目录中。

mac上可以直接使用下面命令复制粘贴板上，或使用ssh上传

$ pbcopy < ~/.ssh/id_rsa.pub
win7上可以打开Git GUI界面有个帮助->show SSH Key菜单，如果没创建过可以点击创建SSH的签名文件，并复制公钥保存到服务器上。如果使用第三方的SSHKey服务，那可能实际位置会有些差异。

生成本地用户的签名文件，并把客户端上公钥导入到服务器上。如果有多个的话可以放在一个目录中，方便导入。如果是团队人比较多这种方式可能就不太适合了。

如把客户端的key文件mymac.pub和mywin.pub导入。

$ ssh-keygen -t rsa -b 4096
$ cat mymac.pub >> ~/.ssh/authorized_keys
$ cat mywin.pub >> ~/.ssh/authorized_keys
3.1 客户端获取sample库，并增加文件上传到服务器

在Mac客户端获取。

$ git clone git@192.168.10.14:/home/git/sample.git
Cloning into 'sample'...
warning: You appear to have cloned an empty repository.
Checking connectivity... done.
获取成功OK，增加一个文件，并提交到服务器上

$ cd sample
$ cat >> readme.md
first file.
^c
$ git add .
$ git commit -m "first commit"
$ git push
3.2 服务器上查看状态

$ git log
commit 8b070256af351b43a74753f0b05969fcfe9c7310
Author: moguf <moguf_notify@163.com>
Date:   Sun Apr 3 20:49:17 2016 +0800

    first commit
3.3 在Win客户端获取

windows上可以直接使用git或TortoiseGit获取。

git@192.168.10.14:/home/git/sample.git
新建一个文件并提交到服务器上。在服务器上通过git log就能看到第二提交的内容。mac客户机上git pull能看到刚才新加的文件。

这样Git服务器仓库功能基本完成。

四、安全问题
为安全考虑Git账号只允许使用git-shell。在passwd文件中找到git用户，把/bin/bash直接修改成/usr/bin/git-shell 登录root账号，并修改git的用户权限。

$ su
# vim /etc/passwd
这样git用户只能git-shell命令不能登录了。

使用 su git 命令就会出现下面提示，git用户就无法登录到shell，这样就OK了。

# su git
fatal: Interactive git shell is not enabled.
hint: ~/git-shell-commands should exist and have read and execute access.
五、数据仓库迁移
上面的情况是空仓库，如果原来已经有在使用的仓库，想迁移到新仓库。

mac 下切换

先看一下remote的名字。

$ git remote
origin
一般可以看到origin，这个就是原来仓库名称。使用git remote set_url命令更换地址，如新地址是git@192.168.10.14:/home/git/sample.git

$ git pull
$ git remote set-url origin git@192.168.10.14:/home/git/sample.git
$ git push
获取原来最新代码
切换到新地址
提交当前库内容
win7下切换

如果有装‘TortoiseGit’。直接右击当前目录，进入Settings把Remote中地址替换掉。没装就用上Git自带的，使用上面命令替换。

提示：这种方式在空仓库下迁移比较方便，如果新地址有数据那就比较麻烦了。

六、其它相关：从源码安装Git
系统提供的包比较文档，当然可能会发现有些不得不安装最新版本才能解决。反正会有各种原有会须要升级git。

6.1 安装依赖包

$ sudo apt-get install libcurl4-gnutls-dev libexpat1-dev gettext libz-dev libssl-dev asciidoc xmlto docbook2x
6.2 下载编译

一般的编译安装方法，make并make install。

$ wget https://github.com/git/git/archive/v2.9.1.tar.gz
$ tar fvxz v2.9.1.tar.gz
$ cd git-2.9.1
$ make prefix=/usr all doc info
$ su
# make prefix=/usr install install-doc install-html install-info
安装完成后验证一下git版本

# git --version
git version 2.9.1
上面的方法是全局安装的，如果须要更细节的控制安装可以参考git提供的安装帮助原始文档。

提示： 最新版本获取在github上 https://github.com/git/git/releases

6.3 磁盘爆了！

上面的依赖包尺寸有些大。虚拟机本来就是用来测试的，分配的磁盘空间比较小。发生了磁盘空间不足问题，100%占用-_-!!有些杯具，这是意外中的意外。可以使用df -hl命令查看剩余空间。

root@sunroom:/home/abc# df -hl
Filesystem              Size  Used Avail Use% Mounted on
rootfs                  2.5G  2.5G     0 100% /
udev                    10M     0   10M   0% /dev
tmpfs                   76M  224K   76M   1% /run
/dev/disk/by-uuid/371b6c92-bdc9-417d-b37f-fae99e6ecce1  2.5G  2.5G     0 100% /
tmpfs                   5.0M     0  5.0M   0% /run/lock
tmpfs                   213M     0  213M   0% /run/shm
/dev/sda6               5.2G  139M  4.8G   3% /home
tmpfs                   213M     0  213M   0% /tmp
简单清理 删除缓存文件

清理旧版本的软件缓存

# apt-get autoclean
清理所有软件缓存：

# apt-get clean

echo "Starting deploying..."


cd $HOME/gznx.xqw
git pull

ant war.gateway

cp build/dist/gateway.war $HOME/gznx/build/dist/gateway.war

cd $HOME/gznx.xqw.git

git push nxy

ssh core /home/wls/bin/deploy.xqw

export JAVA_HOME=/opt/middleware/jdk7
cd $HOME/gznx.xqw

git pull

/opt/middleware/ant/bin/ant deploy

cp -av build/dist/* $HOME/gznx/build/dist



利用ssh传输文件

在linux下一般用scp这个命令来通过ssh传输文件。


1、从服务器上下载文件
scp username@servername:/path/filename /var/www/local_dir（本地目录）

 例如scp root@192.168.0.101:/var/www/test.txt  把192.168.0.101上的/var/www/test.txt 的文件下载到/var/www/local_dir（本地目录）


2、上传本地文件到服务器
scp /path/filename username@servername:/path   

例如scp /var/www/test.php  root@192.168.0.101:/var/www/  把本机/var/www/目录下的test.php文件上传到192.168.0.101这台服务器上的/var/www/目录中

 

3、从服务器下载整个目录
scp -r username@servername:/var/www/remote_dir/（远程目录） /var/www/local_dir（本地目录）

例如:scp -r root@192.168.0.101:/var/www/test  /var/www/  

4、上传目录到服务器
scp  -r local_dir username@servername:remote_dir
例如：scp -r test  root@192.168.0.101:/var/www/   把当前目录下的test目录上传到服务器的/var/www/ 目录



一、git clone
远程操作的第一步，通常是从远程主机克隆一个版本库，这时就要用到git clone命令。

$ git clone <版本库的网址>
比如，克隆jQuery的版本库。

$ git clone https://github.com/jquery/jquery.git
该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为git clone命令的第二个参数。

$ git clone <版本库的网址> <本地目录名>
git clone支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子。

$ git clone http[s]://example.com/path/to/repo.git/
$ git clone ssh://example.com/path/to/repo.git/
$ git clone git://example.com/path/to/repo.git/
$ git clone /opt/git/project.git 
$ git clone file:///opt/git/project.git
$ git clone ftp[s]://example.com/path/to/repo.git/
$ git clone rsync://example.com/path/to/repo.git/
SSH协议还有另一种写法。

$ git clone [user@]example.com:path/to/repo.git/
通常来说，Git协议下载速度最快，SSH协议用于需要用户认证的场合。各种协议优劣的详细讨论请参考官方文档。
二、git remote
为了便于管理，Git要求每个远程主机都必须指定一个主机名。git remote命令就用于管理主机名。
不带选项的时候，git remote命令列出所有远程主机。

$ git remote
origin
使用-v选项，可以参看远程主机的网址。

$ git remote -v
origin  git@github.com:jquery/jquery.git (fetch)
origin  git@github.com:jquery/jquery.git (push)
上面命令表示，当前只有一台远程主机，叫做origin，以及它的网址。
克隆版本库的时候，所使用的远程主机自动被Git命名为origin。如果想用其他的主机名，需要用git clone命令的-o选项指定。

$ git clone -o jQuery https://github.com/jquery/jquery.git
$ git remote
jQuery
上面命令表示，克隆的时候，指定远程主机叫做jQuery。
git remote show命令加上主机名，可以查看该主机的详细信息。

$ git remote show <主机名>
git remote add命令用于添加远程主机。

$ git remote add <主机名> <网址>
git remote rm命令用于删除远程主机。

$ git remote rm <主机名>
git remote rename命令用于远程主机的改名。

$ git remote rename <原主机名> <新主机名>
三、git fetch
一旦远程主机的版本库有了更新（Git术语叫做commit），需要将这些更新取回本地，这时就要用到git fetch命令。

$ git fetch <远程主机名>
上面命令将某个远程主机的更新，全部取回本地。
git fetch命令通常用来查看其他人的进程，因为它取回的代码对你本地的开发代码没有影响。
默认情况下，git fetch取回所有分支（branch）的更新。如果只想取回特定分支的更新，可以指定分支名。

$ git fetch <远程主机名> <分支名>
比如，取回origin主机的master分支。

$ git fetch origin master
所取回的更新，在本地主机上要用"远程主机名/分支名"的形式读取。比如origin主机的master，就要用origin/master读取。
git branch命令的-r选项，可以用来查看远程分支，-a选项查看所有分支。

$ git branch -r
origin/master

$ git branch -a
* master
  remotes/origin/master
上面命令表示，本地主机的当前分支是master，远程分支是origin/master。
取回远程主机的更新以后，可以在它的基础上，使用git checkout命令创建一个新的分支。

$ git checkout -b newBrach origin/master
上面命令表示，在origin/master的基础上，创建一个新分支。
此外，也可以使用git merge命令或者git rebase命令，在本地分支上合并远程分支。

$ git merge origin/master
# 或者
$ git rebase origin/master
上面命令表示在当前分支上，合并origin/master。
四、git pull
git pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。

$ git pull <远程主机名> <远程分支名>:<本地分支名>
比如，取回origin主机的next分支，与本地的master分支合并，需要写成下面这样。

$ git pull origin next:master
如果远程分支是与当前分支合并，则冒号后面的部分可以省略。

$ git pull origin next
上面命令表示，取回origin/next分支，再与当前分支合并。实质上，这等同于先做git fetch，再做git merge。

$ git fetch origin
$ git merge origin/next
在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动"追踪"origin/master分支。
Git也允许手动建立追踪关系。

git branch --set-upstream master origin/next
上面命令指定master分支追踪origin/next分支。
如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。

$ git pull origin
上面命令表示，本地的当前分支自动与对应的origin主机"追踪分支"（remote-tracking branch）进行合并。
如果当前分支只有一个追踪分支，连远程主机名都可以省略。

$ git pull
上面命令表示，当前分支自动与唯一一个追踪分支进行合并。
如果合并需要采用rebase模式，可以使用--rebase选项。

$ git pull --rebase <远程主机名> <远程分支名>:<本地分支名>
如果远程主机删除了某个分支，默认情况下，git pull 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致git pull不知不觉删除了本地分支。
但是，你可以改变这个行为，加上参数 -p 就会在本地删除远程已经删除的分支。

$ git pull -p
# 等同于下面的命令
$ git fetch --prune origin 
$ git fetch -p
五、git push
git push命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相仿。

$ git push <远程主机名> <本地分支名>:<远程分支名>
注意，分支推送顺序的写法是<来源地>:<目的地>，所以git pull是<远程分支>:<本地分支>，而git push是<本地分支>:<远程分支>。
如果省略远程分支名，则表示将本地分支推送与之存在"追踪关系"的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。

$ git push origin master
上面命令表示，将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。
如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。

$ git push origin :master
# 等同于
$ git push origin --delete master
上面命令表示删除origin主机的master分支。
如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。

$ git push origin
上面命令表示，将当前分支推送到origin主机的对应分支。
如果当前分支只有一个追踪分支，那么主机名都可以省略。

$ git push
如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push。

$ git push -u origin master
上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。
不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。

$ git config --global push.default matching
# 或者
$ git config --global push.default simple
还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用--all选项。

$ git push --all origin
上面命令表示，将所有本地分支都推送到origin主机。
如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做git pull合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用--force选项。

$ git push --force origin 
上面命令使用--force选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用--force选项。
最后，git push不会推送标签（tag），除非使用--tags选项。

$ git push origin --tags

 










文档库：
svn://122.115.50.134:6123/xfjr/product/documents/09结算系统
svn://122.115.50.134:6123/xfjr/product/documents/14公共资料

svn://122.115.50.134:6123/xfjr/product/codes/trunk/jee/src/apps/cc-prj
svn://122.115.50.134:6123/xfjr/product/codes/trunk/jee/src/apps/ce-prj
svn://122.115.50.134:6123/xfjr/product/codes/trunk/jee/src/www/cc-prj
svn://122.115.50.134:6123/xfjr/product/codes/trunk/jee/src/www/ce-prj
svn://122.115.50.134:6123/xfjr/product/codes/trunk/jee/src/apis/cc-prj-http-skeleton
svn://122.115.50.134:6124/xfjr/product/codes/trunk/jee/src/apis/cc-prj-http-stub
svn://122.115.50.134:6125/xfjr/product/codes/trunk/jee/src/apis/cc-prj-thrift-gen
svn://122.115.50.134:6126/xfjr/product/codes/trunk/jee/src/apis/cc-prj-thrift-skeleton
svn://122.115.50.134:6127/xfjr/product/codes/trunk/jee/src/apis/cc-prj-thrift-stub
导入
psql -d xfjr -h localhost -p 5433 -U postgres -f D:\public.sql

导出
pg_dump   -h 192.168.16.179 -p 5432  -U postgres  --column-inserts -t pisdb.t_p_mp_rpt  -f  ../data/output.sql  pis2
pis为数据库服务名，pisdb为schema名

gradle_run.bat
ue opera
navicat premium
pgsql:
F:\xfjr\pgsql\bin
初始化
initdb.exe -D F:\xfjr\pgsql\data -E UTF8 --locale=C
注册服务
pg_ctl.exe register -D F:\xfjr\pgsql\data -N PgSql
启动服务
net start PgSql