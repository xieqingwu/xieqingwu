SELECT TABNAME FROM SYSCAT.TABLES WHERE TBSPACE='琛ㄧ┖闂村悕';

db2p鎼滅储d -d 鏁版嵁搴撳悕 -tablespace 鍦ㄧ幇瀹炵粨鏋滀腑濡備笅灏辨槸 AS鏄痑utomaitc storage鑷姩瀛樺偍鐨勭缉鍐欙紝AR鏄痑utoresize鐨勭缉鍐 AS鏄痽es璇佹槑琛ㄧ┖闂存槸鑷姩瀛樺偍鐨 AR鏄痽es璇佹槑琛ㄧ┖闂存槸鑷姩鎵╁睍鐨
statistics
AS AR
YES NO

绯荤粺绠＄悊鐨勭┖闂达紙SMS锛夊拰鏁版嵁搴撶鐞嗙殑绌洪棿锛圖MS锛夋槸DB2鏁版嵁搴撲腑涓ょ绫诲瀷鐨勫熀鏈〃绌洪棿銆
涓 SMS 琛ㄧ┖闂寸浉鍏宠仈鐨勫鍣ㄦ槸鏂囦欢绯荤粺鐩綍锛岃岃繖浜涚洰褰曚腑鐨勬枃浠朵細闅忕潃琛ㄧ┖闂翠腑瀵硅薄鐨勫闀胯屽闀裤傛枃浠朵細澧炲姞鑷宠揪鍒板叾涓竴涓鍣ㄤ笂鐨勬枃浠剁郴缁熼檺鍒舵垨杈惧埌鏁版嵁搴撶殑琛ㄧ┖闂村ぇ灏忛檺鍒躲
DMS 琛ㄧ┖闂寸敱鏂囦欢瀹瑰櫒鎴栧師濮嬭澶囧鍣ㄧ粍鎴愶紝瀹冧滑鐨勫ぇ灏忔槸鍦ㄥ皢瀹瑰櫒鎸囧畾缁欒〃绌洪棿鏃惰缃殑銆傚綋瀹瑰櫒涓殑鎵鏈夌┖闂撮兘宸茶浣跨敤鏃讹紝鍒欒涓鸿〃绌洪棿宸叉弧銆備絾鏄紝涓 SMS 涓嶅悓锛屾偍鍙互浣跨敤 ALTER TABLESPACE 璇彞鏉ユ坊鍔犳垨鎵╁睍瀹瑰櫒锛屼粠鑰屽厑璁稿皢鏇村鐨勫瓨鍌ㄥ櫒绌洪棿鎻愪緵缁欒〃绌洪棿銆侱MS 琛ㄧ┖闂磋繕鍏锋湁绉颁负鈥滆嚜鍔ㄨ皟鏁村ぇ灏忊濈殑鍔熻兘銆傚綋鍙互鑷姩璋冩暣澶у皬鐨 DMS 琛ㄧ┖闂翠腑鐨勭┖闂磋娑堣楁椂锛孌B2 鏁版嵁搴撶郴缁熷彲鑳藉洖鎵╁睍涓涓垨澶氫釜鏂囦欢瀹瑰櫒銆係MS 琛ㄧ┖闂村叿鏈夌被浼间簬鑷姩澧為暱鐨勫姛鑳戒絾鏈鈥滆嚜鍔ㄨ皟鏁村ぇ灏忊濅笓闂ㄧ敤浜 DMS銆
鍚敤鍜岀鐢ㄨ嚜鍔ㄨ皟鏁村ぇ灏忥紙AUTORESIZE锛
缂虹渷鎯呭喌涓嬶紝涓嶄細瀵 DMS 琛ㄧ┖闂村惎鐢ㄨ嚜鍔ㄨ皟鏁村ぇ灏忓姛鑳姐備笅鍒楄鍙ュ垱寤轰笉鍚敤鑷姩璋冩暣澶у皬鍔熻兘鐨 DMS 琛ㄧ┖闂达細
CREATE TABLESPACE DMS1 MANAGED BY DATABASE
     USING (FILE '/db2files/DMS1' 10 M)瑕佸惎鐢ㄨ嚜鍔ㄨ皟鏁村ぇ灏忓姛鑳斤紝灏 AUTORESIZE YES 瀛愬彞鎸囧畾涓 CREATE TABLESPACE 璇彞鐨勪竴閮ㄥ垎锛
CREATE TABLESPACE DMS1 MANAGED BY DATABASE
     USING (FILE '/db2files/DMS1' 10 M) AUTORESIZE YES鍦ㄥ凡鍒涘缓 DMS 琛ㄧ┖闂翠箣鍚庯紝杩樺彲浠ラ氳繃鍦 ALTER TABLESPACE 璇彞涓婁娇鐢 AUTORESIZE 瀛愬彞鏉ュ惎鐢ㄦ垨绂佺敤鑷姩璋冩暣澶у皬鍔熻兘锛
ALTER TABLESPACE DMS1 AUTORESIZE YES
   ALTER TABLESPACE DMS1 AUTORESIZE NO鏈変袱涓叾浠栧睘鎬э紙MAXSIZE 鍜 INCREASESIZE锛変笌鑷姩璋冩暣澶у皬鐨勮〃绌洪棿鐩稿叧鑱斻


瑕佺湅浣犵殑琛ㄧ┖闂存槸绯荤粺绠＄悊杩樻槸鏁版嵁搴撶鐞嗭紝绯荤粺绠＄悊鐨勬槸鑷姩澧為暱鐨勶紝鏁版嵁搴撶鐞嗙殑琛ㄧ┖闂存槸瑕佹寚瀹氬ぇ灏忕殑銆
绯荤粺绠＄悊锛歋MS
鏁版嵁搴撶鐞嗭細DMS

reorg 鍓嶆彁鍒犻櫎浜嗗ぇ閲忔暟鎹紝涓鑸儏鍐垫槸鑳介噴鏀惧嚭绌洪棿鍑烘潵鐨勶紝浣嗕篃鏈夊彲鑳界┖闂翠笉浣嗘病閲婃斁鍙嶈岃繕鏄澶х┖闂达紝鐢╠b2dart鐪嬬湅楂樻按浣嶅惂

reorg table schema.tablename;
runstats on table schema.tablename;


鏌ヤ簡涓涓嬭祫鏂欙紝鍙互閫氳繃淇敼database_memory绯荤粺鍙傛暟鏉ヨ缃暟鎹簱鍐呭瓨鐨勪娇鐢ㄣ傞粯璁ゆ儏鍐典笅database_memory鐨勮缃槸AUTOMATIC锛岃繖閲屽彲浠ラ氳繃涓嬮潰鐨勫懡浠ゆ潵淇敼鍙傛暟锛屼慨鏀瑰畬鍚庤閲嶆柊鍚姩db2


tar -czvf鍘
tar -zxvf 瑙
[plain] view plain copy 鍦–ODE涓婃煡鐪嬩唬鐮佺墖娲剧敓鍒版垜鐨勪唬鐮佺墖
$ db2 update db cfg for <db> using database_memory 8000000
$ db2stop force
$ db2start

# Linux 涓 鍙栬繘绋嬪崰鐢 cpu 鏈楂樼殑鍓10涓繘绋
ps aux|head -1;ps aux|grep -v PID|sort -rn -k +3|head


# linux 涓 鍙栬繘绋嬪崰鐢ㄥ唴瀛(MEM)鏈楂樼殑鍓10涓繘绋

ps aux|head -1;ps aux|grep -v PID|sort -rn -k +4|head
浣跨敤鍛戒护鐪嬬湅浣犵殑鏁版嵁搴撶敤浜嗗灏戝唴瀛橈細
$db2 get dbm cfg |grep -i memory

# db2mtrk -i -d -v
Tracking Memory on: 2014/06/22 at 21:50:19

Memory for instance

 Other Memory is of size 63111168 bytes
 FCMBP Heap is of size 851968 bytes
 Database Monitor Heap is of size 983040 bytes
 Total: 64946176 bytes

Memory for database: PA913

 Backup/Restore/Util Heap is of size 65536 bytes
 Package Cache is of size 262144 bytes
 Other Memory is of size 196608 bytes
 Catalog Cache Heap is of size 262144 bytes
 Buffer Pool Heap (1) is of size 24465047552 bytes
 Buffer Pool Heap (System 32k buffer pool) is of size 1835008 bytes
 Buffer Pool Heap (System 16k buffer pool) is of size 1572864 bytes
 Buffer Pool Heap (System 8k buffer pool) is of size 1441792 bytes
 Buffer Pool Heap (System 4k buffer pool) is of size 1376256 bytes
 Shared Sort Heap is of size 0 bytes
 Lock Manager Heap is of size 3881172992 bytes
 Database Heap is of size 94830592 bytes
 Application Heap (47) is of size 131072 bytes
 Application Heap (45) is of size 65536 bytes
 Application Heap (44) is of size 65536 bytes
 Application Heap (43) is of size 65536 bytes
 Application Heap (42) is of size 65536 bytes
 Application Heap (41) is of size 65536 bytes
 Application Heap (40) is of size 65536 bytes
 Application Heap (39) is of size 65536 bytes
 Application Heap (38) is of size 65536 bytes
 Application Heap (37) is of size 65536 bytes
 Application Heap (36) is of size 65536 bytes
 Application Heap (35) is of size 65536 bytes
 Application Heap (34) is of size 65536 bytes
 Application Heap (33) is of size 65536 bytes
 Application Heap (32) is of size 65536 bytes
 Application Heap (31) is of size 65536 bytes
 Application Heap (30) is of size 65536 bytes
 Application Heap (29) is of size 65536 bytes
 Application Heap (28) is of size 65536 bytes
 Application Heap (27) is of size 65536 bytes
 Application Heap (26) is of size 65536 bytes
 Application Heap (25) is of size 65536 bytes
 Application Heap (24) is of size 65536 bytes
 Application Heap (23) is of size 65536 bytes
 Application Heap (22) is of size 65536 bytes
 Application Heap (21) is of size 65536 bytes
 Application Heap (20) is of size 65536 bytes
 Application Heap (19) is of size 65536 bytes
 Application Heap (18) is of size 65536 bytes
 Application Heap (17) is of size 65536 bytes
 Application Heap (16) is of size 65536 bytes
 Application Heap (15) is of size 65536 bytes
 Application Heap (14) is of size 65536 bytes
 Application Heap (13) is of size 65536 bytes
 Application Heap (12) is of size 65536 bytes
 Application Heap (11) is of size 196608 bytes
 Application Heap (10) is of size 65536 bytes
 Application Heap (9) is of size 65536 bytes
 Application Heap (8) is of size 65536 bytes
 Application Heap (7) is of size 131072 bytes
 Applications Shared Heap is of size 393216 bytes
 Total: 28451340288 bytes

鍏朵腑閲嶇偣鏄淢emory for database: PA913鈥濅笅鐨勨淏uffer Pool Heap (1) is of size 24465047552 bytes鈥濓紝鐢ㄤ簡杩25G鐨勫唴瀛橈紝鐢变簬鎴戠‘瀹氭垜鐨勬暟鎹簱涓殑鏁版嵁閲忎笉鏄緢澶э紝鎵浠ュ噺灏戞暟鎹簱鍐呭瓨灏辨槸鎴戠殑棣栭変簡銆

鏌ヤ簡涓涓嬭祫鏂欙紝鍙互閫氳繃淇敼database_memory绯荤粺鍙傛暟鏉ヨ缃暟鎹簱鍐呭瓨鐨勪娇鐢ㄣ傞粯璁ゆ儏鍐典笅database_memory鐨勮缃槸AUTOMATIC锛岃繖閲屽彲浠ラ氳繃涓嬮潰鐨勫懡浠ゆ潵淇敼鍙傛暟锛屼慨鏀瑰畬鍚庤閲嶆柊鍚姩db2

$ db2 update db cfg for <db> using database_memory 8000000
$ db2stop force
$ db2start

鏁版嵁搴撻噸鍚悗锛屽厛鐢ㄥ鎴风杩炴帴涓涓嬫暟鎹簱锛岀劧鍚庡啀浣跨敤鈥渄b2mtrk -i -d -v鈥濇煡鐪嬪唴瀛樹娇鐢ㄦ儏鍐碉紝灏卞彂鐜板唴瀛樺氨浼氭湁鏄庢樉鐨勪笅闄嶃傜敤top鏌ョ湅缁撴灉涔熺被浼笺

鍦ㄧ湡瀹炵殑DB2浣跨敤鎯呭喌涓嬶紝淇敼杩欎釜鍊兼槸闇瑕佹厧閲嶇殑锛屽彲浠ュ弬鑰冧笅闈㈠垪鍑虹殑鍙傝冭祫鏂欍


select basi.ID,basi.RULE_ID,basi.ALERT_DATE,basi.CUSTOM_ID,basi.OPER_TIME,rule.DISPLAY_NAME,1 as operStatus
from ALERT_BASICINFO basi join XT_RULE_MAIN rule on basi.RULE_ID = rule.id and send_type='1'
where basi.alert_date >='2016-10-27' and basi.alert_date <='2016-10-27'
and   exists ( select * from ALERT_GL_BASIC_DETAIL detail left join ALERT_FLOW_INFO flow on detail.DETAIL_ID = flow.DETAIL_ID
where detail.BASICINFO_ID = basi.id and flow.PERUSE_STATE = 0 );

select * from ALERT_FLOW_INFO flow where exists(select * from ALERT_GL_BASIC_DETAIL detail join ALERT_BASICINFO basi on detail.BASICINFO_ID = basi.id
where detail.DETAIL_ID = flow.DETAIL_ID and basi.id='20071102009800124306320161026165435');
1.1   妫鏌ョ鐞嗙浉鍏虫湇鍔

RHCS鐨勫寘鎷4涓湇鍔★紝鎸夌収鍚姩椤哄簭渚濇鏄細ccsd銆乧man銆乫enced銆乺gmanager銆傚彲浠ヤ娇鐢╯ervice鍛戒护鍚仠杩欎簺鏈嶅姟鎴栨煡鐪嬬姸鎬併傦紙service service_name start/stop/status锛
闆嗙兢涓湁涓や釜鏈嶅姟锛屾暟鎹簱鍜孎TP銆傛暟鎹簱鏈嶅姟鍖呮嫭VIP銆 鏂囦欢绯荤粺銆 db2run鑴氭湰涓変釜璧勬簮銆傝繖浜涘彲浠ユ煡鐪嬮泦缇ら厤缃枃浠 /etc/cluster/cluster.conf銆
鍦ㄥ浘褰㈢晫闈笅锛屼娇鐢 system-config-cluster 鍚姩闆嗙兢绠＄悊宸ュ叿 銆傚湪鍛戒护琛屼笅锛屼娇鐢╟lustat鍛戒护鍙互鏌ョ湅闆嗙兢鐘舵侊紱浣跨敤clusvcadm鍛戒护鍙互鍚姩銆佸垏鎹㈡湇鍔°

list command options
db2 update command options using c off

鍚戣〃涓鍔犱竴涓 VARCHAR 鍒楋細
ALTER TABLE distributors ADD COLUMN address VARCHAR(30);

鐢╬s鍛戒护鏌ョ湅鏄惁鏈塪b2sysc鍚庡彴杩涚▼

 锛僷s -ef | db2sysc

?  妫鏌ユ暟鎹簱鏈嶅姟鍣ㄦ槸鍚﹀彲浠ラ氳繃缃戠粶璁块棶
鐩稿叧鍛戒护锛歱ing 10.7.63.202
                  telnet 10.7.63.202 60000
                  db2 connect to ddn user db2inst 锛堜娇鐢╠b2inst鐢ㄦ埛锛



?  骞冲彴鏈嶅姟鍣ㄩ噸鍚悗闇瑕佸惎鍔ㄧ殑鏈嶅姟姹囨诲涓嬶細
web1銆2鏈嶅姟鍣:

service tomcat start  鍚姩tomcat鏈嶅姟

service turbomq start  鍚姩turbomq鏈嶅姟

/usr/local/GETGPSMaile/run.sh  鍚姩鑾峰彇閲岀▼鏁版湇鍔

鍙敤ps -ef  | grep java杩涜鏌ョ湅鏄惁褰诲簳鍏抽棴

lvs鏈嶅姟鍣ㄦ棤闇鍗曠嫭鍚湇鍔★紝闅忓紑鏈哄嵆鍙惎鍔ㄧ浉鍏虫湇鍔

?  鎵嬪姩鎸傝浇鐩稿叧璧勬簮鎿嶄綔
濡傛灉RHCS闆嗙兢鍑虹幇寮傚父锛屾棤娉曞惎鍔ㄦ垨鍒囨崲鏁版嵁搴撴湇鍔★紝鍙互閫氳繃鎵嬪伐鏂瑰紡鎸傝浇鐩稿叧璧勬簮銆備絾姝ゆ椂杩欎簺璧勬簮宸茬粡鑴辩闆嗙兢杞欢鐨勭鐞嗭紝闆嗙兢鐘舵佹仮澶嶆甯稿悗锛屽簲鍚屾牱閫氳繃鎵嬪伐鏂瑰紡鍗歌浇杩欎簺璧勬簮锛屽啀浣跨敤闆嗙兢绠＄悊宸ュ叿鍚姩鏈嶅姟銆

 littleNoPwdContract

(1) 鍗歌浇澶辫触鑺傜偣涓婄殑璧勬簮



鐧婚檰鍑虹幇鏁呴殰鐨勬湇鍔″櫒锛屾鏌ラ泦缇よ祫婧愮姸鎬併



妫鏌ユ暟鎹簱瀹炰緥鏄惁宸茬粡鍋滄锛坧s -ef | grep db2sysc锛夛紝濡傛湭鍋滄浠b2inst鐢ㄦ埛鎵цdb2stop鍛戒护锛

妫鏌ユ枃浠剁郴缁熸槸鍚﹀凡缁忓嵏杞斤紙df -h锛夛紝濡傛湭鍗歌浇浠oot鐢ㄦ埛鎵ц umount 鍛戒护锛

妫鏌IP鏄惁宸茬粡瑙ｉ櫎缁戝畾锛坕fconfig锛夛紝濡傛湭瑙ｇ粦浠oot鐢ㄦ埛鎵ц ifconfig eth0:1 down 鍛戒护銆



濡傛灉閮ㄥ垎璧勬簮鏃犳硶鍗歌浇锛岃冭檻鍦ㄩ傚綋鏃跺欓噸鍚晠闅滄湇鍔″櫒銆



(2) 鍦ㄥ彲鐢ㄨ妭鐐逛笂鎸傝浇璧勬簮



鐧婚檰鐘舵佹甯哥殑鏈嶅姟鍣紝浠oot鐢ㄦ埛鎵ц濡備笅鍛戒护锛



缁戝畾VIP锛歩fconfig eth0:1 10.7.63.202 netmask 255.255.255.128 up

鎸傝浇鏂囦欢绯荤粺锛歮ount /dev/sdb1 /mnt/data

鍚姩鏁版嵁搴擄細su - db2inst

            db2start



(3) 妫鏌ユ暟鎹簱鐘舵



鍦╓EB鏈嶅姟鍣ㄤ笂浠b2inst鐢ㄦ埛鎵ц濡備笅鍛戒护锛



杩炴帴鏁版嵁搴擄細db2 connect to ddn user db2inst 鍛戒护

鏌ヨ琛ㄤ腑鐨勬暟鎹細db2 鈥渟elect * from mbl_device fetch first 1 rows only鈥


1.2   妫鏌B2瀹炰緥鏄惁宸茬粡鍚姩

鐢╬s鍛戒护鏌ョ湅鏄惁鏈塪b2sysc鍚庡彴杩涚▼

锛僷s -ef | db2sysc


..
涔熷彲浠ヤ互DB2瀹炰緥鎵鏈夎呯櫥褰曪紝閫氳繃鍙戝嚭db2start鍛戒护鏉ョ‘淇濆惎鍔ㄤ簡瀹炰緥锛堝鏋滃疄渚嬪凡缁忓惎鍔紝鍒欎細鍛婄煡SQL1026N  鏁版嵁搴撶鐞嗗櫒宸叉縺娲伙紱鍚﹀垯锛屽皢鎶婂疄渚嬪惎鍔ㄨ捣鏉ワ級



1.3   鏌ョ湅琛ㄧ┖闂寸姸鎬佹槸鍚︽甯

浠b2瀹炰緥鎵鏈夎呯櫥褰
#db2 conn to ddn
#db2 list tablespaces show detail        //鍦ㄥ崟鍒嗗尯涓婃煡鐪嬭〃绌洪棿鐨勭姸鎬,姝ｅ父杩斿洖0x0000
# db2_all list tablespaces show detail    //鍦ㄦ墍鏈夊垎鍖轰笂鏌ョ湅琛ㄧ┖闂寸殑鐘舵

鍙互浣跨敤LIST TABLESPACES 鍛戒护纭畾杩炴帴鏁版嵁搴撲腑琛ㄧ┖闂寸殑褰撳墠鐘舵侊紝鍙互浣跨敤SHOW DETAIL閫夐」鏌ョ湅琛ㄧ┖闂寸殑璇︾粏淇℃伅銆傛瘮濡傦紝鎴戜滑杩炰笂SAMPLE鏁版嵁搴擄紝鎵цlist tablespaces show detail 锛屽彲浠ョ湅鍒扮姸鎬佽繑鍥炲兼槸0x0000锛屾鏃讹紝浣跨敤db2tbst鍙互鏌ョ湅鐘舵佺紪鍙峰浜庣殑鐘舵佸惈涔夛紝鍏蜂綋璇硶濡備笅锛

db2tbst   鍙互鏌ョ湅缂栧彿鎵浠ｈ〃鐨勭姸鎬

db2tbst 鍛戒护鎺ユ敹鍗佸叚杩涘埗鐨勭姸鎬佸硷紝骞惰繑鍥炵浉搴旂殑琛ㄧ┖闂寸姸鎬併備緥濡傦紝鍛戒护 db2tbst 0x0008 杩斿洖 State = Load Pending 銆傝岃鍗佸叚杩涘埗鐨勭姸鎬佸煎弽杩囨潵鍙堟槸 LIST TABLESPACES 鍛戒护杈撳嚭鐨勭粍鎴愰儴鍒嗐傝〃绌洪棿鐨勫閮ㄥ彲瑙佺姸鎬佹槸鐢卞崟涓姸鎬佸肩殑鍗佸叚杩涘埗鎬诲拰鏋勬垚鐨勩備緥濡傦紝濡傛灉琛ㄧ┖闂寸殑鐘舵佹槸 Backup Pending鍜 Load in Progress锛岄偅涔堟墍杩斿洖鐨勫崄鍏繘鍒跺煎氨鏄 0x20020锛0x00020 + 0x20000锛

1.4   涓庤〃鏈夊叧鎿嶄綔

?  鏄剧ず涓嶮BL_ME鍖归厤鐨勬墍鏈夎〃锛
#db2 list tables | grep MBL_ME
?  鏌ョ湅MBL_MESSAGE琛ㄧ粨鏋勶細
#db2 discribe table MBL_MESSAGE
?  鏄剧ず琛ㄤ腑鎵鏈夋暟鎹細
#db2 "select * from MBL_MESSAGE"
?  鏄剧ずMBL_MESSAGELOG琛ㄤ腑鍓峮琛屾暟鎹唴瀹癸細
#db2 "select * from MBL_MESSAGELOG fetch first n rows only"
?  瀵煎嚭琛ㄥ拰鍒犻櫎琛ㄦ搷浣滐細
渚嬪锛氬皢mbl_messagelog_1127琛ㄤ腑鐨勬暟鎹鍑轰负.del鏍煎紡鐨勬枃浠
      db2 export to mbl_messagelog_1127.del of del select * from mbl_messagelog_1127"
      鍒犻櫎mbl_messagelog_1127琛ㄥ強鍖呭惈鐨勬暟鎹
      db2 drop table mbl_messagelog_1127
1.5   鏌ョ湅纾佺洏绌洪棿

#df -h

1.6   妫鏌ラ厤缃枃浠朵俊鎭

su 鈥 db2inst
db2 connect to ddn

鏄剧ずDB2閰嶇疆鏂囦欢涓笌鏁版嵁搴揹dn鏈夊叧鎵鏈変俊鎭細

銆恉b2inst@db1 ~銆慸b2 get db cfg for ddn show detail|more

鏌ョ湅DB2閰嶇疆鏂囦欢锛岃繃婊ゅ嚭log鐨勯厤缃俊鎭細

銆恉b2inst@db1 ~銆慸b2 get db cfg for ddn show detail | grep -i log

1.7   鏁版嵁搴撳浠戒笌鎭㈠鎿嶄綔

1.澶囦唤鏂瑰紡

闆嗗洟涓氬姟鎺ュ叆骞冲彴涓氬姟绯荤粺宸茬粡涓婄嚎杩愯涓ゅ勾澶氾紝鏁版嵁閲12GB宸﹀彸锛屾暟鎹簱瀹瑰櫒鎬诲ぇ灏15GB锛屾暟鎹簱浣跨敤妗ｆ鏃ュ織璁板綍锛屽彲浠ヨ繘琛屽湪绾垮浠姐
鐩墠閲囩敤鍦ㄧ嚎鍏ㄩ噺澶囦唤鐨勬柟寮忔潵澶囦唤鏁翠釜鏁版嵁搴擄紝鍦ㄥ彂鐢熺伨闅炬ф晠闅滄椂锛屼娇鐢ㄥ浠芥枃浠跺拰鏃ュ織鏂囦欢鍙互杩涜鏃堕棿鐐规仮澶嶏紝灏嗘暟鎹簱鎭㈠鍒版晠闅滃彂鐢熺殑鍓嶄竴鍒汇

2.澶囦唤绛栫暐

鐩墠锛屾暟鎹簱姣忓ぉ鍑屾櫒涓ょ偣杩涜涓娆″叏閲忓浠斤紝澶囦唤鏂囦欢瀛樻斁鍦ㄦ湰鍦扮‖鐩橈紝淇濈暀鏈杩戜袱澶╃殑澶囦唤銆傚浠藉畬鎴愬悗锛屽皢澶囦唤鏂囦欢浼犻佸埌纾佸甫鏈猴紝淇濈暀鏈杩50澶╃殑澶囦唤銆傝繖鏍锋棦淇濊瘉鏁版嵁搴撳浠芥枃浠跺紓鍦板瓨鏀撅紝鍙堝疄鐜颁簡鍏呭垎鍐椾綑銆

3.澶囦唤鐨勫疄鐜

鏁版嵁搴撶殑瀹氭湡鑷姩澶囦唤鏄氳繃鎿嶄綔绯荤粺cron绋嬪簭瀹氭湡鎵ц澶囦唤鑴氭湰db2mbk-master鏉ュ疄鐜扮殑銆傝鑴氭湰鍖呮嫭濡備笅鍔熻兘锛

(1) 鍦ㄧ嚎鍏ㄥddn鏁版嵁搴撱
(2) 灏嗗浠芥枃浠秚ar鍒扮甯︿腑銆
(3) 鍒犻櫎涓ゅぉ浠ヤ笂鐨勬棫澶囦唤鏂囦欢銆
(4) 灏嗘瘡椤规搷浣滅殑鏃堕棿銆佺粨鏋滆褰曞埌澶囦唤鏃ュ織涓
(5) 鑷姩娓呯悊澶囦唤鏃ュ織銆

4.澶囦唤鐨勬鏌

妫鏌ユ暟鎹簱鐨勫浠芥儏鍐甸渶瑕佸湪鏈嶅姟鍣╠b1.db2.com涓婅繘琛岋紝鍖呮嫭浠ヤ笅鍐呭锛

(1) 妫鏌ュ浠芥枃浠舵槸鍚︾敓鎴

澶囦唤鏂囦欢瀛樻斁鍦 /home/db2inst/db2backup/backup 鐩綍涓嬶紝鏂囦欢鍚嶇О绫讳技DDN.0.db2inst.NODE0000.CATN0000.20091109164735.001锛屾甯告儏鍐典笅璇ョ洰褰曚笅搴旇鏈夋渶杩戜袱澶╃敓鎴愮殑涓や釜澶囦唤鏂囦欢銆

(2) 妫鏌ュ浠借繃绋嬫槸鍚︽甯

澶囦唤鏃ュ織瀛樻斁鍦 /home/db2inst/db2exec/log 鐩綍涓嬶紝鏃ュ織鏂囦欢鍚嶄负backup.log銆傛瘡澶╁浠借剼鏈墽琛岃繃绋嬩腑浼氬湪澶囦唤鏃ュ織涓褰曞浠芥暟鎹簱銆乼ar澶囦唤鏂囦欢鍒扮甯︺佸垹闄ゆ棫澶囦唤鏂囦欢绛夋搷浣滅殑璧锋鏃堕棿涓庣粨鏋滐紝鍙互閫氳繃杩欎簺璁板綍纭畾澶囦唤鏄惁姝ｅ父杩涜銆

(3) 妫鏌ユ湰鍦扮鐩樼┖闂

澶囦唤鐩綍浣嶄簬鏈湴纾佺洏鐨勬牴鍒嗗尯锛屽亣璁惧浠芥枃浠剁殑澶у皬涓簄 GB锛岄偅涔堣鍒嗗尯鐨勫墿浣欑┖闂存渶濂藉ぇ浜2n GB锛屾渶灏戜篃瑕佸ぇ浜巒+2 GB銆

(4) 妫鏌ュ浠芥枃浠舵槸鍚ar鍒扮甯
閫氳繃 tar -tvf /dev/st0 鍛戒护鏌ョ湅纾佸甫鐨勫唴瀹癸紝纭鏄剧ず缁撴灉涓湁鏈鏂扮殑澶囦唤鏂囦欢銆傚綋纾佸甫涓殑澶囦唤鏂囦欢杈冨鏃讹紝杩欎釜鎿嶄綔鍙兘鑺辫垂寰堥暱鏃堕棿銆
妫鏌ュ浠介厤缃枃浠舵儏鍐碉細
銆恉b2inst@db1 ~銆$ crontab -l
澶囦唤鏂囦欢瀛樻斁鐩綍锛
銆恉b2inst@db1 ~銆$ cd db2exec/bin
妫鏌ュ鐢ㄦ暟鎹簱鏈嶅姟鍣ㄦ暟鎹簱杩愯鏄惁姝ｅ父锛
 澶囩敤鏈嶅姟鍣細db2 connnect to db2
             Db2 list tables
             Db2 鈥渟elect count(*) from mb1_device鈥
鐢ㄩ泦缇ょ鐞嗗伐鍏峰皢鏁版嵁搴撴湇鍔″垏鎹㈠埌澶囩敤DB鏈嶅姟鍣細
Clusvcadm 鈥搑 <鏈嶅姟鍚>  -m <鎴愬憳鍚>
杩涜鏁版嵁搴撶殑RESTORE鎭㈠锛堝鏋滃嚭鐜癝QL0322N閿欒锛屽垯淇敼DB2CODEPAGE鍙傛暟锛岀劧鍚庨噸鏂版墽琛宺estore鍛戒护锛夛細
涓绘湇鍔″櫒db1:  db2 restore db ddn from /home/db2inst/ddnback taken at <澶囦唤鏂囦欢鏃堕棿鎴> to /mnt/data     渚嬪锛歞b2set db2codepage=819
杩涜鏁版嵁搴撶殑ROLLFORWARD鎭㈠锛
涓绘湇鍔″櫒db1:    db2  rollforward db ddn to end of logs and stop
娴嬭瘯鏁版嵁搴撶姸鎬侊細
涓绘湇鍔″櫒锛 db2 connect to db2
           鐒跺悗 db2 list tables
           鐒跺悗 db2鈥漵elect count(*) from mb1_device鈥
           鐒跺悗 db2set db2codepage=1386
1.8   妫鏌ュ綊妗ｆ棩蹇楃浉鍏虫搷浣

璇风‘淇濇椿鍔ㄦ棩蹇楃洰褰曚笅娌℃湁鐨勬棩蹇楁枃浠堕兘宸茬粡姝ｇ‘褰掓。鍒颁簡甯︽満涓(鏌ョ湅TSM鎴栫涓夋柟瀛樺偍绠＄悊杞欢)銆



褰掓。鏃ュ織閰嶇疆鏂囦欢鍙傛暟鍙婅鏄庯細

銆恉b2inst@db1 SQLOGDIR銆

su 鈥 db2inst

db2 connect to ddn

db2 get db cfg for ddn show detail | grep 鈥搃 log

LOGRETAIN             RECOVERY

USEREXIT               ON

LOGARCHMETH1    RECOVERY

濡傛灉userexit涓篛N锛屼絾鏄疞OGARCHMETH1鐩稿悓锛屾煡鐪嬬洰褰曞拰閾炬帴 /home/db2inst/db2exec/bindb2mbk-master



濡傛灉LOGARCHMETH1涓篋ISK:/archlog锛屽垯DB2浼氳嚜鍔ㄥ皢褰掓。鏃ュ織褰掓。鍒扮洰褰/archlog涓

db2 鈥渦pdate db cfg for ddn using logarchmeth1 DISK:/archlog鈥



濡傛灉闇瑕佹洿鏀瑰弬鏁帮紝鎵ц鏇存柊鍛戒护锛

db2 update db cfg for ddn using 鍙傛暟鍚     鍙傛暟鍊

濡傛灉鏇存敼鍙傛暟鐢熸晥锛岄渶瑕侀噸鏂板惎鍔―B2杩炴帴

db2 force application all

db2 list applications



濡傛灉搴旂敤鏃犳硶鍋滄锛岄噸鏂板惎鍔―B2

db2 force application all

db2stop

db2start

1.9   鎵╁琛ㄧ┖闂

DB2鐜版湁琛ㄧ┖闂存墿瀹规柟娉
db2 list tablespaces show detail

1锛夌洿鎺ユ坊鍔犱竴涓鍣ㄧ殑渚嬪瓙锛
db2 " ALTER TABLESPACE PAYROLL ADD (DEVICE '/dev/rhdisk9' 10000) "
鍔犲鍣ㄤ箣鍚嶥B2浼氭湁涓涓嚜鍔╞alance鐨勮繃绋,鍙兘浼氭寔缁嚑涓皬鏃!!!
2锛夋敼鍙樼幇鏈夊鍣ㄧ殑澶у皬(璇ユ柟娉曚笉浼氳Е鍙慴alance,浣嗗鏋滆〃绌洪棿寤虹珛鍦ㄨ８璁惧涓,鍒欒鎵╁啿瑁歌澶囩┖闂):
db2 " ALTER TABLESPACE TS1 RESIZE (FILE '/conts/cont0' 2000, DEVICE '/dev/rcont1' 2000, FILE 'cont2' 2000) "
娉ㄦ剰杩欑鏂瑰紡灏辨槸灏嗗師鏈夌殑鐩稿簲瀹瑰櫒閮芥敼鎴愬ぇ灏忔槸2000椤
db2 "ALTER TABLESPACE TS1 RESIZE (ALL 2000)"
杩欑鏂瑰紡灏辨槸鎶婅〃绌洪棿涓墍鏈夌殑瀹瑰櫒澶у皬閮芥敼鎴2000椤
db2 " ALTER TABLESPACE TS1 EXTEND (FILE '/conts/cont0' 1000, DEVICE '/dev/rcont1' 1000, FILE 'cont2' 1000) "
杩欑鏂瑰紡灏辨槸灏嗙浉搴旂殑瀹瑰櫒閮芥墿澶1000椤碉紝涔熷氨鏄鍔1000椤点
db2 " ALTER TABLESPACE DATA_TS EXTEND (ALL 1000)"
杩欑鏂瑰紡灏辨槸灏嗘墍鏈夌殑瀹瑰櫒閮藉鍔1000椤点
db2 " ALTER TABLESPACE USERSPACE1 EXTEND (ALL 100)"
DB2鏃ュ父缁存姢鏈堟搷浣
1銆        鏃ュ織娓呯悊鐩稿叧鎿嶄綔

妫鏌ョ涓娲诲姩鏃ュ織锛
[db2inst@db1 SQLOGDIR]$db2 get db cfg | grep 鈥淔irst active鈥
    娓呯悊鏃ュ織鏂囦欢鏃跺彧鑳芥竻鐞嗙涓娲诲姩鏃ュ織涔嬪墠鐨勬棩蹇楋紱
璇疯嚦灏戞瘡鏈堟煡鐪嬩竴娆b2diag.log鏂囦欢锛岀湅鍏朵腑鏄惁鏈夊紓甯搞

鐩稿叧鏃ュ織娓呯悊鎿嶄綔

鏃犺閲囩敤鍝鎺柦锛岄兘瑕佸厛纭畾鐩墠鐨勬椿鍔ㄦ棩蹇椼備娇鐢╠b2inst鐢ㄦ埛鎵ц浠ヤ笅鎿嶄綔锛

(1) 杩炴帴鏁版嵁搴擄細db2 connect to ddn
(2) 鏌ョ湅鏃ュ織鏂囦欢鐩綍锛歞b2 get db cfg | grep "Path"
(3) 鏌ョ湅绗竴娲诲姩鏃ュ織锛歞b2 get db cfg | grep "First active"

娉ㄦ剰锛氱涓娲诲姩鏃ュ織鍙婂叾浠ュ悗鐨勬棩蹇楋紙搴忓彿鏇撮珮鐨勶級涓烘暟鎹簱鐨勬椿鍔ㄦ棩蹇楋紝涓嶈兘杩涜绉诲姩銆佸帇缂┿佸垹闄ょ瓑鎿嶄綔锛屽惁鍒欏皢閫犳垚鏁版嵁搴撴晠闅溿

    鐒跺悗锛岃鏍规嵁鏁版嵁搴撴棩蹇楁枃浠朵繚鐣欐椂闂寸殑鐩稿叧瑙勫畾纭畾瑕佽繘琛屽鐞嗙殑鏃ュ織鏂囦欢鑼冨洿銆傚缓璁嚦灏戜繚鐣60澶╀互鍐呯殑鏃ュ織鏂囦欢锛屽苟涓斾笉瑕佽繘琛屽帇缂╂搷浣滐紝浠ュ厤鎹熷潖鏃ュ織鏂囦欢銆


    涓嬮潰浠嬬粛瀵规棩蹇楁枃浠惰繘琛屽帇缂╁拰鍒犻櫎鐨勬柟娉曘傛墽琛屾搷浣滃墠璇峰厛鐢ㄥ涓嬪懡浠ょ‘璁ゆ搷浣滅殑鏃ュ織鏂囦欢锛

    find -name '*.LOG' ! -newer | more

    鍏朵腑锛-newer 鎸囧畾find鍛戒护鏌ユ壘鏈鍚庝慨鏀规椂闂存瘮鏌愪釜鏃ュ織鏂囦欢鏂扮殑鎵鏈夋棩蹇楁枃浠讹紝鑰屽湪鍓嶉潰鍔犱笂 ! 鍙栧弽锛屽垯杩斿洖姣旇鏃ュ織鏂囦欢鏃х殑鎵鏈夋棩蹇楁枃浠跺強鍏舵湰韬
    鍙互浣跨敤濡備笅鍛戒护纭畾绗﹀悎鏉′欢鐨勬棩蹇楁枃浠剁殑鏁伴噺锛

    find -name '*.LOG' ! -newer | wc -l


    濡傛灉鑰冭檻鍘嬬缉闄堟棫鐨勬棩蹇楁枃浠讹紝鍙弬鑰冨涓嬫柟娉曪細

  a.鐩存帴鍘嬬缉鏃ュ織鏂囦欢

    鍦ㄦ棩蹇楁枃浠剁洰褰曚笅鎵ц鍛戒护锛歠ind -name '*.LOG' ! -newer -exec gzip {} \;

  b.灏嗘棩蹇楁枃浠舵墦鍖呭悗鍘嬬缉锛氱洰鍓嶅瓨鍦/mnt/data/db2logbak/

    鍦ㄦ棩蹇楁枃浠剁洰褰曚笅鎵ц鍛戒护锛歠ind -name '*.LOG' ! -newer | xargs tar -zcvf log_bak_20100402_1.tar.gz
    鐒跺悗锛屽啀灏嗚繖浜涙棩蹇楁枃浠跺垹闄わ紝鏂规硶绋嶅悗璇存槑銆


    濡傛灉鑰冭檻鍒犻櫎闄堟棫鐨勬棩蹇楁枃浠讹紝鍙弬鑰冨涓嬫柟娉曪細

  a.浣跨敤鎿嶄綔绯荤粺鍛戒护鐩存帴鍒犻櫎

    鍦ㄦ棩蹇楁枃浠剁洰褰曚笅鎵ц鍛戒护锛歠ind -name '*.LOG' ! -newer -exec rm {} \;

  b.浣跨敤鏁版嵁搴撳懡浠よ繘琛屾竻闄

    鎵ц鍛戒护锛歞b2 prune logfile prior to S0003270.LOG
    璇ュ懡浠や細娓呴櫎S0003270.LOG涔嬪墠鎵鏈夌殑鍦ㄧ嚎妗ｆ鏃ュ織鏂囦欢锛堜笉鍖呮嫭S0003270.LOG鏈韩锛夈


2銆        妫鏌ュ浠藉拰鏃ュ織鏄惁閮戒繚瀛樺ソ浜

閫氳繃 tar -tvf /dev/st0 鍛戒护鏌ョ湅纾佸甫鐨勫唴瀹癸紝纭鏄剧ず缁撴灉涓湁鏈鏂扮殑澶囦唤鏂囦欢銆傚綋纾佸甫涓殑澶囦唤鏂囦欢杈冨鏃讹紝杩欎釜鎿嶄綔鍙兘鑺辫垂寰堥暱鏃堕棿銆

DB2鏃ュ父缁存姢瀛ｅ害鎿嶄綔
1銆        閫氳繃蹇収鐩戞帶鍣紝鏌ョ湅绯荤粺鎬ц兘濡備綍

閫氳繃蹇収鐩戞帶鍣紝鎶撳彇鏁版嵁搴撶殑淇℃伅锛屽垎鏋愭暟鎹簱鎬ц兘鏄惁鍚堢悊锛

# db2 get snapshot for all on 鏁版嵁搴撳悕 > log.txt

2銆        鏁版嵁搴撹ˉ涓佺骇鍒

# db2level

娉ㄦ剰浜嬮」
1銆        涓嶈鍒犻櫎娲诲姩鏃ュ織鏂囦欢0

DB2 鐨勬椿鍔ㄦ棩蹇楁枃浠朵笉鑳借鍒犻櫎銆備竴鏃 DB2 鐨勬椿鍔ㄦ棩蹇楁枃浠惰鍒犻櫎锛屾垨鑰呮墍鍦ㄧ殑瀛樺偍璁惧鍑虹幇闂锛屽垯涓嶅彲閬垮厤鍦伴犳垚 DB2 鏁版嵁搴撶郴缁熷畷鏈恒

2銆        娉ㄦ剰浜ゆ槗鏃ュ織瀛樺偍绌洪棿

鍦ㄥ綊妗ｆ棩蹇楁ā寮忎笅锛屽鏋滄病鏈変娇鐢ㄨ嚜鍔ㄥ綊妗ｆ柟寮忥紝鍒欏瓨鍌ㄧ殑鏃ュ織鏂囦欢浼氫笉鏂澶氾紝鏈夊彲鑳介犳垚鏃ュ織鎵鍦ㄧ殑鏂囦欢绯荤粺绌洪棿婊° 褰撹繖绉嶆儏鍐靛彂鐢熸椂锛屼細鏍规嵁鍙傛暟 BLK_LOG_DSK_FUL 鐨勯厤缃屾湁涓嶅悓鐨勭幇璞★細

1锛夊鏋滆鍙傛暟鍚敤锛屽垯 DB2 鏁版嵁搴撳彲缁х画璇绘搷浣滐紝浣嗘槸鍐欐搷浣滀細鎸傝捣

2锛夊鏋滆鍙傛暟娌℃湁鍚敤锛屽垯 DB2 鏁版嵁搴撲細鍋滄宸ヤ綔



涓ょ鎯呭喌涓嬶紝閮介渶瑕佸埌鏃ュ織鎵鍦ㄧ殑鏂囦欢绯荤粺娣诲姞浜嗙┖闂存墠鎭㈠姝ｅ父銆



3銆        鎸夌収绯荤粺鐨勫疄闄呭伐浣滈噺閰嶇疆鏃ュ織绌洪棿

DB2鏁版嵁搴撻氳繃鏃ュ織鏂囦欢缁存姢鏁版嵁鐨勫畬鏁存у拰涓鑷存с侱B2 鏁版嵁搴撶殑鏃ュ織绌洪棿鍙氳繃濡備笅鍏紡璁＄畻锛
鏃ュ織绌洪棿 = 锛堜富鏃ュ織鏂囦欢 + 浜岀骇鏃ュ織鏂囦欢锛 * 鏃ュ織鏂囦欢灏哄

鍏朵腑锛
1锛 涓绘棩蹇楁枃浠剁敱鍙傛暟 LOGPRIMARY 鎺у埗锛
2锛 浜岀骇鏃ュ織鏂囦欢鐢卞弬鏁 LOGSECOND 鎺у埗
3锛 鏃ュ織鏂囦欢灏哄鐢卞弬鏁 LOGFILSIZ 鎺у埗
4锛 LOGPRIMARY + LOGSECOND < 256 锛堜笉鍚岀殑 DB2 鐗堟湰鐣ユ湁涓嶅悓锛岃鍙傜湅鐩稿悓鐗堟湰鐨 DB2 鎵嬪唽纭锛
4銆        妫鏌ヨ鍙瘉锛圠icense锛夊畨瑁呮儏鍐

璁稿彲璇佽繃鏈熶細閫犳垚涓嶅繀瑕佺殑鏈嶅姟涓柇锛屾墍浠ュ湪 DB2 瀹夎瀹屾瘯鍚庯紝寤鸿妫瀵熻鍙殑瀹夎鎯呭喌
5銆        鍒涘缓鏁版嵁搴撳墠璋冩暣濂界郴缁熸椂闂

鍦ㄦ暟鎹簱鍒涘缓濂戒箣鍚庯紝璋冩暣绯荤粺鏃堕棿浼氶犳垚鏁版嵁搴撳唴閮ㄦ椂闂存埑鐨勫紓甯搞傛暟鎹簱涓竴浜涘璞″拰鏃堕棿鐩稿叧锛屼竴鏃︽椂闂翠笉鍑嗙‘瑕佽皟鏁撮渶瑕佸緢灏忓績銆傞敊璇殑鏃堕棿璋冩暣鍙兘浼氶犳垚寰堝闂锛屽锛
1锛夋煇浜涘璞″け鏁堬紝渚嬪 锛
SQL0440N锛屾壘涓嶅埌鍏锋湁鍏煎鑷彉閲忕殑绫诲瀷涓 鈥<渚嬬▼绫诲瀷>鈥 鐨勫悕涓  鈥<渚嬬▼鍚>鈥 鐨勫凡鎺堟潈渚嬬▼
2锛夋暟鎹簱鏃ュ織閫昏緫閿欒 -> 瀹曟満
3锛夊父瑙侀敊璇 鈥 鍙皟鏁存椂闂达紝鏈皟鏁存椂鍖
6銆        涓嶈闅忎究鎵ц chown (chmod) 鈥揜 锛圲NIX/Linux锛

鍦ㄥ疄渚嬬洰褰曚笅chown (chmod) -R 浼氶犳垚

1锛  鍦ㄦ暟鎹簱鏈嶅姟鍣ㄤ笂 db2 connect to 鑳借繛鎺ヤ笂鏁版嵁搴

2锛  db2 connect to user ... using ...杩炴帴涓嶄笂

闄勶細甯哥敤琛ㄧ┖闂存墿瀹规柟娉
DB2鐜版湁琛ㄧ┖闂存墿瀹规柟娉
db2 list tablespaces show detail

1锛夌洿鎺ユ坊鍔犱竴涓鍣ㄧ殑渚嬪瓙锛
db2 " ALTER TABLESPACE PAYROLL ADD (DEVICE '/dev/rhdisk9' 10000) "
鍔犲鍣ㄤ箣鍚嶥B2浼氭湁涓涓嚜鍔╞alance鐨勮繃绋,鍙兘浼氭寔缁嚑涓皬鏃!!!
2锛夋敼鍙樼幇鏈夊鍣ㄧ殑澶у皬(璇ユ柟娉曚笉浼氳Е鍙慴alance,浣嗗鏋滆〃绌洪棿寤虹珛鍦ㄨ８璁惧涓,鍒欒鎵╁啿瑁歌澶囩┖闂):
db2 " ALTER TABLESPACE TS1 RESIZE (FILE '/conts/cont0' 2000, DEVICE '/dev/rcont1' 2000, FILE 'cont2' 2000) "
娉ㄦ剰杩欑鏂瑰紡灏辨槸灏嗗師鏈夌殑鐩稿簲瀹瑰櫒閮芥敼鎴愬ぇ灏忔槸2000椤
db2 "ALTER TABLESPACE TS1 RESIZE (ALL 2000)"
杩欑鏂瑰紡灏辨槸鎶婅〃绌洪棿涓墍鏈夌殑瀹瑰櫒澶у皬閮芥敼鎴2000椤
db2 " ALTER TABLESPACE TS1 EXTEND (FILE '/conts/cont0' 1000, DEVICE '/dev/rcont1' 1000, FILE 'cont2' 1000) "
杩欑鏂瑰紡灏辨槸灏嗙浉搴旂殑瀹瑰櫒閮芥墿澶1000椤碉紝涔熷氨鏄鍔1000椤点
db2 " ALTER TABLESPACE DATA_TS EXTEND (ALL 1000)"
杩欑鏂瑰紡灏辨槸灏嗘墍鏈夌殑瀹瑰櫒閮藉鍔1000椤点
db2 " ALTER TABLESPACE USERSPACE1 EXTEND (ALL 100)"
闄勶細褰掓。鏃ュ織鐩稿叧鐭ヨ瘑
db2鏃ュ織淇濆瓨鐨勪袱绉嶆柟寮忥細寰幆鏃ュ織鍜屽綊妗ｆ棩蹇
寰幆鏃ュ織锛
鍦ㄤ换浣曟儏鍐典笅閮戒笉鑳藉垹闄ゅ惊鐜棩蹇楋紝濡傛灉鍒犻櫎鏁版嵁搴撳氨浼氬嚭閿欍
濡傛灉鍑洪敊浜嗭紝鍙兘鐢ㄥ浠藉仛鎭㈠锛屽鏋滄病鏈夊仛澶囦唤锛岄偅涔堝彧鏈夋壘IBM瀹樻柟鏉ュ府鍋氫竴涓繛鎺
鐒跺悗浣爀xport鍑烘暟鎹紝鐒跺悗鍐嶉噸寤烘暟鎹簱銆傛嵁璇磋繖涓繕鏄鍦ㄤ綘涔颁簡PPA鐨勬儏鍐典笅鎵嶆彁渚
鐨勬湇鍔″唴瀹广
褰掓。鏃ュ織锛
褰掓。鏃ュ織涓殑娲诲姩鏃ュ織閮ㄤ唤鏄笉鑳藉垹闄ょ殑锛屽鏋滃垹闄ょ粨鏋滃悓寰幆鏃ュ織琚垹闄ょ殑鎯呭喌銆
褰掓。鏃ュ織涓殑宸插綊妗ｆ棩蹇楁槸鍙互鍒犻櫎鐨勶紝浣嗗垹闄や簡浠ュ悗浣犲彲鑳藉氨娌℃硶鍋氫竴浜涘墠婊氭搷浣滀簡銆傛暟鎹簱澶囦唤鐨勬仮澶嶆秹鍙婂浠芥枃浠跺拰鏃ュ織
褰掓。鏃ュ織鐩稿叧鐭ヨ瘑锛
灏哃OGRETAIN璁剧疆涓篛N鍚庯紝鏁版嵁搴撳皢鏀寔鍓嶆粴鎭㈠銆傛鏃讹紝绯荤粺涓皢浼氬瓨鍦ㄤ笁绉嶇被鍨嬬殑鏃ュ織鏂囦欢:
娲诲姩鏃ュ織:璇ユ棩蹇楀寘鍚皻鏈彁浜ゆ垨鍥炴粴鐨勪簨鍔″崟鍏冪殑鐩稿叧淇℃伅锛屼互鍙婂凡鎻愪氦浣嗗皻鏈啓鍏ユ暟鎹簱鏂囦欢鐨勪簨鍔＄殑淇℃伅銆
鑱旀満瀛樻。鏃ュ織:娲诲姩鏃ュ織涓墍鏈夋敼鍔ㄥ姝ｅ父澶勭悊宸蹭笉闇瑕侊紝鍗宠鏃ュ織涓墍璁板綍鐨勪簨鍔￠兘宸叉彁浜ゅ苟鍐欏叆鏁版嵁搴撴枃浠舵椂锛岃娲诲姩鏃ュ織杞崲涓鸿仈鏈哄瓨妗ｆ棩蹇椼傜О涔嬩负鑱旀満锛屾槸鐢变簬瀹冧滑涓庢椿鍔ㄦ棩蹇楀瓨鏀惧湪鍚屼竴涓洰褰曚笅銆
鑴辨満瀛樻。鏃ュ織:灏嗚仈鏈哄瓨妗ｆ棩蹇椾粠娲诲姩鏃ュ織鐩綍涓婥opy鍒板彟澶栫殑鍦版柟瀛樻。锛屽氨绉颁负鑴辨満瀛樻。鏃ュ織銆傝繖浜涙棩蹇楀彲鑳藉湪鏁版嵁搴撳墠婊氭仮澶嶇殑鏃跺欎粛鐒堕渶瑕併
绠＄悊鏁版嵁搴撴棩蹇楃殑宸ヤ綔鍙互鎵嬪伐瀹屾垚(鍗冲皢鑱旀満瀛樻。鏃ュ織鎵嬪伐鎷疯礉鍒版煇涓猘rchive鐩綍)锛屼篃鍙敱缂栧啓USEREXIT绋嬪簭鑷姩缁存姢銆
鐢变簬DB2瀵规墍鏈夊钩鍙伴兘鎻愪緵浜嗙浉搴旂殑USEREXIT绀轰緥绋嬪簭锛岃屼笖闈炲父鏄撲簬淇敼鍜屼娇鐢紝鎵浠BM寤鸿鐢ㄦ埛浣跨敤USEREXIT绋嬪簭鏉ョ鐞嗘棩蹇楁枃浠躲
浣跨敤USEREXIT绋嬪簭鐨勬柟娉
瑕佷娇鐢║ser exit program鑷姩鍖杔og鏂囦欢鐨刟rchiving鍜宺etrieval杩囩▼:
1.  璁剧疆database cfg鍙傛暟logarchmeth1 涓篣SEREXIT銆
connect to ddn
update db cfg using logarchmeth1 USEREXIT
闅忓悗鎿嶄綔鍙弬鑰>>1.8 妫鏌ュ綊妗ｆ棩蹇楃浉鍏虫搷浣


闄勶細浣跨敤 CLP 鎹曡幏鏁版嵁搴撹繍琛岀姸鍐靛揩鐓
鍙粠 CLP 浣跨敤 GET HEALTH SNAPSHOT 鍛戒护鏉ユ崟鑾疯繍琛岀姸鍐靛揩鐓с傝鍛戒护璇硶鏀寔妫绱㈣繍琛岀姸鍐电洃瑙嗗櫒鐩戣鐨勪笉鍚屽璞＄被鍨嬬殑杩愯鐘跺喌蹇収淇℃伅銆
鍏堝喅鏉′欢
蹇呴』鍏锋湁瀹炰緥杩炴帴鎵嶈兘鎹曡幏杩愯鐘跺喌蹇収銆傚鏋滄病鏈夊疄渚嬭繛鎺ワ紝鍒欏垱寤虹己鐪佸疄渚嬭繛鎺ャ傝鑾峰彇杩滅▼瀹炰緥鐨勫揩鐓э紝蹇呴』鍏堣繛鎺ヨ嚦璇ュ疄渚嬨
杩囩▼
瑕佷娇鐢 CLP 鎹曡幏鏁版嵁搴撹繍琛岀姸鍐靛揩鐓
浠 CLP 鍙戝嚭甯︽湁鏈熸湜鍙傛暟鐨 GET HEALTH SNAPSHOT 鍛戒护銆
鍦ㄤ互涓嬬ず渚嬩腑锛屽皢鍦ㄥ惎鍔ㄦ暟鎹簱绠＄悊鍣ㄤ箣鍚庣珛鍗虫崟鑾锋暟鎹簱绠＄悊鍣ㄧ骇鍒繍琛岀姸鍐靛揩鐓с
db2 get health snapshot for dbm

瀵逛簬鍒嗗尯鏁版嵁搴撶郴缁燂紝鍙负鐗瑰畾鍒嗗尯鎹曡幏涓撻棬鐨勬暟鎹簱蹇収锛屾垨鑰呬负鎵鏈夊垎鍖烘崟鑾峰叏灞鐨勬暟鎹簱蹇収銆傝瀵圭壒瀹氬垎鍖猴紙濡傚垎鍖哄彿 2锛変笂鐨勬暟鎹簱鎹曡幏杩愯鐘跺喌蹇収锛岃鍙戝嚭浠ヤ笅鍛戒护锛
db2 get health snapshot for db on sample at dbpartitionnum 2
瑕佸鎵鏈夊垎鍖轰笂鐨勬墍鏈夊簲鐢ㄧ▼搴忔崟鑾锋暟鎹簱蹇収锛岃鍙戝嚭浠ヤ笅鍛戒护锛
db2 get health snapshot for db on sample global
浠ヤ笅鍛戒护鎹曡幏鐨勮繍琛岀姸鍐靛揩鐓у甫鏈夐檮鍔犺缁嗕俊鎭紝鍖呮嫭鍏紡銆侀檮鍔犱俊鎭拰杩愯鐘跺喌鎸囩ず鍣ㄥ巻鍙茶褰曪細
db2 get health snapshot for db on sample show detail

瀵逛簬鍩轰簬闆嗗悎鐘舵佺殑杩愯鐘跺喌鎸囩ず鍣紝鍙鎵鏈夐泦鍚堝璞℃崟鑾锋暟鎹簱蹇収锛岃屼笉鑰冭檻杩欎簺瀵硅薄鐨勭姸鎬併傚父瑙 GET HEALTH SNAPSHOT FOR DB 鍛戒护杩斿洖鎵鏈夐泦鍚堝璞★紝杩欎簺瀵硅薄闇瑕侀拡瀵规墍鏈夊熀浜庨泦鍚堢姸鎬佺殑杩愯鐘跺喌鎸囩ず鍣ㄧ殑璀︽姤銆
瑕佸鍒楃ず浜嗘墍鏈夐泦鍚堝璞＄殑鏁版嵁搴撴崟鑾疯繍琛岀姸鍐靛揩鐓э紝璇峰彂鍑轰互涓嬪懡浠わ細
db2 get health snapshot for db on sample with full collection

鏌ョ湅绔彛netstat -aon|findstr "111"
tasklist|findstr "111"

du -m * 鏌ョ湅褰撳墠鐩綍鏂囦欢澶у皬mb
find . -size 10000k 鏌ユ壘褰撳墠鐩綍澶т簬10mb鐨
鏂板涓婚敭
alter table trade_flow_info add constraint  PK_FXJK PRIMARY KEY (TRADE_ON_UUID);
 alter table table_name drop primary key (col)

鍒涘缓db2 瀹炰緥鍜屽垱寤哄簱鐨勬柟娉曞ぇ鑷村垎涓轰袱绫伙紒涓绫绘槸鍥惧舰鐣岄潰db2setup 鍒涘缓涓绉嶆槸CLI鍒涘缓锛佹澶勫彧鎻忚堪涓涓婥LI鏂瑰紡鑷充簬鍥惧舰鐣岄潰璇峰ぇ瀹舵悳绱竴涓嬪惂锛
db2 鍒涘缓瀹炰緥 鍒涘缓鏁版嵁搴
1.鍒涘缓瀹炰緥鐢ㄦ埛
mkdir /db2/db2test 鍒涘缓瀹炰緥鐢ㄦ埛鐩綍
smitty user
閫夋嫨Add a User
* User NAME                                          [db2test]
User ID                                                   []
ADMINISTRATIVE USER?                       false
Primary GROUP                                     [db2iadm1]
Group SET                                           [staff]
ADMINISTRATIVE GROUPS                   []
ROLES                                                         []
Another user can SU TO USER?            true
SU GROUPS                                          [ALL]
HOME directory                                     [/db2/db2test]
Initial PROGRAM                                    [/usr/bin/ksh]

2.鍒涘缓瀹炰緥 DB2_install=/usr/opt/db2_08_01/instance
./db2icrt -u db2test db2test

3.鍒涘缓鏁版嵁搴
su - db2test
db2start     #姝ゅ涓嶆墽琛屽惎鍔ㄥ疄渚嬪皢鎶:SQL1032N No start database manager command was issued. SQLSTATE=57019
db2 create db db2test

4.鍒犻櫎鏁版嵁搴
db2 drop db db2test
db2stop

5.鍒犻櫎瀹炰緥
cd DB2_install
./db2idrop -f db2test # -f鍙傛暟涓瀹氳娣诲姞鍚﹀垯鍒犻櫎瀹屼簡浼氭姤閿欙紒

6.鍒犻櫎鐢ㄦ埛
smitty user
閫夋嫨Remove a User
* User NAME                                          [db2test]                                                           +
Remove AUTHENTICATION information?                  yes
鍒犻櫎鐢ㄦ埛鐩綍
rm -rf db2test


df -B 1g
1銆佹煡鐪嬫暟鎹簱椤靛ぇ灏
db2 get db cfg
2銆佹敹闆嗚〃鐘舵佷俊鎭
db2 runstats on table schema.table_name
3銆佹煡璇㈡暟鎹〃鍗犵敤椤电殑鏁伴噺
select tabname, npages from syscat.tables where tabname = 'table_name'
4銆佽绠楄〃鍗犵敤纾佺洏绌洪棿澶у皬
琛ㄥ崰鐢ㄧ鐩樼┖闂村ぇ灏 = 鏁版嵁椤靛ぇ灏 * 椤垫暟閲
鏌ョ湅琛ㄥ崰纾佺洏绌洪棿澶у皬锛歴elect tabname, npages*32768/(1024*1024) from syscat.tables where tabname = 'XXXXXX'

db2 v9浠ヤ笂鏌ョ湅琛ㄥ崰纾佺洏閫昏緫绌洪棿澶у皬锛歴elect sum(x.DATA_OBJECT_P_SIZE+x.INDEX_OBJECT_P_SIZE+x.LOB_OBJECT_P_SIZE+x.LONG_OBJECT_P_SIZE+x.XML_OBJECT_P_SIZE) from SYSIBMADM.ADMINTABINFO x where TABNAME='XXXXXXX';
select TABNAME,sum(x.DATA_OBJECT_P_SIZE+x.INDEX_OBJECT_P_SIZE+x.LOB_OBJECT_P_SIZE+x.LONG_OBJECT_P_SIZE+x.XML_OBJECT_P_SIZE) from SYSIBMADM.ADMINTABINFO x group by TABNAME;
db2 v9浠ヤ笂鏌ョ湅鏁版嵁搴撳崰鐢ㄧ┖闂村ぇ灏忥細db2 "call SYSPROC.GET_DBSIZE_INFO(?,?,?,10)"


-- db2 delete 澶ц〃涓嶅啓鏃ュ織鎿嶄綔
1.update command options using c off  -- //鍏抽棴鑷姩鎻愪氦
2.alter table fxjkusr.run_rule_info  activate not logged initially //璁剧疆涓嶈鏃ュ織
3.delete from MARPT.RPT_DIM_U_ORG_INX_M_CURR_CUS_PRO_TBK -- 鍒犻櫎鏁版嵁
4.commit//鎵嬪姩鎻愪氦
5.update command options using c on//鎵撳紑鑷姩鎻愪氦

銆佹煡鐪嬫暟鎹簱椤靛ぇ灏
db2 get db cfg
2銆佹敹闆嗚〃鐘舵佷俊鎭
db2 runstats on table schema.table_name
3銆佹煡璇㈡暟鎹〃鍗犵敤椤电殑鏁伴噺
select tabname, npages from syscat.tables where tabname = 'table_name'
4銆佽绠楄〃鍗犵敤纾佺洏绌洪棿澶у皬
琛ㄥ崰鐢ㄧ鐩樼┖闂村ぇ灏 = 鏁版嵁椤靛ぇ灏 * 椤垫暟閲
鏌ョ湅琛ㄥ崰纾佺洏绌洪棿澶у皬锛歴elect tabname, npages*16384/(1024*1024) from syscat.tables where tabname = 'XXXXXX'

db2 v9浠ヤ笂鏌ョ湅琛ㄥ崰纾佺洏閫昏緫绌洪棿澶у皬锛歴elect sum(x.DATA_OBJECT_P_SIZE+x.INDEX_OBJECT_P_SIZE+x.LOB_OBJECT_P_SIZE+x.LONG_OBJECT_P_SIZE+x.XML_OBJECT_P_SIZE) from SYSIBMADM.ADMINTABINFO x where TABNAME='XXXXXXX';
select TABNAME,sum(x.DATA_OBJECT_P_SIZE+x.INDEX_OBJECT_P_SIZE+x.LOB_OBJECT_P_SIZE+x.LONG_OBJECT_P_SIZE+x.XML_OBJECT_P_SIZE) from SYSIBMADM.ADMINTABINFO x group by TABNAME;
db2 v9浠ヤ笂鏌ョ湅鏁版嵁搴撳崰鐢ㄧ┖闂村ぇ灏忥細db2 "call SYSPROC.GET_DBSIZE_INFO(?,?,?,10)"
鏌ョ湅姝婚攣
db2 get snapshot for locks on fxjkdb
鏉鎺夋閿佽繘绋
db2 force application (杩涚▼hander)
瀵煎嚭鏌愬紶琛ㄧ殑鏁版嵁
db2 "export to pub_bizinfo.ixf of ixf select * from pub_bizinfo"
瀵煎叆鏌愬紶琛ㄧ殑鏁版嵁
琛ㄥ瓨鍦
db2 "import from pub_bizinfo.ixf of ixf insert into pub_bizinfo"
涓嶇敓鎴愭棩蹇
db2 "load from pub_bizinfo.ixf of ixf insert into pub_bizinfo"
琛ㄤ笉瀛樺湪
db2 "import from pub_bizinfo.ixf of ixf create into pub_bizinfo"
0 6 * * * $HOME/for_crontab/createTomorrowTables >> $HOME/for_crontab/mylog.log 2>&1
0 6 * * * /root/zwk/test.sh >> /root/zwk/operate_`date +"\%Y\%m\%d"`.log 2>&1
backup
db2 connect to rams
db2 quiesce db immediate
db2 terminate
db2 deactivate db fxjkdb
db2 force application all
db2 backup db fxjkdb to /home/fxjkusr/test/test

select TABNAME,SUM(CARD) OVER(PARTITION BY TABNAME) from syscat.tables where tabschema='FXJKUSR';

select TABNAME,sum(card) from syscat.tables where tabschema='FXJKUSR'group by TABNAME
鍦╨inux涓嬶紝涓嶅彲閬垮厤鐨勪細鐢╒IM鎵撳紑涓浜泈indows涓嬬紪杈戣繃鐨勬枃鏈枃浠躲傛垜浠細鍙戠幇鏂囦欢鐨勬瘡琛岀粨灏鹃兘浼氭湁涓涓猑M绗﹀彿锛岃繖鏄洜涓 DOS涓嬬殑缂栬緫鍣ㄥ拰Linux缂栬緫鍣ㄥ鏂囦欢琛屾湯鐨勫洖杞︾澶勭悊涓嶄竴鑷达紝

娓呯悊鏃ュ織鑴氭湰
46 15 * * *  find /home/rams/domains/log/* -mtime +7 |xargs rm -rf  >/dev/null 2>&1
12 19 * * *  >/home/rams/domains/rams_domain/bin/start_rams_s1.log  >/dev/null 2>&1

CMD="db2 -t "
count=`${CMD} <<EOF | grep 'labstr' | awk '{print $1}'
connect to srcdb;
select count(*), 'labstr' from tbl1 where NAME='灏忔槑';
EOF`
echo $count\
鍒楀嚭瀹氭椂浠诲姟
crontab -l

瀵逛簬鍥炶溅绗︾殑瀹氫箟锛
windows锛   0D0A
unixlinux:     0A
MAC: 0D

姣旇緝蹇嵎鐨勫幓闄よ繖浜涚鍙风殑鏂规硶鏈夎繖涔堝嚑绉嶏細

锛1锛夋槸鐢╒I鐨勫懡浠わ細
    浣跨敤vi鎵撳紑鏂囨湰鏂囦欢
    vi dos.txt
    鍛戒护妯″紡涓嬭緭鍏
    :set fileformat=unix
    :w

(2) VI涓嬩娇鐢ㄦ鍒欒〃杈惧紡鏇挎崲
   g/^M/s/^M//
    鎴栬
   %s/^M//g
   ctrl + v 鐒跺悗 ctrl + m

锛3锛変娇鐢╯ed 宸ュ叿
    sed 鈥檚/^M//鈥 filename > tmp_filename

锛4锛夋棦鐒秝indow涓嬬殑鍥炶溅绗﹀浜嗏 鈥欙紝閭ｄ箞褰撶劧閫氳繃鍒犻櫎鈥 鈥 锛屼篃鍙互瀹炵幇锛
    tr -d " "

锛5锛夋渶鍚庝竴涓柟娉曟槸鏈汉鏈甯哥敤鐨勬柟娉曪紝涓汉瑙夊緱鏈鏂逛究
    鍦ㄧ粓绔笅鏁插懡浠わ細
    $ dos2unix filename
    鐩存帴杞崲鎴恥nix鏍煎紡锛屽氨OK浜嗭紒锝



java -Xms128m -Xmx256m -jar /home/.jar
alter table FX_PRIVATE_CUST alter ID_TYPE set data type varchar(20)

DB2鍒犻櫎閲嶅璁板綍寰楁柟娉曞拰鍏朵粬鏁版嵁搴撶郴缁熸湁浣曚笉鍚屽憿锛熶笅鏂囦负鎮ㄥ垪涓句簡浜旂DB2鍒犻櫎閲嶅璁板綍鐨勬儏鍐碉紝甯屾湜瀵规偍鏈夋墍鍚开銆
璁剧疆鑱斿悎涓婚敭
alter table table_a add constraint  PK_FA PRIMARY KEY (ID_A , ID_B );

select * from TRADE_FLOW_INFO where TRADE_ON_UUID in (select TRADE_ON_UUID
from TRADE_FLOW_INFO group by TRADE_ON_UUID having count(TRADE_ON_UUID) > 1);

delete from (select TRADE_ON_UUID,row_number() over(partition by TRADE_ON_UUID order by TRADE_ON_UUID) as row_num
from TRADE_FLOW_INFO)  where row_num >1;


delete from TRADE_FLOW_INFO_STATUS;

select * from TRADE_FLOW_INFO_STATUS;
1銆佹煡鎵捐〃涓浣欑殑閲嶅璁板綍锛岄噸澶嶈褰曟槸鏍规嵁鍗曚釜瀛楁锛坧eopleId锛夋潵鍒ゆ柇

select * from TRADE_FLOW_INFO where TRADE_ON_UUID in (select TRADE_ON_UUID
from TRADE_FLOW_INFO group by TRADE_ON_UUID having count(TRADE_ON_UUID) > 1);


2銆丏B2鍒犻櫎閲嶅璁板綍锛岄噸澶嶈褰曟槸鏍规嵁鍗曚釜瀛楁锛坧eopleId锛夋潵鍒ゆ柇锛屽彧鐣欐湁rowid鏈灏忕殑璁板綍
delete from (select TRADE_ON_UUID,row_number() over(partition by TRADE_ON_UUID order by TRADE_ON_UUID) as row_num
from TRADE_FLOW_INFO_STATUS)  where row_num >1
3銆佹煡鎵捐〃涓浣欑殑閲嶅璁板綍锛堝涓瓧娈碉級

select * from vitae a where (a.peopleId,a.seq) in (select peopleId,seq from vitae group by peopleId,seq having count(*) > 1)

4銆丏B2鍒犻櫎閲嶅璁板綍锛堝涓瓧娈碉級锛屽彧鐣欐湁rowid鏈灏忕殑璁板綍

delete from vitae a where (a.peopleId,a.seq) in (select peopleId,seq from vitae group by peopleId,seq having count(*) > 1) and rowid not in (select min(rowid) from vitae group by peopleId,seq having count(*)>1)

5銆佹煡鎵捐〃涓浣欑殑閲嶅璁板綍锛堝涓瓧娈碉級锛屼笉鍖呭惈rowid鏈灏忕殑璁板綍

select * from vitae a where (a.peopleId,a.seq) in (select peopleId,seq from vitae group by peopleId,seq having count(*) > 1) and rowid not in (select min(rowid) from vitae group by peopleId,seq having count(*)>1)
浣犺鐨勬槸jvm鐨勫唴瀛樼┖闂村惂銆
鍦ㄦ柟娉曪紙浠ｇ爜鍧楋級涓畾涔変竴涓彉閲忔椂锛宩ava灏卞湪鏍堜腑涓鸿繖涓彉閲忓垎閰岼VM鍐呭瓨绌洪棿锛屽綋瓒呰繃鍙橀噺鐨勪綔鐢ㄥ煙鍚庯紝java浼氳嚜鍔ㄩ噴鏀炬帀涓鸿鍙橀噺鎵鍒嗛厤鐨凧VM鍐呭瓨绌洪棿锛涜屽湪鍫嗕腑鍒嗛厤鐨凧VM鍐呭瓨鐢眏ava铏氭嫙鏈虹殑鑷姩鍨冨溇鍥炴敹鍣ㄦ潵绠＄悊銆

JVM鍐呭瓨鍖哄煙缁勬垚

JVM鍐呭瓨鍒嗗洓绉嶏細

1銆佹爤鍖猴紙stacksegment锛夆旂敱缂栬瘧鍣ㄨ嚜鍔ㄥ垎閰嶉噴鏀,瀛樻斁鍑芥暟鐨勫弬鏁板硷紝灞閮ㄥ彉閲忕殑鍊肩瓑锛屽叿浣撴柟娉曟墽琛岀粨鏉熶箣鍚庯紝绯荤粺鑷姩閲婃斁JVM鍐呭瓨璧勬簮

2銆佸爢鍖猴紙heapsegment锛夆斾竴鑸敱绋嬪簭鍛樺垎閰嶉噴鏀撅紝瀛樻斁鐢眓ew鍒涘缓鐨勫璞″拰鏁扮粍锛宩vm涓嶅畾鏃舵煡鐪嬭繖涓璞★紝濡傛灉娌℃湁寮曠敤鎸囧悜杩欎釜瀵硅薄灏卞洖鏀

3銆侀潤鎬佸尯锛坉atasegment锛夆斿瓨鏀惧叏灞鍙橀噺锛岄潤鎬佸彉閲忓拰瀛楃涓插父閲忥紝涓嶉噴鏀

4銆佷唬鐮佸尯锛坈odesegment锛夆斿瓨鏀剧▼搴忎腑鏂规硶鐨勪簩杩涘埗浠ｇ爜锛岃屼笖鏄涓璞″叡浜竴涓唬鐮佺┖闂村尯鍩

鍦ㄦ柟娉曪紙浠ｇ爜鍧楋級涓畾涔変竴涓彉閲忔椂锛宩ava灏卞湪鏍堜腑涓鸿繖涓彉閲忓垎閰岼VM鍐呭瓨绌洪棿锛屽綋瓒呰繃鍙橀噺鐨勪綔鐢ㄥ煙鍚庯紝java浼氳嚜鍔ㄩ噴鏀炬帀涓鸿鍙橀噺鎵鍒嗛厤鐨凧VM鍐呭瓨绌洪棿锛涘湪鍫嗕腑鍒嗛厤鐨凧VM鍐呭瓨鐢眏ava铏氭嫙鏈虹殑鑷姩鍨冨溇鍥炴敹鍣ㄦ潵绠＄悊锛屽爢鐨勪紭鍔挎槸鍙互鍔ㄦ佸垎閰岼VM鍐呭瓨澶у皬锛岀敓瀛樻湡涔熶笉蹇呬簨鍏堝憡璇夌紪璇戝櫒锛屽洜涓哄畠鏄湪杩愯鏃跺姩鎬佸垎閰岼VM鍐呭瓨鐨勩傜己鐐瑰氨鏄鍦ㄨ繍琛屾椂鍔ㄦ佸垎閰岼VM鍐呭瓨锛屽瓨鍙栭熷害杈冩參锛涙爤鐨勪紭鍔挎槸瀛樺彇閫熷害姣斿爢瑕佸揩锛岀己鐐规槸瀛樺湪鏍堜腑鐨勬暟鎹ぇ灏忎笌鐢熷瓨鏈熷繀椤绘槸纭畾鐨勬棤鐏垫椿鎬с

鈼唈ava鍫嗙敱Perm鍖哄拰Heap鍖虹粍鎴愶紝Heap鍖哄垯鐢監ld鍖哄拰New鍖虹粍鎴愶紝鑰孨ew鍖哄張鍒嗕负Eden鍖,From鍖,To鍖猴紝Heap={Old+NEW={Eden,From,To}}锛岃鍥1鎵绀恒

Heap鍖哄垎涓ゅぇ鍧楋紝涓鍧楁槸NEWGeneration,鍙︿竴鍧楁槸OldGeneration.鍦∟ewGeneration涓紝鏈変竴涓彨Eden鐨勭┖闂达紝涓昏鏄敤鏉ュ瓨鏀炬柊鐢熺殑瀵硅薄锛岃繕鏈変袱涓猄urvivorSpaces锛坒rom,to锛,瀹冧滑鐢ㄦ潵瀛樻斁姣忔鍨冨溇鍥炴敹鍚庡瓨娲讳笅鏉ョ殑瀵硅薄銆傚湪OldGeneration涓紝涓昏瀛樻斁搴旂敤绋嬪簭涓敓鍛藉懆鏈熼暱鐨凧VM鍐呭瓨瀵硅薄锛岃繕鏈変釜PermanentGeneration锛屼富瑕佺敤鏉ユ斁JVM鑷繁鐨勫弽灏勫璞★紝姣斿绫诲璞″拰鏂规硶瀵硅薄绛夈

鍦∟ewGeneration鍧椾腑锛屽瀮鍦惧洖鏀朵竴鑸敤Copying鐨勭畻娉曪紝閫熷害蹇傛瘡娆C鐨勬椂鍊欙紝瀛樻椿涓嬫潵鐨勫璞￠鍏堢敱Eden鎷疯礉鍒版煇涓猄urvivorSpace,褰揝urvivorSpace绌洪棿婊′簡鍚,鍓╀笅鐨刲ive瀵硅薄灏辫鐩存帴鎷疯礉鍒癘ldGeneration涓幓銆傚洜姝わ紝姣忔GC鍚庯紝EdenJVM鍐呭瓨鍧椾細琚竻绌恒傚湪OldGeneration鍧椾腑锛屽瀮鍦惧洖鏀朵竴鑸敤mark-compact鐨勭畻娉曪紝閫熷害鎱簺锛屼絾鍑忓皯JVM鍐呭瓨瑕佹眰.

鍨冨溇鍥炴敹鍒嗗绾э紝0绾т负鍏ㄩ儴(Full)鐨勫瀮	鍦惧洖鏀讹紝浼氬洖鏀禣LD娈典腑鐨勫瀮鍦撅紱1绾ф垨浠ヤ笂涓洪儴鍒嗗瀮鍦惧洖鏀讹紝鍙細鍥炴敹NEW涓殑鍨冨溇锛孞VM鍐呭瓨婧㈠嚭閫氬父鍙戠敓浜嶰LD娈垫垨Perm娈靛瀮鍦惧洖鏀跺悗锛屼粛鐒舵棤JVM鍐呭瓨绌洪棿瀹圭撼鏂扮殑Java瀵硅薄鐨勬儏鍐点

JVM璋冪敤GC鐨勯搴﹁繕鏄緢楂樼殑锛屼富瑕佷袱绉嶆儏鍐典笅杩涜鍨冨溇鍥炴敹锛氬綋搴旂敤绋嬪簭绾跨▼绌洪棽锛涘彟涓涓槸JVM鍐呭瓨鍫嗕笉瓒虫椂锛屼細涓嶆柇璋冪敤GC锛岃嫢杩炵画鍥炴敹閮借В鍐充笉浜咼VM鍐呭瓨鍫嗕笉瓒崇殑闂鏃讹紝灏变細鎶utofmemory閿欒銆傚洜涓鸿繖涓紓甯告牴鎹郴缁熻繍琛岀幆澧冨喅瀹氾紝鎵浠ユ棤娉曢鏈熷畠浣曟椂鍑虹幇銆

鏍规嵁GC鐨勬満鍒讹紝绋嬪簭鐨勮繍琛屼細寮曡捣绯荤粺杩愯鐜鐨勫彉鍖栵紝澧炲姞GC鐨勮Е鍙戞満浼氥備负浜嗛伩鍏嶈繖浜涢棶棰橈紝绋嬪簭鐨勮璁″拰缂栧啓灏卞簲閬垮厤鍨冨溇瀵硅薄鐨凧VM鍐呭瓨鍗犵敤鍜孏C鐨勫紑閿銆傛樉绀鸿皟鐢⊿ystem.GC()鍙兘寤鸿JVM闇瑕佸湪JVM鍐呭瓨涓鍨冨溇瀵硅薄杩涜鍥炴敹锛屼絾涓嶆槸蹇呴』椹笂鍥炴敹锛屼竴涓槸骞朵笉鑳借В鍐矹VM鍐呭瓨璧勬簮鑰楃┖鐨勫眬闈紝鍙﹀涔熶細澧炲姞GC鐨勬秷鑰椼

鈼嗗綋涓涓猆RL琚闂椂锛孞VM鍐呭瓨鍖哄煙鐢宠杩囩▼濡備笅锛

A.JVM浼氳瘯鍥句负鐩稿叧Java瀵硅薄鍦‥den涓垵濮嬪寲涓鍧桱VM鍐呭瓨鍖哄煙

B.褰揈den绌洪棿瓒冲鏃讹紝JVM鍐呭瓨鐢宠缁撴潫銆傚惁鍒欏埌涓嬩竴姝

C.JVM璇曞浘閲婃斁鍦‥den涓墍鏈変笉娲昏穬鐨勫璞★紙杩欏睘浜1鎴栨洿楂樼骇鐨勫瀮鍦惧洖鏀讹級,閲婃斁鍚庤嫢Eden绌洪棿浠嶇劧涓嶈冻浠ユ斁鍏ユ柊瀵硅薄锛屽垯璇曞浘灏嗛儴鍒咵den涓椿璺冨璞℃斁鍏urvivor鍖

D.Survivor鍖鸿鐢ㄦ潵浣滀负Eden鍙奜LD鐨勪腑闂翠氦鎹㈠尯鍩燂紝褰揙LD鍖虹┖闂磋冻澶熸椂锛孲urvivor鍖虹殑瀵硅薄浼氳绉诲埌Old鍖猴紝鍚﹀垯浼氳淇濈暀鍦⊿urvivor鍖

E.褰揙LD鍖虹┖闂翠笉澶熸椂锛孞VM浼氬湪OLD鍖鸿繘琛屽畬鍏ㄧ殑鍨冨溇鏀堕泦锛0绾э級

F.瀹屽叏鍨冨溇鏀堕泦鍚庯紝鑻urvivor鍙奜LD鍖轰粛鐒舵棤娉曞瓨鏀句粠Eden澶嶅埗杩囨潵鐨勯儴鍒嗗璞★紝瀵艰嚧JVM鏃犳硶鍦‥den鍖轰负鏂板璞″垱寤篔VM鍐呭瓨鍖哄煙锛屽垯鍑虹幇"outofmemory閿欒"

 浣跨敤jvmstat 涔嬪墠闇瑕侀厤缃浉搴旂幆澧冨彉閲忥紝鐜鍙橀噺閰嶇疆濡備笅锛

JVMSTAT_HOME锛歫vmstat瀹夎鐩綍
JVMSTAT_JAVA_HOME锛欽DK鎵鍦ㄧ洰褰曪紝涓嶫AVA_HOME鍊肩浉鍚


        閰嶇疆濂戒袱涓幆澧冨彉閲忎箣鍚庡氨鍙互杩愯jvmstat 浜嗭紝杩愯鍛戒护涓猴細

visualgc pid
#windows 绯荤粺杩涘叆bat 鐩綍鍚庤繍琛岃鍛戒护
#linux 绯荤粺杩涘叆bin 鐩綍鍚庤繍琛岃鍛戒护




 鍚姩mysq鏁版嵁搴擄紝net start mysql;
 mysql-hlocalhost -uroot -p;


 typeperf -si 5 "\Memory\Available Mbytes" "\Memory\Pages/sec"

 瑕佹樉绀哄鐞嗗櫒鍜屽唴瀛樿鏁板櫒锛岃閿叆锛
typeperf "\Memory\Available bytes" "\processor(_total)\% processor time"

瑕佷互 CSV 杈撳嚭鏍煎紡姣忎笁绉掗挓鏄剧ず涓娆 Explorer 杩涚▼锛岃閿叆锛
typeperf "\Process(Explorer)\Thread Count" -si 3 -o typeperf.csv

瑕佸湪璁＄畻鏈 Server_name 涓婃樉绀 50 涓 RAS 璁℃暟鍣ㄧ殑鑼冧緥锛岃閿叆锛
typeperf "\RAS port(LPT1)\Bytes Transmitted" -sc 50 -s Server_name




濡傛灉浣犳兂鍏佽鐢ㄦ埛myuser浠巌p涓192.168.1.6鐨勪富鏈鸿繛鎺ュ埌mysql鏈嶅姟鍣ㄧ殑dk鏁版嵁搴擄紝骞朵娇鐢╩ypassword浣滀负瀵嗙爜

GRANT ALL PRIVILEGES ON dk.* TO 'myuser'@'192.168.1.3' IDENTIFIED BY 'mypassword' WITH GRANT OPTION;

FLUSH   PRIVILEGES;


# /etc/init.d/mysql stop
# mysqld_safe --user=mysql --skip-grant-tables --skip-networking &
# mysql -u root mysql
mysql> UPDATE user SET Password=PASSWORD('newpassword') where USER='root';
mysql> FLUSH PRIVILEGES;
mysql> quit
# /etc/init.d/mysql restart
# mysql -uroot -p
Enter password: <杈撳叆鏂拌鐨勫瘑鐮乶ewpassword>



tps(姣忕浜嬪姟澶勭悊閲(TransactionPerSecond))
1. 缁熻鎵鏈夎妭鐐硅〃绌洪棿浣跨敤鐜
銆銆select substr(TABLESPACE_NAME,1,20) as TBSPC_NAME,bigint(TOTAL_PAGES * PAGE_SIZE)/1024/1024 as "TOTAL(MB)",used_pages*PAGE_SIZE/1024/1024 as "USED(MB)", free_pages*PAGE_SIZE/1024/1024 as "FREE(MB)" from table(snapshot_tbs_cfg('DB_NAME', -2)) as snapshot_tbs_cfg

鑾峰彇鍒板綋鍓嶆椂闂翠负姝紝鏁版嵁搴撴荤殑TPS鍙奟esponse Time锛
select current time as current_time, total_app_commits,total_act_time,total_app_commitamp - db_conn_time)as tps,total_act_time/total_app_commits as response_time from table (mon_get_database(-2))


銆銆鏌ョ湅琛ㄧ┖闂翠娇鐢ㄧ巼
銆銆select substr(tbsp_name,1,20) as TABLESPACE_NAME,substr(tbsp_content_type,1,10) as TABLESPACE_TYPE,sum(tbsp_total_size_kb)/1024 as TOTAL_MB,sum(tbsp_used_size_kb)/1024 as USED_MB,sum(tbsp_free_size_kb)/1024 as FREE_MB,tbsp_page_size AS PAGE_SIZE from SYSIBMADM.TBSP_UTILIZATION group by tbsp_name,tbsp_content_type,tbsp_page_size
銆銆order by 1

asc鍗囧簭   desc闄嶅簭
鍒楀嚭骞冲潎鎵ц鏃堕棿鎺掑墠鍗佺殑SQL璇彞
db2 "select total_act_time/num_exec_with_metrics as a_exe_time ,substr(stmt_text,1,100) as sql from table(mon_get_pkg_cache_stmt(null,null,null,-2))where num_exec_with_metrics>=1 order by 1 desc fetch first 10 rows only"

鎸夊凡鎵ц鏃堕棿鍜岃楃敤CPU鏃堕棿鐢卞ぇ鍒板皬鍒楀嚭姝ｅ湪杩愯鐨凷QL
db2 "select application_handle,elapsed_time_sec,total_cpu_time,rows_read,substr(stmt_text,1,40)as sql from sysibmadm.mon_current_sql order by 2 desc,3 desc"
銆銆db2 call GET_DBSIZE_INFO (?,?,?,0)

銆銆  杈撳嚭鍙傛暟鐨勫
銆銆  --------------------------
銆銆  鍙傛暟鍚嶏細 SNAPSHOTTIMESTAMP
銆銆  鍙傛暟鍊硷細 2008-05-26-10.53.06.421000

銆銆  鍙傛暟鍚嶏細 DATABASESIZE
銆銆  鍙傛暟鍊硷細 1203863552

銆銆  鍙傛暟鍚嶏細 DATABASECAPACITY
銆銆  鍙傛暟鍊硷細 4281493504

銆銆unit=byte, byte/1024/1024=m

銆銆db2 call GET_DBSIZE_INFO (?,?,?,0)



=========DB2甯哥敤鐨勫懡浠======================================
鍚姩鏁版嵁搴
  db2start
鍋滄鏁版嵁搴
  db2stop
杩炴帴鏁版嵁搴
  db2 connect to bgj0 user db2inst using password
璇绘暟鎹簱绠＄悊绋嬪簭閰嶇疆
  db2 get dbm cfg
鍐欐暟鎹簱绠＄悊绋嬪簭閰嶇疆
  db2 update dbm cfg using 鍙傛暟鍚 鍙傛暟鍊
璇绘暟鎹簱鐨勯厤缃
  db2 connect to bgj0user db2 using pwd
  db2 get db cfg for bgj0
鍐欐暟鎹簱鐨勯厤缃
  db2 connect to  user db2 using pwd
  db2 update db cfg for bgj0 using 鍙傛暟鍚 鍙傛暟鍊
=====================================================================
鍏抽棴鎵鏈夊簲鐢ㄨ繛鎺
  db2 force application all
  db2 "force application(8)"
=====================================================================
澶囦唤鏁版嵁搴
  db2 force application all
  db2 backup db bgj0 to d:
  (db2 initialize tape on [url=file://\\.\tape0]\\.\tape0)
  (db2 rewind tape on [url=file://\\.\tape0]\\.\tape0)
  db2 backup db bgj0 to [url=file://\\.\tape0]\\.\tape0
鎭㈠鏁版嵁搴
  db2 restore db bgj0 from d: to d:
  db2 restore db bgj0 from [url=file://\\.\tape0]\\.\tape0 to d:
鍓嶆粴鏁版嵁搴
  db2 rollforward db db3test to end of logs and complete
  db2 rollforward db db3test to [timestamp] and complete
  db2 rollforward db db3test to [timestamp] using local time and complete
========================================================================
濡備綍鏌ョ湅鏁版嵁搴撶殑瀛樺偍杩囩▼?
    SELECT * FROM SYSCAT.PROCEDURES
缁戝畾瀛樺偍杩囩▼
    db2 connect to bgj0 user db2 using pwd
    db2 bind c:\dfplus.bnd
鎷疯礉瀛樺偍杩囩▼鍒版湇鍔″櫒涓婄殑C:\sqllib\function鐩綍涓
=======================================================================

select current date from sysibm.sysdummy1;
values current date;

--鑾峰彇褰撳墠鏃ユ湡
select current time from sysibm.sysdummy1;
values current time;
--鑾峰彇褰撳墠鏃堕棿鎴
select current timestamp from sysibm.sysdummy1;
values current timestamp;

--瑕佷娇褰撳墠鏃堕棿鎴栧綋鍓嶆椂闂存埑璁拌皟鏁村埌 GMT/CUT锛屽垯鎶婂綋鍓嶇殑鏃堕棿鎴栨椂闂存埑璁板噺鍘诲綋鍓嶆椂鍖哄瘎瀛樺櫒锛

values current time -current timezone;
values current timestamp -current timezone;

--鑾峰彇褰撳墠骞翠唤

values year(current timestamp);

--鑾峰彇褰撳墠鏈
values month(current timestamp);

--鑾峰彇褰撳墠鏃
values day(current timestamp);

--鑾峰彇褰撳墠鏃
values hour(current timestamp);

--鑾峰彇鍒嗛挓
values minute(current timestamp);

--鑾峰彇绉
values second(current timestamp);

--鑾峰彇姣
values microsecond(current timestamp);

--浠庢椂闂存埑璁板崟鐙娊鍙栧嚭鏃ユ湡鍜屾椂闂

values date(current timestamp);
values VARCHAR_FORMAT(current TIMESTAMP,'yyyy-mm-dd');
values char(current date);
values time(current timestamp);

--鎵ц鏃ユ湡鍜屾椂闂寸殑璁＄畻

values current date+1 year;
values current date+3 years+2 months +15 days;
values current time +5 hours -3 minutes +10 seconds;

--璁＄畻涓や釜鏃ユ湡涔嬮棿鐨勫ぉ鏁

values days(current date)- days(date('2010-02-20'));

--鏃堕棿鍜屾棩鏈熸崲鎴愬瓧绗︿覆

values char(current date);
values char(current time);

--瑕佸皢瀛楃涓茶浆鎹㈡垚鏃ユ湡鎴栨椂闂村

values timestamp('2010-03-09-22.43.00.000000');
values timestamp('2010-03-09 22:44:36');
values date('2010-03-09');
values date('03/09/2010');
values time('22:45:27');
values time('22.45.27');

--璁＄畻涓や釜鏃堕棿鎴宠涔嬮棿鐨勬椂宸細

--绉掔殑灏忔暟閮ㄥ垎涓哄崟浣
values timestampdiff(1,char(current timestamp - timestamp('2010-01-01-00.00.00')));
--绉掍负鍗曚綅
values timestampdiff(2,char(current timestamp - timestamp('2010-01-01-00.00.00')));
--鍒嗕负鍗曚綅
values timestampdiff(4,char(current timestamp - timestamp('2010-01-01-00.00.00')));
--灏忔椂涓哄崟浣
values timestampdiff(8,char(current timestamp - timestamp('2010-01-01-00.00.00')));
--澶╀负鍗曚綅
values timestampdiff(16,char(current timestamp - timestamp('2010-01-01-00.00.00')));
--鍛ㄤ负鍗曚綅
values timestampdiff(32,char(current timestamp - timestamp('2010-01-01-00.00.00')));
--鏈堜负鍗曚綅
values timestampdiff(64,char(current timestamp - timestamp('2010-01-01-00.00.00')));
--瀛ｅ害涓哄崟浣
values timestampdiff(128,char(current timestamp - timestamp('2010-01-01-00.00.00')));
--骞翠负鍗曚綅
values timestampdiff(256,char(current timestamp - timestamp('2010-01-01-00.00.00')));
涓銆佹暣搴撳浠斤紙澶囦唤鏁版嵁涓轰竴涓枃浠讹級

1锛夊浠戒箣鍓嶆柇寮鎵鏈夎繛鎺

db2 force application all

2锛夊浠

db2 backup db dbname user db2admin using db2admin to d:/

3锛夋仮澶

db2 restore db dbname user db2admin using db2admin from d:/

浜屻佹寜妯″紡澶囦唤锛堝浠芥暟鎹负澶氫釜鏂囦欢锛

1锛夊浠借〃缁撴瀯

db2look -d dbname -e -a -x -i db2admin -w db2admin -o d:\createdb.sql

2锛夊鍑烘暟鎹紙杩涘叆鍒版寚瀹氱洰褰曞悗鎵ц锛

db2move dbname export -u db2admin -p db2admin

3锛夊鍏ヨ〃缁撴瀯

db2 -tvf createdb.sql

4锛夊鍏ユ暟鎹紙杩涘叆鍒版寚瀹氱洰褰曞悗鎵ц锛

db2move dbname import -u db2admin -p db2admin

涓夈佷互鏂囨湰鏂瑰紡瀵煎叆瀵煎嚭鏌愪釜琛紙鏁版嵁閲忚緝灏忕殑琛級

1锛夊鍑

export to d:\dbtable.txt of del select * from dbtable;

2锛夊鍏

import from d:\dbtable.txt  of del insert into dbtable;

3锛夊鍏ヤ贡鐮

import from d:\dbtable.txt of del modified by codepage=1208 insert into dbtable;

codepage=1208 涓篣TF-8
codepage=1386 涓篏BK
澶嶅埗浠ｇ爜
瀵煎嚭鏁版嵁锛
export to "/qdzh_db/test/201507.del" of del lobs to /qdzh_db/test select * from  pub_bizinfo where PBI_TRANTIMESTART like '201507%'
璇存槑锛
锛1锛夎〃鍚峵est鍓嶉潰闇瑕佸甫schema鍚
锛2锛夊涓嶇‘璁よ〃缁撴瀯锛屽彲鐢ㄥ懡浠 db2 describe table test鏌ヨ
3
DB2鍦ㄦ墽琛屼竴涓ぇ鐨刬nsert/update鎿嶄綔鐨勬椂鍊欐姤鈥淭he transaction log for the database is full.. 鈥濋敊璇紝鏌ヤ簡涓涓嬫枃妗ｆ槸DB2鐨勬棩蹇楁枃浠舵弧浜嗙殑缂樻晠銆

棣栧厛杩愯涓嬮潰鍛戒护鏉ユ煡鐪婦B2鐨勬棩蹇楅厤缃俊鎭

?
1
$ db2 get db cfg | grep LOG
娉ㄦ剰鍏朵腑鐨勪笅闈㈤厤缃」
Log file size (4KB) (LOGFILSIZ) = 1024 Number of primary log files (LOGPRIMARY) = 45 Number of secondary log files (LOGSECOND) = 20姝ゆ椂鍙互閫氳繃涓嬮潰鐨勫懡浠ゆ潵淇敼B2鐨勬棩蹇楅厤缃俊鎭
$ db2 update db cfg using LOGFILSIZ 10240 $ db2 update db cfg using LOGPRIMARY 100 $ db2 update db cfg using LOGSECOND 100淇敼閰嶇疆浠ュ悗闇瑕侀噸鏂板惎鍔ㄦ暟鎹簱瀹炰緥
$ db2stop force $ db2start鏈鍚庡啀娆℃煡鐪嬩慨鏀瑰悗鐨勫弬鏁帮紝鐒跺悗閲嶆柊杩愯insert/update鎿嶄綔銆
瀵煎叆鏁版嵁锛
纭鐜淇℃伅娌℃湁闂鎵ц瀵煎叆鍛戒护
import from "/home/qdzhusr/test/201507/test.del" of del lobs from /home/qdzhusr/test/201507/ insert into pub_bizinfo

load from "/home/qdzhusr/test/201507/test.del" of del lobs from /home/qdzhusr/test/201507/ insert into pub_bizinfo

For2ear@

COPY NO/COPY YES/NONRECOVERABLE

load from "/qdzh_db/test/201508.del" of del lobs from /qdzh_db/test/ insert into pub_bizinfo NONRECOVERABLE without prompting

load from aa1.ixf of ixf replace into table1 COPY NO without prompting

鐒跺悗db2 load from /qdzh_db/test/test.del of del terminate into pub_bizinfo
鐒跺悗 reorg table <琛>
鐒跺悗灏卞彲浠ヤ簡锛

鎵ц鍛戒护锛歳eorg table XXX锛涘嵆鍙

db2 force all application
db2 quiesce db immediate
db2 "backup db qdzhdb tablespace(userspace1)"


瀵煎嚭琛ㄦ暟鎹
  db2 export to c:\dftz.txt of del select * from dftz
  db2 export to c:\dftz.ixf of ixf select * from dftz
瀵煎叆琛ㄦ暟鎹
import from c:\123.txt of del insert into ylbx.czyxx锛堟妸123鏂囦欢涓殑鍐呭浠EL鏍煎紡鎻掑叆鍒皔lbx妯″紡涓嬬殑czyxx琛ㄤ腑锛屽姞鑷砪zyxx琛ㄤ腑鏁版嵁鐨勫悗闈級

db2 import from c:\dftz.txt of del commitcount 5000 messages c:\dftz.msg insert into dftz锛堝皢c鐩樹笅dftz鏂囦欢涓殑鍐呭璁板綍浠el鏍煎紡瀵艰嚦dftz琛ㄤ腑锛屾瘡5000鏉℃彁浜や竴娆★紝骞跺湪dftz.msg鏂囦欢涓褰曡繃绋嬩腑鐨勬姤璀︿俊鎭級

db2 import from c:\dftz.ixf of ixf commitcount 5000 messages c:\dftz.msg insert into dftz锛堝皢c鐩樹笅dftz鏂囦欢涓殑鍐呭璁板綍浠xf鏍煎紡瀵艰嚦dftz琛ㄤ腑锛屾瘡5000鏉℃彁浜や竴娆★紝骞跺湪dftz.msg鏂囦欢涓褰曡繃绋嬩腑鐨勬姤璀︿俊鎭級

db2 import from c:\dftz.ixf of ixf commitcount 5000 insert into dftz锛堝皢c鐩樹笅dftz鏂囦欢涓殑鍐呭璁板綍浠xf鏍煎紡瀵艰嚦dftz琛ㄤ腑锛屾瘡5000鏉℃彁浜や竴娆★級

db2 import from c:\dftz.ixf of ixf commitcount 5000 insert_update into dftz锛堝皢c鐩樹笅dftz鏂囦欢涓殑鍐呭璁板綍浠xf鏍煎紡鏇存柊骞跺鍏ftz琛ㄤ腑锛

db2 Import from c:\dftz.ixf of ixf restartcount 55 rowcount 10000 replace_create into dftz锛堜粎ixf锛夛紙灏哾ftz.ixf涓殑鍐呭浠xf鏍煎紡浠庣55鏉¤嚦绗10000鏉＄殑璁板綍瀵艰嚦鏂板缓绔嬬殑dftz琛ㄤ腑锛

db2 Import from c:\dftz.ixf of ixf rowcount 10000 create into dftz锛堜粎ixf锛夛紙灏哾ftz.ixf涓殑鍐呭浠xf鏍煎紡鍓10000鏉＄殑璁板綍瀵艰嚦鏂板缓绔嬬殑dftz琛ㄤ腑锛

db2 import from c:\dftz.ixf of ixf commitcount 5000 replace into dftz  锛堝皢dftz琛ㄤ腑鐨勫唴瀹瑰鍏ftz琛ㄤ腑骞舵浛鎹㈠叾鎵鏈夊唴瀹癸紝姣5000鏉℃彁浜や竴娆★級
======================================================================
鎵ц涓涓壒澶勭悊鏂囦欢
    db2 鈥搕f 鎵瑰鐞嗘枃浠跺悕
  锛堟枃浠朵腑姣忎竴鏉″懡浠ょ敤 锛涚粨鏉燂級
鑷姩鐢熸垚鎵瑰鐞嗘枃浠
======================================================================
  寤烘枃鏈枃浠讹細temp.sql
select 'runstats on table DB2.' || tabname || ' with distribution and detailed indexes all;' from syscat.tables where tabschema='DB2' and type='T';
db2 鈥搕f temp.sql>runstats.sql
===============================================================
鑷姩鐢熸垚寤鸿〃锛堣鍥撅級璇彞
鍦ㄦ湇鍔″櫒涓婏細C:\sqllib\misc鐩綍涓
db2 connect to bgj0 user db2 using pwd
db2look -d bgj0 -u db2inst -e -p -c c:\bgj0.txt
============================================================================
鎺堟潈缁欐煇鐢ㄦ埛鏉冮檺
grant dbadm on database to user bb
============================================================================

select * from czyxx fetch first 1 rows only
============================================================================

db2expln -d 鏁版嵁搴撳悕 -u 鐢ㄦ埛鍚 瀵嗙爜 -o 鏂囦欢鍚峾-t  -c 鐢熸垚鍖呯殑妯″紡鍚 -p 鍖呭悕

=======================================================================================
瑕佷娇鐢⊿QL璋冪敤璇彞閲嶇粍琛紝浣跨敤admin_cmd杩囩▼鍙戝嚭鎵ц鍛戒护锛
call sysproc.admin_cmd('reorg table tablename index indexname')

===========================================================================
鏌ョ湅鏌愪竴鎸囧畾琛ㄧ殑鐘舵
db2 load query table 琛ㄥ悕
============================================================================

鏄剧ず褰撳墠鐢ㄦ埛鎵鏈夎〃

銆銆list tables

鍒楀嚭鎵鏈夌殑绯荤粺琛

銆銆list tables for system
======================鍋氭暟鎹簱鐨勭紪鐩笌鍙嶇紪鐩紙鍗冲垹闄ょ紪鐩級================
缂栫洰
1.db2 catalog tcpip node node1 remote 172.16.170.100(鏈満IP鍦板潃) server 50004(鍙粠 get dbm cfg show detail 涓湅鍑猴級
2.db2 catalog db sample(瑕佹槧灏勫埌鐨勬暟鎹簱鍦ㄦ湰鏈虹殑鍒悕) at node node1

鍙嶇紪鐩
1.db2 uncatalog node node1
2.db2 uncatalog db sample
================鏌ョ湅琛ㄧ粨鏋==============================

銆銆db2 describe select * from tmmsm01 (db2 describe table tmmsm01)

================涓鸿〃鏀瑰悕========================================


db2 rename table 鍘熷琛ㄥ悕 to 鐩殑琛ㄥ悕

==================淇敼鏌愪釜鎿嶄綔鐢ㄦ埛鐨勬潈闄================


锛堥渶瑕佺郴缁烺OOT鐢ㄦ埛鍙備笌锛
鎶婄敤鎴锋墍鍦ㄧ粍閫氳繃smitty group淇敼鎵灞炵粍鐨勬搷浣滄潈闄愬弬鏁帮紝鐒跺悗鍦╠b2 get dbm cfg show detail涓氳繃db2 update dbm cfg for bgj0 using  SYSMON group name   DB2MON鍛戒护鏉ヤ慨鏀


=========================================================


妫鏌ヨ〃鐨勫ぇ灏



db2 select tabname锛宯pages锛宖pages from syscat.tables where tabname='tabname'

鏌ョ湅鏈杩戜竴娆℃暟鎹噸缁勭殑鏃堕棿鐨勬椂闂达細
db2 鈥榮elect stats_time,tabname from syscat.tables where stats_time is not null Order by stats_time鈥檤more

妫鏌ユ槸鍚﹀凡鍋氳繃runstats锛
db2 -v "select tbname,nleaf,nlevels,stats_time from sysibm.sysindexes"

涓烘暟鎹簱鍋氳嚜鍔ㄧ粺璁′俊鎭敹闆嗭細
db2 update db cfg for bgj0 using auto_maint on
db2 update db cfg for bgj0 using auto_tbl_maint on
db2 update db cfg for bgj0 using auto_runstats on

鏀堕泦鏌愯〃涓墍鏈夊垪涓婄殑缁熻淇℃伅锛

 runstats on table 鏌愪釜妯″紡涓嬬殑琛ㄨ〃鍚 on all columns

涓婂彞绛夊悓浜庯細      runstats on table 琛ㄥ悕


鏀堕泦琛ㄥ拰绱㈠紩涓婄殑鏁版嵁搴撶粺璁′俊鎭紝涓嶅寘鍚垎甯冪粺璁′俊鎭細
runstats on table 妯″紡涓嬬殑琛 and indexes all

鏀堕泦琛ㄥ拰绱㈠紩涓婄殑鏁版嵁搴撶粺璁′俊鎭紝鍖呭惈鍒嗗竷缁熻淇℃伅锛
runstats on table pub_bizinfo with distribution and indexes all


鏀堕泦琛ㄤ笂鐨勬暟鎹簱缁熻淇℃伅浠ュ強绱㈠紩涓婄殑璇︾粏缁熻淇℃伅锛屼笉鍖呭惈鍒嗗竷缁熻淇℃伅锛
runstats on table 妯″紡涓嬬殑琛 and detailed indexes all

鏀堕泦琛ㄤ笂鐨勬暟鎹簱缁熻淇℃伅浠ュ強绱㈠紩涓婄殑璇︾粏缁熻淇℃伅锛屽寘鍚垎甯冪粺璁′俊鎭細
runstats on table 妯″紡涓嬬殑琛 with distribution and detailed indexes all


鏀堕泦鍏抽敭鍒椾笂鐨勬暟鎹簱缁熻淇℃伅锛
runstats on table 妯″紡涓嬬殑琛 on key columns


==============================================================

妫鏌ュ摢涓〃鏈夊仛杩噐eorg
db2 select tabname锛宯pages锛宖pages from syscat.tables



妫鏌ュ浠戒笌閲嶆瀯鍛戒护鐨勫巻鍙茶褰曪細
db2 list history backup/reorg  all for bgj0


=======================================================================


鎵ц琛ㄣ佺储寮曟鏌ユ槸鍚﹂渶瑕佸仛reorg锛屽厛鎵цreorgchk鍛戒护妫锛屽懡浠ゅ涓嬶細
db2 reorgchk update statistics on table bgj0.bgj0logevent

(鏌ョ湅鐢ㄤ簬绱㈠紩鐨凢4锛孎5锛孎6锛孎7锛孎8杩欏嚑鍒楋紝濡傛灉杩欏嚑鍒椾腑鐨勪换浣曚竴鍒楁湁鏄熷彿*锛屽垯璇存槑褰撳墠鐨勮〃鍜/鎴栫储寮曞簲璇ラ噸缁勩)

reorgchk on table all 纭畾鏄惁闇瑕佸琛ㄨ繘琛岄噸缁勩傝繖瀵逛簬瀵规墍鏈夎〃鑷姩鎵ц runstats 寰堟湁鐢ㄣ

===============================================================

鑴辨満鏂瑰紡閲嶇粍琛ㄦ槸鏁寸悊琛ㄧ鐗囨渶蹇柟娉曘備娇鐢–LP閲嶇粍琛紝鎵ц锛
db2 reorg table bgj0.bgj0logevent

瑕佷娇鐢ㄤ复鏃惰〃绌洪棿閲嶇粍琛紝鎵ц锛
db2 reorg table dbname.tablename use 涓存椂琛ㄧ┖闂村悕


閲嶇粍琛ㄥ苟鏍规嵁绱㈠紩瀵硅杩涜閲嶆柊鎺掑簭锛屾墽琛岋細
db2 reorg table bgj0.bgj0logevent index IDX_LOG_01

db2 reorg indexes all for table bgj0.bgj0logevent allow read access


=====鏌ユ閿=======================================================
cd /db2data/db2user/db2inst/db2inst/NODE0000/SQL00001/db2event/db2detaildeadlock
du -a|sort -rn

db2evmon -path /db2data/db2user/db2inst/db2inst/NODE0000/SQL00001/db2event/db2detaildeadlock>/tmp/lock1.txt


============鐩戞帶鍣================================================



           绗竴姝ワ細鎵撳紑鐩戞帶寮鍏筹紙鍙拰get snapshot鐩稿叧)
           db2 "update monitor switches using lock ON sort ON bufferpool ON uow ON table ON statement ON"
           db2 "update monitor switches using lock off sort off bufferpool off uow off table off statement ON"
           db2 update dbm cfg using DFT_MON_BUFPOOL on DFT_MON_LOCK on DFT_MON_SORT on DFT_MON_STMT on  DFT_MON_TABLE on  DFT_MON_TIMESTAMP on  DFT_MON_UOW on  HEALTH_MON on
           db2 get monitor switches

           绗簩姝ワ細鍒涘缓浜嬩欢鐩戞帶鍣
           db2 "create event monitor monitor_all for statement,database,tables,tablespaces,deadlocks,transactions write to file '/db2data/event'"

           绗笁姝ワ細婵娲讳簨浠剁洃鎺у櫒
           db2 "set event monitor db2detaildeadlock state=1"
           ps -ef|grep db2event
           [bgrzl0m0][db2inst][/db2data/event]>ls
           00000000.evt  db2event.ctl

           绗洓姝ワ細鏍煎紡鍖栦簨浠剁洃鎺ф枃浠
           db2evmon -db bgj0 -evm db2detaildeadlock > db2detaildeadlock.txt




============娓呯┖鐩戞帶鍣細===========================================

鏌ョ湅鐩戞帶鍣ㄥ悕绉帮細ps -ef |grep db2event     (db2detaildeadlock)

db2 "set event monitor db2detaildeadlock state=0"

鍒犻櫎鈥  00000000.evt  db2event.ctl鈥濇枃浠


db2 "set event monitor db2detaildeadlock state=1"



===============蹇収鐩戞帶鍣===================================================
 db2 update dbm cfg using DFT_MON_BUFPOOL on DFT_MON_LOCK on DFT_MON_SORT on DFT_MON_STMT on  DFT_MON_TABLE on  DFT_MON_TIMESTAMP on  DFT_MON_UOW on  HEALTH_MON on

 Default database monitor switches
   Buffer pool                         (DFT_MON_BUFPOOL) = ON                         ON
   Lock                                   (DFT_MON_LOCK) = OFF                        ON
   Sort                                   (DFT_MON_SORT) = ON                         ON
   Statement                              (DFT_MON_STMT) = ON                         ON
   Table                                 (DFT_MON_TABLE) = ON                         ON
   Timestamp                         (DFT_MON_TIMESTAMP) = ON                         ON
   Unit of work                            (DFT_MON_UOW) = ON                         ON
 Monitor health of instance and databases   (HEALTH_MON) = ON                         ON


 db2 get snapshot for all on bgj0 > all_snap.out

鍔ㄦ乻ql璇彞snapshot
鐩戞帶鏄惁瀛樺湪姝婚攣
grep -n "Deadlocks" all_snap.out|grep -v "= 0"|more

鎵ц棰戠箒鐨勮鍙
grep -n "Number of execution" all_snap.out|grep -v "= 0"|sort -krn|more


鎵ц鏃堕棿寰堥暱鐨勮鍙
grep -E "Total execution time" all_snap.out| sort -rn|more
grep -E "Rows read" all_snap.out| sort -rn|more


==========================================================================




绠＄悊

export 灏嗘暟鎹簱鏁版嵁鎶藉彇鍒颁竴涓钩闈㈡枃浠朵腑銆
import 閫氳繃浣跨敤 IMPORT 瀹炵敤绋嬪簭锛屽皢鏁版嵁瀵煎叆鍒版暟鎹簱銆
load query table <tbname>
[to local-message-file][nosummary | summaryonly] [showdelta]  杩斿洖 LOAD 瀹炵敤绋嬪簭鐨勮繘搴︺
backup database <dbname> [to <path>] 鎵ц鏁版嵁搴撳浠姐
restore database <dbname> [from <path>] 鎵ц鏁版嵁搴撴仮澶嶃
get health snapshot for dbm 杩斿洖瀹炰緥鐨勬甯稿揩鐓т俊鎭紙浠呴傜敤浜 V8锛夈
get health snapshot for all on <dbname> 杩斿洖鏁版嵁搴 <dbname> 鐨勬墍鏈夋甯稿揩鐓э紙浠呴傜敤浜 V8锛夈

绠＄悊鏈嶅姟鍣

get admin cfg 杩斿洖绠＄悊鏈嶅姟鍣ㄧ殑閰嶇疆璁剧疆銆
update admin cfg using <p> <v> 灏嗙鐞嗘湇鍔″櫒閰嶇疆鍙傛暟 <p> 鏇存柊涓哄 <v>銆


===============================================================



 db2pd -v
 db2pd -osinfo
 [bgrz1d0][db2inst][/db2data/db2user/db2inst]>db2pd -help

Usage:
   -h | -help [file=<filename>]
      Help
   -v | -version [file=<filename>]
      Version
   -osinfo [disk] [file=<filename>]
      Operating System Information
   -dbpartitionnum <num>[,<num>]
      Database Partition Number(s)
   -alldbpartitionnums
      All partition numbers
   -database | -db <database>[,<database>]
      Database(s)
   -alldatabases | -alldbs
      All Active Databases
   -inst
      Instance scope output
   -file <filename>
      All Output to Filename
   -command <filename>
      Read in predefined options
   -interactive
      Interactive
   -full
      Expand output to full length
   -repeat [num sec] [count]
      Repeat every num seconds (default 5) count times
   -everything
      All options on all database partitions

Instance scope options:

   -agents [db=<database>] [ [agent=<agentid>] | [application=<appid>] ] [file=<filename>]
      Agents
   -fcm [<numApps>] [file=<filename>]
      FCM Information
   -mempools [file=<filename>]
      Memory Pools
   -memsets [file=<filename>]
       Memory Sets
   -dbmcfg [file=<filename>]
      DBM Config
   -sysplex [db=<database>] [file=<filename>]
      Sysplex List
   -utilities [file=<filename>]
      Utilities
   *-fmp
      FMP Table

Database scope options:

   -applications [ [application=<appid>] | [agent=<agentid>] ] [file=<filename>]
      Applications
   -transactions [tran=<tranhdl>] [app=<apphdl>] [file=<filename>]
      Transactions
   -bufferpools [file=<filename>]
      Buffer Pools
   -logs [file=<filename>]
      Transaction Logs
   -locks [tran=<tranhdl>] [file=<filename>] [showlocks] [wait]
      Locks
   -tablespaces [file=<filename>] [group] [tablespace=<tablespace id>]
      Tablespaces/Containers
   -dynamic [file=<filename>]
      Dynamic Cache
   -static [file=<filename>]
      Static Cache
   -mempools [file=<filename>]
      Memory Pools
   -memsets [file=<filename>]
       Memory Sets
   -dbcfg [file=<filename>]
      Database Config
   -catalogcache [file=<filename>]
      Catalog Cache
   -tcbstats [all|index] [tbspaceid=<tbspaceid> [tableid=<tableid>]] [file=<filename>]
      Table Control Block Stats
   -reorgs [file=<filename>]
      Table Reorg Stats
   -recovery [file=<filename>]
      Recovery Status
   -reopt [file=<filename>]
      Reoptimized SQL Statements
   -storagepaths
      Storage Paths
   -hadr [file=<filename>]
      High Availability Disaster Recovery
   -activestatements [file=<filename>]
      Active Statement List

   Examples:
   db2pd -dbpartitionnum 0,1 -db sample -locks
   db2pd -dbp 0,1 -database bgj0 app=<50>
   db2pd -alldbp -alldbs


楠岃瘉鏁版嵁搴撴槸鍚︽鍦ㄨ繘琛屾仮澶嶇殑璁℃暟鍣紝褰撳墠鏃ュ織鍜屽綋鍓峀SN锛堟棩蹇楀簭鍙凤級鎻愪緵浜嗘棩蹇椾綅缃紝
db2pd -db sample -recovery

db2pd -logs


db2pd -db BGJ0 -applications
db2pd -db BGJ0 -transactions|more
db2pd -db bgj0 -locks wait

db2pd -db bgj0  -applications -dyn|more
db2pd -db BGJ0 -applications -transactions -dynamic|more
db2pd -db bgj0

db2pd -db bgj0 -applications -transactions -dynamic|grep locks


[bgrzl0m0][db2inst][/db2data/db2user/db2inst]>db2pd -db BGJ0 -logs

Database Partition 0 -- Database BGJ0 -- Active -- Up 0 days 00:38:39 -- Date 08/06/2009 15:46:23

Logs:
Current Log Number            0
Pages Written                 0
Method 1 Archive Status       n/a
Method 1 Next Log to Archive  n/a
Method 1 First Failure        n/a
Method 2 Archive Status       n/a
Method 2 Next Log to Archive  n/a
Method 2 First Failure        n/a

Address            StartLSN       State      Size       Pages      Filename
0x0780000020008118 0x0008F2488000 0x00000000 16000      16000      S0000000.LOG
0x07800000200081B8 0x0008F6308000 0x00000000 16000      16000      S0000001.LOG
0x0780000020008258 0x0008FA188000 0x00000000 16000      16000      S0000002.LOG
0x07800000200082F8 0x0008FE008000 0x00000000 16000      16000      S0000003.LOG
0x0780000020008398 0x000901E88000 0x00000000 16000      16000      S0000004.LOG
0x0780000020008438 0x000905D08000 0x00000000 16000      16000      S0000005.LOG

db2pd  -db BGJ0 -dbcfg
db2pd  -db BGJ0 -dbmcfg
db2pd  -db BGJ0 -bufferpools
db2pd  -db BGJ0 -tablespaces
db2 list tablespaces show detail|more
db2 list tablespace containers for 4 show detail
db2pd -db BGJ0 -reorg

纭畾鍝釜浜嬪姟鍖呭惈閿佸畾锛
db2pd -db bgj0 -locks showlocks wait

璇婃柇閫犳垚閿佸畾绛夊緟鐨勮〃鍔犻攣鎯呭喌锛
db2pd -db bgj0 -applications 锛堟煡鐪媠tatus涓簂ock_wait椤瑰搴旂殑AppHandl鍙凤級
db2pd -db bgj0 -transactions 锛堟煡鐪婣ppHandl鍙峰搴旂殑tranhdl鍙凤級
db2pd -db bgj0 -locks锛堟煡鐪媡ranhdl鍙峰搴旂殑閿佺被鍨嬶紙type锛変笌閿佹儏鍐碉紙mode锛夛級

==================================================================


db2mtrk
   -i鏄剧ず褰撳墠瀹炰緥鍐呭瓨浣跨敤锛
   -i -v鏄剧ず褰撳墠瀹炰緥鍐呭瓨浣跨敤璇︾粏淇℃伅锛
   -d鏁版嵁搴撳唴瀛樹娇鐢ㄦ儏鍐碉紱
   -d -v鏁版嵁搴撳唴瀛樹娇鐢ㄨ缁嗕俊鎭紱
   -p浠ｇ悊杩涚▼涓撶敤鍐呭瓨浣跨敤鐜
   -r(interval閲嶅浣跨敤闂撮殧鏁帮紝count鏄噸澶嶇殑娆℃暟

Memory for database: BGJ0

   Backup/Restore/Util Heap is of size 16384 bytes
   Package Cache is of size 540672 bytes
   Catalog Cache Heap is of size 131072 bytes
   Buffer Pool Heap is of size 395689984 bytes
   Buffer Pool Heap is of size 1254653952 bytes
   Buffer Pool Heap is of size 42713088 bytes
   Buffer Pool Heap is of size 704512 bytes
   Buffer Pool Heap is of size 442368 bytes
   Buffer Pool Heap is of size 311296 bytes
   Buffer Pool Heap is of size 245760 bytes
   Lock Manager Heap is of size 340508672 bytes
   Database Heap is of size 31637504 bytes
   Other Memory is of size 0 bytes
   Total: 2067595264 bytes


============================db2advis鍛戒护===========================



db2 -tvf (璺緞)explain.ddl


db2 update monitor switches using statement on


create event monitor for statements write

db2 set event monitor sql_trace state=1


(鎵ц姝ｅ父鐨勬暟鎹簱娲诲姩锛屽苟寮濮嬭幏鍙栧簲鐢ㄤ笂鎵鏈夌殑SQL璇彞锛岀洿鍒版兂瑕佺殑鐩戞帶鐨勬椂娈电粨鏉熴傦級


db2 event monitor sql_trace state=0




鎸夌収鎵ц鏃堕棿闄嶅簭鎺掑垪鎵ц鑰楁椂鏈闀跨殑SQL璇彞锛屼娇鐢ㄤ笅鍒楄鍙ワ細
db2 "select stmt_text,(stop_time-start_time) 'ExecutionTime(sec)' from stmt_sql_trace where stmt_operation not in(7,8,9,19) order by decimal(ExecutionTime) desc fetch first 10 rows only";


鎸夌収棰戠巼闄嶅簭鎺掑垪鎵ц娆℃暟鏈澶氱殑SQL璇彞锛屼娇鐢ㄤ笅鍒楄鍙ワ細
db2 select distinct(stmt_text),count(*) Count from stmt_sql_trace where stmt_operation not in(7,8,9,19) group by stmt_text order by count (*) desc fetch first 10 rows only;


鎸夌収CPU鏃堕棿闄嶅簭鎺掑垪鏈鑰桟PU鏃堕棿鐨凷QL璇彞锛屼娇鐢ㄤ笅鍒楄鍙ワ細
db2 "select stmt_text,user_cpu_time,UserCPU(sec) from stmt_sql_trace where stmt_operation not in(7,8,9,19) order by usrcpu desc fetch first 10 rows only"


鎸夌収鎬绘帓搴忔椂闂撮檷搴忔帓鍒楁帓搴忔椂闂存渶闀跨殑SQL璇彞锛屼娇鐢ㄤ笅鍒楄鍙ワ細
db2 select stmt_text,total_sort_time,TotalSortTime(ms) from stmt_sql_trace where stmt_operation not in (7,8,9.19) order by decimal (total_sort_time) desc fetch first 10 rows only;




鎹曡幏涓婅瘔姣忎竴绫讳腑鐨凷QL璇彞锛屽苟灏嗗畠浠斁缃湪tune.sql鏂囦欢涓傚苟灏(--#set frequency <鎵瑕佹墽琛岀殑SQL璇彞鐨勬鏁> )鍛戒护鎻掑叆鍒皌une.sql鏂囦欢涓紝杩欐牱鍙互鏇存敼宸ヤ綔璐熻浇涓瘡鏉¤鍙ョ殑鎵ц棰戠巼銆

鎵寰楀埌鐨則une.sql绫讳技浜庝笅闈㈣繖鏍凤細
--#set frequency 100
SELECT DISTINCT DIVISION FROM org;



涓轰簡纭畾鍝簺绱㈠紩鍙兘鎻愰珮鎬ц兘锛屾寜濡備笅鎵ц绱㈠紩椤鹃棶绋嬪簭锛
db2advis -d sample -i tune1.sql -t 0 -o tuneidx.sql
鍏朵腑鎵鏈夎鎺ㄨ崘鍙兘浼氭彁楂樻ц兘鐨勭储寮曞皢鏀剧疆鍦ㄦ枃浠秚uneidx.sql涓傜紪杈戣鏂囦欢锛屽湪鏂囦欢寮濮嬪娣诲姞涓鏉¤繛鎺ユ暟鎹簱鐨勮繛鎺ヨ鍙ワ細
db2 connect to sample user userid using password锛
骞跺湪鏂囦欢鏈熬娣诲姞濡備笅琛屽懡浠わ細
terminate锛

鏈鍚庤繍琛岃鏂囦欢浠ュ垱寤烘帹鑽愮殑绱㈠紩锛
db2 -tf tuneidx.sql -z tuneidx.log

鍏朵腑锛宼uneidx.log鎹曡幏tuneidx.sql鐨勬墍鏈夎緭鍑恒



===========娴嬭瘯鏈轰笂娴嬮獙琛ㄧ┖闂寸殑琛ㄦ暟鎹湁鏀瑰彉鍚庣殑绌洪棿澶у皬澧炲噺============


BGJ0涓嬬殑DS_EP01閲孊GJ0LOGEVENT鏁版嵁count鏁帮細1150525


鍓嶅彴鍒犻櫎BGJ0LOGEVENT鏁版嵁鍚巆ount鏁帮紙鐢╠elete鍒狅級锛


more 55.log鏃惰〃绌洪棿鐪嬩笉鍑烘潵澶у皬澧炲噺锛

db2stop force
db2start

db2 connect to bgj0

閲嶆瀯妫鏌ワ細锛坉b2 reorgchk update statistics on table BGJ0.BGJ0LOGEVENT锛
閲嶆瀯锛 锛坉b2 reorg table on BGJ0.BGJ0LOGEVENT锛


more 55.log鏃跺彲鐪嬭〃绌洪棿鏈夊ぇ灏忓彉鍔



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
delete涔嬪悗鑳戒笉鑳介噴鏀捐〃绌洪棿

鍘熷厛琛ㄧ┖闂寸敤浜80%锛岀敱浜庡簱涓湁涓寮犺〃宸ㄥぇ鏃犳瘮锛屾墍浠ュ埄鐢ㄩ暱鍋囦綔浜哾elete鎿嶄綔锛屽垹闄や簡鍏朵腑4/5鐨勬暟鎹紝浣嗘槸鐪嬭〃绌洪棿杩樻槸80%宸﹀彸锛屾槸涓嶆槸浣滃畬delete鑷繁鏄笉鑳介噴鏀捐〃绌洪棿鐨勯樋锛

濡傛灉瑕侀噴鏀捐〃绌洪棿鐨勮瘽锛屽簲璇ユ庝箞鎿嶄綔鍛紵璋㈣阿



(1)commit浜嗘病鏈夛紵鐒跺悗reorg涓涓嬶紝鍙互鐢╮unstats鍏堝垎鏋愪竴涓嬬洰鏍囪〃锛屽叾缁撴灉鍙互浠巗ysstat.tables寰楀埌


(2)涓嶈鐨勮瘽export鍑烘潵锛屽垹闄よ〃锛屽啀LOAD杩涘幓銆



娉:DELETE涔嬪悗鐨勬暟鎹褰曞彿杩樺瓨鍦紝鎵浠ユ暟鎹崰鐢ㄩ噺鏄笉鍑忓皯鐨勶紝杩欐槸涓轰簡鎵惧洖DELETE鍚庤屽張鎯宠鐨勬暟鎹




~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

=========鐢熸垚鏁版嵁搴撶粨鏋勬枃浠=================================



db2look   -d   bgj0   -e   -c   -o   /db2bak/bgj0/structure.sql

=========褰撳墠鐩綍涓嬬敓鎴恉b2support鏂囦欢============================

db2support . -d bgj0 -c

=========DB2瀹夎=================================================

1.	寮濮嬪畨瑁
a)	浣滀负root鐢ㄦ埛鐧诲綍锛岃繘鍏ュ埌瀹夎鏂囦欢鐩綍涓嬭繍琛
         ./db2_install 鈥損 DB2.ESE
2.	鍒涘缓db2绠＄悊鏈嶅姟鍣
a)	浣滀负root鐢ㄦ埛鐧诲綍锛岄氳繃浠ヤ笅鍛戒护鍒涘缓db2绠＄悊鏈嶅姟鍣
                dascrt 鈥搖 dasuser
3.	鍚姩db2鏁版嵁搴撶鐞嗗櫒
a)	浣滀负db2鏁版嵁搴撶鐞嗗櫒鐢ㄦ埛锛坉asuser锛夌櫥褰
b)	杩愯. das/bin/db2admin start鍛戒护鍚姩鏁版嵁搴撶鐞嗗櫒
4.	鍒涘缓瀹炰緥
a)	浣滀负root鐢ㄦ埛鐧诲綍锛岄氳繃浠ヤ笅鍛戒护鍒涘缓64浣嶇殑db2瀹炰緥
               db2icrt 鈥搖 db2fenc 鈥搘 64 db2inst2
5.	鍒涘缓db2鏂囦欢鐨勯摼鎺
a)	杩愯 db2ln鍛戒护
6.	娉ㄥ唽license
a)	浣滀负瀹炰緥鐢ㄦ埛锛坉b2inst锛夌櫥褰,杩愯锛歞b2licm 鈥揳 db2ese.lic鍛戒护
7.	鍚姩瀹炰緥
a)	浣滀负瀹炰緥鐢ㄦ埛锛坉b2inst锛夌櫥褰曪紝杩愯db2start鍛戒护
8.	鍒涘缓鏁版嵁搴
        杩愯db2 create db test
銆銆銆銆鎻愮ず鎴愬姛鍚庛
銆銆銆銆Db2 connect to test灏卞彲浠ヨ繛涓婃暟鎹簱浜




========DB2鍙傛暟閰嶇疆=====================================

1.	浣滀负瀹炰緥鐢ㄦ埛锛坉b2inst锛夌櫥褰
2.	杩愯db2set DB2COMM=tcpip
3.	杩愯db2 update dbm cfg using svcename 50002璁剧疆鏈嶅姟鐨勮繛鎺ョ鍙
4.	璁剧疆褰掓。鏃ュ織
    Db2 connect to dbname
Db2 update db cfg using LOGRETAIN recovery
娉細璁剧疆浜嗚鍙傛暟锛屽湪杩炴帴鏁版嵁搴撶殑鏃跺欎細鎶ackup pending
5.	淇敼鏃ュ織璺緞, 灏嗘棩蹇楁枃浠跺綊妗ｈ嚦娲诲姩鏃ュ織璺緞涔嬪鐨勪綅缃
db2 update db cfg for test using logarchmeth1 DISK:/db2log/db2archivelog




==============鏁版嵁搴撳仴搴峰揩鐓ф鏌==============================

db2 get health snapshot for all on bgj0 <show detail>



==============================================================

妫鏌ユ墍鏈夋暟鎹簱涓殑璇诲啓琛屾暟瀵规瘮銆佸彂鐢熺殑绛夐攣鏁般佹荤殑閿佸崰鐢ㄦ椂闂淬佸崟浣嶆椂闂村唴鐨勯攣鍗犵敤鏁伴噺銆佹閿佹垨閿佸鍔犺秼鍔裤佸彂鐢熶簡澶氬皯娆℃帓搴忔搷浣滀互鍙婄浉鍏崇殑鏃堕棿閲忕瓑鏁版嵁搴撲娇鐢ㄦā寮:


select db_name, SNAPSHOT_TIMESTAMP,rows_read, rows_selected, lock_waits, lock_wait_time, lock_wait_time/nullif(lock_waits,0) as avg_wt_time, deadlocks, lock_escals, total_sorts, total_sort_time, total_sort_time/nullif(total_sorts,0) as avg_sort_time, sort_overflows, sort_overflows/nullif(total_sorts,0) as pct_ovflow_sorts from table (snapshot_database ('',-1)) as snapshot_db



=============================================================


鑾峰彇琛ㄧ┖闂村ぇ灏忎互鍙婂墿浣欏彲鐢ㄧ┖闂村ぇ灏:

select substr(tablespace_name,1,120) as TBSPC_NAME,used_pages, free_pages from table (snapshot_tbs_cfg (' ', -1)) as snapshot_tbs_cfg



=============================================================

鏍规嵁琚鐨勯鐜囨潵纭畾闇瑕佹墽琛宺eorg鎴杛unstats鍛戒护鐨勮〃:

select substr(table_schema,1,10) as tbschema, substr(table_name,1,30) as tbname,rows_read,rows_written,overflow_accesses,page_reorgs from table (SNAPSHOT_TABLE(' ', -1)) as snapshot_table order by rows_read desc fetch first 10 rows only



=============================================================

鏍规嵁琚啓鐨勬鏁版壘鍑10寮犳洿鏂版渶棰戠箒鐨勮〃:

select substr(table_schema,1,10) as tbschema,substr(table_name,1,30) as tbname, rows_read, rows_written, overflow_accesses, page_reorgs from table (SNAPSHOT_TABLE(' ', -1)) as snapshot_table order by rows_written desc fetch first 10 rows only

=============================================================



瀵逛簬db2鏁版嵁搴擄紝瀵煎叆鍜屽鍑鸿〃缁撴瀯鍜屾暟鎹叾瀹炲緢绠鍗曪紝鍙渶瑕佺敤鍒癲b2look鍜宒b2move涓や釜鍛戒护鍗冲彲銆傝繖涓や釜鍛戒护閮介渶瑕佸湪瀹㈡埛绔殑鍛戒护琛屽鐞嗗櫒涓墽琛岋紝浣嗗浜庢暟鎹簱鏈嶅姟鍣ㄥ拰瀹㈡埛绔笉鍦ㄥ悓涓鏈哄櫒涓婄殑锛岄渶瑕佸熷姪catalog鍛戒护锛屾潵鍏堝畬鎴愯繙绋嬫暟鎹簱鍔犺浇鍒版湰鍦帮紝鐒跺悗鍐嶈繘琛屽鍑哄鍏ユ搷浣溿

    濡傛灉鏄繙绋嬫搷浣滐紝鍒欏厛闇瑕佹妸杩滅▼鐨勬暟鎹簱淇℃伅鍔犺浇鍒版湰鍦帮紝濡傛灉鏄湰鍦板垯璺宠繃1鍜2锛屼粠3寮濮嬶紝鍏蜂綋濡備笅锛

       1銆 catalog server 绔殑 node 锛屽懡浠ゅ涓嬶細
       db2 catalog tcpip node node_name remote hostname server service_port
       db2 uncatalog node node_name   锛堝彇娑堣妭鐐圭殑缂栫洰锛

   鍏朵腑 node_name 鏄敱浣犱换鎰忚捣鐨勪竴涓粨鐐瑰悕锛岀粨鐐瑰悕涓嶈兘璺熷凡鏈夌殑缁撶偣鍚嶉噸澶嶏紙鍙氳繃db2  list node directory 鏌ョ湅锛夛紝hostname涔熷彲涓篒P address锛宻ervice_port涓虹鍙ｅ彿涓鑸粯璁や负50000銆傝妭鐐圭洰褰曠敤浜庡瓨鍌ㄨ繙绋嬫暟鎹簱鐨勬墍鏈夎繛閫氭т俊鎭

       2銆 catalog 杩滅 DB2 鏁版嵁搴擄紝鍛戒护濡備笅锛
       db2 catalog db db_name [as alias_name] at node node_name
     db2 uncatalog db db_name    锛堝彇娑堟暟鎹簱鐨勭紪鐩級

      db_name 鏄寚杩滅▼鏁版嵁搴撶殑鍚嶅瓧锛 alias_name 鏄鎴风瀹炰緥鍚嶏紙鍙互蹇界暐锛夛紝 db2node 鏄寚涓婇潰浣犳墍鎸囧畾鐨勮妭鐐筺ode 锛

     3銆 杩炴帴鏁版嵁搴擄紝鍛戒护濡備笅锛
       db2 connect to db_name user user_name using password
     db_name 鏄寚鏁版嵁搴撶殑鍚嶅瓧锛 user_name 鏄暟鎹簱鐢ㄦ埛鍚嶏紝password鏄暟鎹簱瀵嗙爜

   4銆佺敤db2look鍛戒护鐢熸垚琛ㄧ粨鏋勭殑DLL鑴氭湰
   db2look -d db_name -i user_name -w password -a -e -o d:\script.sql

     db_name 鏄寚鏁版嵁搴撶殑鍚嶅瓧锛 user_name 鏄暟鎹簱鐢ㄦ埛鍚嶏紝password鏄暟鎹簱瀵嗙爜

   5銆佺敤db2move瀵煎嚭鎵鏈夎〃鐨勬暟鎹
     db2move db_name export -u user_name -p password

     db_name 鏄寚鏁版嵁搴撶殑鍚嶅瓧锛寀ser_name 鏄暟鎹簱鐢ㄦ埛鍚嶏紝 password鏄暟鎹簱瀵嗙爜

   6銆佺敤export瀵煎嚭鎸囧畾鐨勮〃鏁版嵁
     db2 "export to d:\data\tab1.ixf of ixf lobs to d:\data\ lobfile lobs modified by lobsinsepfiles  messages d:\data\tab1.msg select * from schema_name.table_name"
   schema_name 鏄〃鎵灞烇紝table_name鏄〃鍚嶏紝 lobsinsepfiles 鎴 lobsinfile 鏄敓鎴恖ob鏂囦欢 鍓嶄竴涓槸鐢熸垚姣忎釜锛屽悗闈㈡槸鐢熸垚鍒颁竴涓枃浠朵腑


   7銆佹墽琛宻ql鑴氭湰
    db2 -tvf d:\script.sql -z d:\script.log

    8銆佺敤db2move瀵煎叆鎵鏈夎〃鐨勬暟鎹
     db2move db_name import -io replace -u user_name -p password

    9銆佺敤import瀵煎叆鎸囧畾鐨勮〃鏁版嵁
      db2 "import from d:\data\tab1.ixf of ixf messages d:\data\tab1.msg insert into schema_name.table_name"

      DB2锛氭煡鐪嬭〃鐨勭储寮
select *  from SYSCAT.INDEXES  where TABNAME='琛ㄥ悕'

db2 "select  tabname  from syscat.indexes"

      浣跨敤璇彞db2 describe indexes for  table MOBILE.TFCREGISTERINF鍙互鏌ョ湅鍒拌〃绱㈠紩鎻忚堪
      鍒涘缓绱㈠紩
      CREATE INDEX JOB_BY_DPTON on EMPLOYEE (WORKDEPT, JOB)

      DB2绱㈠紩鍒涘缓閮藉簲璇ュ摢浜涘師鍒欏憿锛熻繖鏄緢澶氫汉閮芥彁鍒扮殑闂锛屼笅闈㈠氨涓烘偍璇︾粏浠嬬粛DB2绱㈠紩鍒涘缓鍘熷垯锛屼緵鎮ㄥ弬鑰冨涔犮

DB2绱㈠紩瀹炵幇鏄竴涓狟+鏍戯紝閫氳繃绱㈠紩鍙互瀹炵幇蹇熸煡璇紝閬垮厤鍏ㄨ〃鎵弿浠ユ鏉ュ噺灏慖O鎿嶄綔銆

绱㈠紩鏄琛ㄦ暟鎹殑涓绉嶆娊璞★紝閫氳繃鎶藉彇鏈夐檺鏁版嵁锛屽鏁版嵁鐨勫垎甯冭繘琛岃绠楋紝浠ユ鏉ュ畬鎴愬鏁版嵁鐨勫揩閫熸绱

绱㈠紩鍒涘缓璇彞

CREATE INDEX <INDEX_NAME> ON <TABLE_NAME> (<COLNAME1,COLNAME2鈥>)
鍒涘缓绱㈠紩闇瑕佹敞鎰忕殑鍦版柟锛

绱㈠紩搴旇鐢ㄦ潵鎻愰珮鏌ヨ閫熷害锛屼絾鏄細瀵规洿鏂板拰鍒犻櫎鎿嶄綔甯︽潵璐熼潰褰卞搷锛屽洜涓鸿鍚屾鏇存柊绱㈠紩銆傛墍浠ョ储寮曞簲璇ュ垱寤哄埌鏇存柊銆佸垹闄ょ浉瀵规瘮璇诲彇灏戠殑琛ㄤ笂銆

绱㈠紩闇瑕佺嫭绔嬬殑绌洪棿杩涜瀛樺偍鍜岀鐞嗐傜储寮曟槸闇瑕佺鐩樼┖闂存潵瀛樺偍銆傛墍浠ラ伩鍏嶉噸澶嶅垱寤哄啑浣欑储寮曘傚涓:

鈥淐REATE TABLE TEST_IDX (COL1 INT NOT NULL, COL2 INT NOT NULL, COL3 IN NOT NULL)鈥濃淐REATE INDEX TEST_IDX_IDX1 ON TEST_IDX (COL1, COL2, COL3)鈥
宸茬粡鏈夌储寮昑EST_IDX_IDX1鍦ㄤ笁涓垪涓婏紝鍦ㄥ垱寤衡滳REATE INDEX TEST_IDX_IDX2 ON TEST_IDX (COL1, COL2)鈥濓紝杩欐牱鐨勭储寮曚竴鑸病鏈変粈涔堜綔鐢ㄣ

绱㈠紩鐢ㄦ潵閬垮厤琛ㄦ壂鎻忋傞氳繃绱㈠紩瀵瑰ぇ閲忔暟鎹娊鍙栨湁闄愰儴鍒嗭紝褰㈡垚涓涓浉瀵瑰皯閲忕殑鏈夊簭鏁版嵁缁撴瀯锛岄氳繃瀵规湁搴忔暟鎹粨鏋勭殑鏌ユ壘鍙互蹇熸兂瑕佹煡鎵剧殑鏁版嵁銆傛墍浠ョ储寮曢傚悎寤虹珛鍦ㄦ暟鎹噺姣旇緝澶х殑琛ㄤ笂锛岃屼笖璇ヨ〃涓婄殑鏌ヨ缁忓父鏄牴鎹潯浠舵煡璇㈤儴鍒嗘暟鎹傛瘮濡備竴浜涚郴缁熷熀纭琛紝濡係YSTEM琛紝杩欎簺琛ㄦ暟鎹噺灏忥紝鑰屼笖缁忓父鏄煡璇㈠叏閮ㄦ暟鎹紝鎵浠ヨ繖浜涜〃涓婂缓绔嬬储寮曞鎬ц兘鐨勫奖鍝嶄笉鏄緢澶э紝瀹屽叏鍙互閬垮厤锛屼互鍏嶅绠＄悊閫犳垚褰卞搷銆

鍒涘缓绱㈠紩鐨勭洰鐨勮繕鏈変竴涓氨鏄繚璇佹暟鎹敮涓鎬э紝鍙互鍒╃敤鈥滳REATE UNIQUE INDEX <INDEX_NAME> ON <TABLENAME> (<COLNAME>)鈥濓紝鏉ュ畬鎴愩

涓婚敭浼氶殣寮忓垱寤虹储寮曪紝鎵浠ヨ涓嶈鍦ㄤ富閿笂鍒涘缓绱㈠紩娴垂绌洪棿銆

灏介噺鍑忓皯绱㈠紩鐨勫垱寤恒侱B2璺緞璁块棶浼樺寲鍣ㄤ細鏍规嵁琛ㄤ腑鎵鎻愪緵鐨勭储寮曟潵瀹屾垚灏藉彲鑳藉鐨勮闂矾寰勭殑鎴愭湰浼拌銆傚垱寤鸿繃澶氱殑绱㈠紩鎰忓懗鐫DB2浼樺寲鍣ㄧ敓鎴愭洿澶氱殑璁块棶璺緞锛屽畬鎴愭洿澶氱殑璁块棶璁″垝鎴愭湰浼扮畻锛岃繖浼氬鍔燬QL璇彞缂栬瘧鏃堕棿銆

鍒涘缓鍞竴绱㈠紩鍙互閬垮厤鎺掑簭銆傚洜涓虹储寮曟槸鏈夊簭鏁版嵁缁撴瀯锛屽湪杩涜鎵弿鏃讹紝DB2浼氶粯璁ゆ寜鐓ч『搴忚緭鍑虹粨鏋滐紝鑰屼笉鏄寜鐓ф彃鍏ュ厛鍚庛傞氳繃鍒涘缓鍞竴绱㈠紩鍙互閬垮厤鎺掑簭锛屾彁楂樻煡璇㈡ц兘銆

鍏锋湁澶ч噺閲嶅鏁版嵁鐨勫垪涓婁笉瑕佸垱寤虹储寮曘傚湪澶ч噺閲嶅鐨勫垪涓婂垱寤虹储寮曟病鏈変换浣曟剰涔夈傚涓嬫暟鎹粨鏋勶細琛ㄤ腑瀛楁col1鏈夊ぇ閲忛噸澶嶆暟鎹紝鍏朵腑鐨勬暟鎹垎甯冩槸鎸夌収90%鐨刌锛屽拰10%鐨凬鏉ュ垎甯冦傝繖鏍风殑鍒椾笂鍒涘缓绱㈠紩娌℃湁浠讳綍鎰忎箟銆傚湪鏌ヨ鏉′欢涓篶ol1=鈥榊鈥欐椂锛岃琛ㄧ殑绱㈠紩鎵弿鍜岃〃鎵弿娌℃湁鐗瑰ぇ宸紓銆傛牴鎹疄璺电粡楠岋紝鍒椾笂鐨勬暟鎹垎甯冨簲璇ュ潎鍖锛屽苟涓旀娊瀵嗗害涓嶈兘澶т簬5 鈥般

鍒涘缓濡備笅琛細

鈥淐REATE TABLE TEST1 (NO INT NOT NULL, NAME CHAR(5))鈥

鈥淐REATE INDEX TEST1_IDX_1 ON TEST1 (NO)鈥

鈥淚NSERT INTO TEST1 SELECT ROW_NUMBER() OVER(), CHR(INT(RAND()*75+48))||CHR(INT(RAND()*75+48))||CHR(INT(RAND()*75+48)) FROM SYSCAT.COLUMNS T1 JOIN SYSCAT.COLUMNS T2 ON T1.COLNAME!=T2.COLNAME FETCH FIRST 100 ROWS ONLY鈥

鈥淪ELECT * FROM TEST1 WHERE NO = 50鈥



DB2绱㈠紩浼樺寲
绱㈠紩铏界劧鑳藉澶уぇ鎻愬崌鏌ヨ鏁堢巼锛屼絾鏄苟涓嶆槸瀵规墍鏈夋煡璇㈤兘閫傜敤鐨勩傛瘮濡傚浜庘淪elect * From account where balance != 500鈥濊繖鏍风殑璇彞锛宐alance鍒椾笂鐨勭储寮曞熀鏈笂鏄棤鏁堢殑銆傦紙杩欐槸寰堝ソ鐞嗚В鐨勶紝鈥滀笉绛変簬鈥濆湪B+鏍戠储寮曚腑鎬庝箞鑳芥煡鎵惧憿锛燂級
鎴戜滑鎶婃煡璇㈣鍙ヤ腑Where鍚庨潰鐨勮〃杈惧紡绉颁负璋撹瘝銆侱B2涓皳璇嶈兘鍚︿娇鐢ㄧ储寮曠殑鎯呭喌鍒楄〃濡備笅锛


SELECT TABNAME FROM SYSCAT.TABLES WHERE TBSPACE='表空间名';

db2p搜索d -d 数据库名 -tablespace 在现实结果中如下就是 AS是automaitc storage自动存储的缩写，AR是autoresize的缩写 AS是yes证明表空间是自动存储的 AR是yes证明表空间是自动扩展的
statistics
AS AR
YES NO

系统管理的空间（SMS）和数据库管理的空间（DMS）是DB2数据库中两种类型的基本表空间。
与 SMS 表空间相关联的容器是文件系统目录，而这些目录中的文件会随着表空间中对象的增长而增长。文件会增加至达到其中一个容器上的文件系统限制或达到数据库的表空间大小限制。
DMS 表空间由文件容器或原始设备容器组成，它们的大小是在将容器指定给表空间时设置的。当容器中的所有空间都已被使用时，则认为表空间已满。但是，与 SMS 不同，您可以使用 ALTER TABLESPACE 语句来添加或扩展容器，从而允许将更多的存储器空间提供给表空间。DMS 表空间还具有称为“自动调整大小”的功能。当可以自动调整大小的 DMS 表空间中的空间被消耗时，DB2 数据库系统可能回扩展一个或多个文件容器。SMS 表空间具有类似于自动增长的功能但术语“自动调整大小”专门用于 DMS。
启用和禁用自动调整大小（AUTORESIZE）
缺省情况下，不会对 DMS 表空间启用自动调整大小功能。下列语句创建不启用自动调整大小功能的 DMS 表空间：
CREATE TABLESPACE DMS1 MANAGED BY DATABASE
     USING (FILE '/db2files/DMS1' 10 M)要启用自动调整大小功能，将 AUTORESIZE YES 子句指定为 CREATE TABLESPACE 语句的一部分：
CREATE TABLESPACE DMS1 MANAGED BY DATABASE
     USING (FILE '/db2files/DMS1' 10 M) AUTORESIZE YES在已创建 DMS 表空间之后，还可以通过在 ALTER TABLESPACE 语句上使用 AUTORESIZE 子句来启用或禁用自动调整大小功能：
ALTER TABLESPACE DMS1 AUTORESIZE YES
   ALTER TABLESPACE DMS1 AUTORESIZE NO有两个其他属性（MAXSIZE 和 INCREASESIZE）与自动调整大小的表空间相关联。


要看你的表空间是系统管理还是数据库管理，系统管理的是自动增长的，数据库管理的表空间是要指定大小的。
系统管理：SMS
数据库管理：DMS

reorg 前提删除了大量数据，一般情况是能释放出空间出来的，但也有可能空间不但没释放反而还是增大空间，用db2dart看看高水位吧

reorg table schema.tablename;
runstats on table schema.tablename;


查了一下资料，可以通过修改database_memory系统参数来设置数据库内存的使用。默认情况下database_memory的设置是AUTOMATIC，这里可以通过下面的命令来修改参数，修改完后要重新启动db2


tar -czvf压
tar -zxvf 解
[plain] view plain copy 在CODE上查看代码片派生到我的代码片
$ db2 update db cfg for <db> using database_memory 8000000
$ db2stop force
$ db2start

# Linux 下 取进程占用 cpu 最高的前10个进程
ps aux|head -1;ps aux|grep -v PID|sort -rn -k +3|head


# linux 下 取进程占用内存(MEM)最高的前10个进程

ps aux|head -1;ps aux|grep -v PID|sort -rn -k +4|head
使用命令看看你的数据库用了多少内存：
$db2 get dbm cfg |grep -i memory

# db2mtrk -i -d -v
Tracking Memory on: 2014/06/22 at 21:50:19

Memory for instance

 Other Memory is of size 63111168 bytes
 FCMBP Heap is of size 851968 bytes
 Database Monitor Heap is of size 983040 bytes
 Total: 64946176 bytes

Memory for database: PA913

 Backup/Restore/Util Heap is of size 65536 bytes
 Package Cache is of size 262144 bytes
 Other Memory is of size 196608 bytes
 Catalog Cache Heap is of size 262144 bytes
 Buffer Pool Heap (1) is of size 24465047552 bytes
 Buffer Pool Heap (System 32k buffer pool) is of size 1835008 bytes
 Buffer Pool Heap (System 16k buffer pool) is of size 1572864 bytes
 Buffer Pool Heap (System 8k buffer pool) is of size 1441792 bytes
 Buffer Pool Heap (System 4k buffer pool) is of size 1376256 bytes
 Shared Sort Heap is of size 0 bytes
 Lock Manager Heap is of size 3881172992 bytes
 Database Heap is of size 94830592 bytes
 Application Heap (47) is of size 131072 bytes
 Application Heap (45) is of size 65536 bytes
 Application Heap (44) is of size 65536 bytes
 Application Heap (43) is of size 65536 bytes
 Application Heap (42) is of size 65536 bytes
 Application Heap (41) is of size 65536 bytes
 Application Heap (40) is of size 65536 bytes
 Application Heap (39) is of size 65536 bytes
 Application Heap (38) is of size 65536 bytes
 Application Heap (37) is of size 65536 bytes
 Application Heap (36) is of size 65536 bytes
 Application Heap (35) is of size 65536 bytes
 Application Heap (34) is of size 65536 bytes
 Application Heap (33) is of size 65536 bytes
 Application Heap (32) is of size 65536 bytes
 Application Heap (31) is of size 65536 bytes
 Application Heap (30) is of size 65536 bytes
 Application Heap (29) is of size 65536 bytes
 Application Heap (28) is of size 65536 bytes
 Application Heap (27) is of size 65536 bytes
 Application Heap (26) is of size 65536 bytes
 Application Heap (25) is of size 65536 bytes
 Application Heap (24) is of size 65536 bytes
 Application Heap (23) is of size 65536 bytes
 Application Heap (22) is of size 65536 bytes
 Application Heap (21) is of size 65536 bytes
 Application Heap (20) is of size 65536 bytes
 Application Heap (19) is of size 65536 bytes
 Application Heap (18) is of size 65536 bytes
 Application Heap (17) is of size 65536 bytes
 Application Heap (16) is of size 65536 bytes
 Application Heap (15) is of size 65536 bytes
 Application Heap (14) is of size 65536 bytes
 Application Heap (13) is of size 65536 bytes
 Application Heap (12) is of size 65536 bytes
 Application Heap (11) is of size 196608 bytes
 Application Heap (10) is of size 65536 bytes
 Application Heap (9) is of size 65536 bytes
 Application Heap (8) is of size 65536 bytes
 Application Heap (7) is of size 131072 bytes
 Applications Shared Heap is of size 393216 bytes
 Total: 28451340288 bytes

其中重点是“Memory for database: PA913”下的“Buffer Pool Heap (1) is of size 24465047552 bytes”，用了近25G的内存，由于我确定我的数据库中的数据量不是很大，所以减少数据库内存就是我的首选了。

查了一下资料，可以通过修改database_memory系统参数来设置数据库内存的使用。默认情况下database_memory的设置是AUTOMATIC，这里可以通过下面的命令来修改参数，修改完后要重新启动db2

$ db2 update db cfg for <db> using database_memory 8000000
$ db2stop force
$ db2start

数据库重启后，先用客户端连接一下数据库，然后再使用“db2mtrk -i -d -v”查看内存使用情况，就发现内存就会有明显的下降。用top查看结果也类似。

在真实的DB2使用情况下，修改这个值是需要慎重的，可以参考下面列出的参考资料。


select basi.ID,basi.RULE_ID,basi.ALERT_DATE,basi.CUSTOM_ID,basi.OPER_TIME,rule.DISPLAY_NAME,1 as operStatus
from ALERT_BASICINFO basi join XT_RULE_MAIN rule on basi.RULE_ID = rule.id and send_type='1'
where basi.alert_date >='2016-10-27' and basi.alert_date <='2016-10-27'
and   exists ( select * from ALERT_GL_BASIC_DETAIL detail left join ALERT_FLOW_INFO flow on detail.DETAIL_ID = flow.DETAIL_ID
where detail.BASICINFO_ID = basi.id and flow.PERUSE_STATE = 0 );

select * from ALERT_FLOW_INFO flow where exists(select * from ALERT_GL_BASIC_DETAIL detail join ALERT_BASICINFO basi on detail.BASICINFO_ID = basi.id
where detail.DETAIL_ID = flow.DETAIL_ID and basi.id='20071102009800124306320161026165435');
1.1   检查管理相关服务

RHCS的包括4个服务，按照启动顺序依次是：ccsd、cman、fenced、rgmanager。可以使用service命令启停这些服务或查看状态。（service service_name start/stop/status）
集群中有两个服务，数据库和FTP。数据库服务包括VIP、 文件系统、 db2run脚本三个资源。这些可以查看集群配置文件 /etc/cluster/cluster.conf。
在图形界面下，使用 system-config-cluster 启动集群管理工具 。在命令行下，使用clustat命令可以查看集群状态；使用clusvcadm命令可以启动、切换服务。

list command options
db2 update command options using c off

向表中增加一个 VARCHAR 列：
ALTER TABLE distributors ADD COLUMN address VARCHAR(30);

用ps命令查看是否有db2sysc后台进程

 ＃ps -ef | db2sysc

?  检查数据库服务器是否可以通过网络访问
相关命令：ping 10.7.63.202
                  telnet 10.7.63.202 60000
                  db2 connect to ddn user db2inst （使用db2inst用户）



?  平台服务器重启后需要启动的服务汇总如下：
web1、2服务器:

service tomcat start  启动tomcat服务

service turbomq start  启动turbomq服务

/usr/local/GETGPSMaile/run.sh  启动获取里程数服务

可用ps -ef  | grep java进行查看是否彻底关闭

lvs服务器无需单独启服务，随开机即可启动相关服务

?  手动挂载相关资源操作
如果RHCS集群出现异常，无法启动或切换数据库服务，可以通过手工方式挂载相关资源。但此时这些资源已经脱离集群软件的管理，集群状态恢复正常后，应同样通过手工方式卸载这些资源，再使用集群管理工具启动服务。

 littleNoPwdContract

(1) 卸载失败节点上的资源



登陆出现故障的服务器，检查集群资源状态。



检查数据库实例是否已经停止（ps -ef | grep db2sysc），如未停止以db2inst用户执行db2stop命令；

检查文件系统是否已经卸载（df -h），如未卸载以root用户执行 umount 命令；

检查VIP是否已经解除绑定（ifconfig），如未解绑以root用户执行 ifconfig eth0:1 down 命令。



如果部分资源无法卸载，考虑在适当时候重启故障服务器。



(2) 在可用节点上挂载资源



登陆状态正常的服务器，以root用户执行如下命令：



绑定VIP：ifconfig eth0:1 10.7.63.202 netmask 255.255.255.128 up

挂载文件系统：mount /dev/sdb1 /mnt/data

启动数据库：su - db2inst

            db2start



(3) 检查数据库状态



在WEB服务器上以db2inst用户执行如下命令：



连接数据库：db2 connect to ddn user db2inst 命令

查询表中的数据：db2 “select * from mbl_device fetch first 1 rows only”


1.2   检查DB2实例是否已经启动

用ps命令查看是否有db2sysc后台进程

＃ps -ef | db2sysc


..
也可以以DB2实例所有者登录，通过发出db2start命令来确保启动了实例（如果实例已经启动，则会告知SQL1026N  数据库管理器已激活；否则，将把实例启动起来）



1.3   查看表空间状态是否正常

以db2实例所有者登录
#db2 conn to ddn
#db2 list tablespaces show detail        //在单分区上查看表空间的状态,正常返回0x0000
# db2_all list tablespaces show detail    //在所有分区上查看表空间的状态

可以使用LIST TABLESPACES 命令确定连接数据库中表空间的当前状态，可以使用SHOW DETAIL选项查看表空间的详细信息。比如，我们连上SAMPLE数据库，执行list tablespaces show detail ，可以看到状态返回值是0x0000，此时，使用db2tbst可以查看状态编号对于的状态含义，具体语法如下：

db2tbst   可以查看编号所代表的状态

db2tbst 命令接收十六进制的状态值，并返回相应的表空间状态。例如，命令 db2tbst 0x0008 返回 State = Load Pending 。而该十六进制的状态值反过来又是 LIST TABLESPACES 命令输出的组成部分。表空间的外部可见状态是由单个状态值的十六进制总和构成的。例如，如果表空间的状态是 Backup Pending和 Load in Progress，那么所返回的十六进制值就是 0x20020（0x00020 + 0x20000）

1.4   与表有关操作

?  显示与MBL_ME匹配的所有表：
#db2 list tables | grep MBL_ME
?  查看MBL_MESSAGE表结构：
#db2 discribe table MBL_MESSAGE
?  显示表中所有数据：
#db2 "select * from MBL_MESSAGE"
?  显示MBL_MESSAGELOG表中前n行数据内容：
#db2 "select * from MBL_MESSAGELOG fetch first n rows only"
?  导出表和删除表操作：
例如：将mbl_messagelog_1127表中的数据导出为.del格式的文件
      db2 export to mbl_messagelog_1127.del of del select * from mbl_messagelog_1127"
      删除mbl_messagelog_1127表及包含的数据
      db2 drop table mbl_messagelog_1127
1.5   查看磁盘空间

#df -h

1.6   检查配置文件信息

su – db2inst
db2 connect to ddn

显示DB2配置文件中与数据库ddn有关所有信息：

【db2inst@db1 ~】db2 get db cfg for ddn show detail|more

查看DB2配置文件，过滤出log的配置信息：

【db2inst@db1 ~】db2 get db cfg for ddn show detail | grep -i log

1.7   数据库备份与恢复操作

1.备份方式

集团业务接入平台业务系统已经上线运行两年多，数据量12GB左右，数据库容器总大小15GB，数据库使用档案日志记录，可以进行在线备份。
目前采用在线全量备份的方式来备份整个数据库，在发生灾难性故障时，使用备份文件和日志文件可以进行时间点恢复，将数据库恢复到故障发生的前一刻。

2.备份策略

目前，数据库每天凌晨两点进行一次全量备份，备份文件存放在本地硬盘，保留最近两天的备份。备份完成后，将备份文件传送到磁带机，保留最近50天的备份。这样既保证数据库备份文件异地存放，又实现了充分冗余。

3.备份的实现

数据库的定期自动备份是通过操作系统cron程序定期执行备份脚本db2mbk-master来实现的。该脚本包括如下功能：

(1) 在线全备ddn数据库。
(2) 将备份文件tar到磁带中。
(3) 删除两天以上的旧备份文件。
(4) 将每项操作的时间、结果记录到备份日志中。
(5) 自动清理备份日志。

4.备份的检查

检查数据库的备份情况需要在服务器db1.db2.com上进行，包括以下内容：

(1) 检查备份文件是否生成

备份文件存放在 /home/db2inst/db2backup/backup 目录下，文件名称类似DDN.0.db2inst.NODE0000.CATN0000.20091109164735.001，正常情况下该目录下应该有最近两天生成的两个备份文件。

(2) 检查备份过程是否正常

备份日志存放在 /home/db2inst/db2exec/log 目录下，日志文件名为backup.log。每天备份脚本执行过程中会在备份日志中记录备份数据库、tar备份文件到磁带、删除旧备份文件等操作的起止时间与结果，可以通过这些记录确定备份是否正常进行。

(3) 检查本地磁盘空间

备份目录位于本地磁盘的根分区，假设备份文件的大小为n GB，那么该分区的剩余空间最好大于2n GB，最少也要大于n+2 GB。

(4) 检查备份文件是否tar到磁带
通过 tar -tvf /dev/st0 命令查看磁带的内容，确认显示结果中有最新的备份文件。当磁带中的备份文件较多时，这个操作可能花费很长时间。
检查备份配置文件情况：
【db2inst@db1 ~】$ crontab -l
备份文件存放目录：
【db2inst@db1 ~】$ cd db2exec/bin
检查备用数据库服务器数据库运行是否正常：
 备用服务器：db2 connnect to db2
             Db2 list tables
             Db2 “select count(*) from mb1_device”
用集群管理工具将数据库服务切换到备用DB服务器：
Clusvcadm –r <服务名>  -m <成员名>
进行数据库的RESTORE恢复（如果出现SQL0322N错误，则修改DB2CODEPAGE参数，然后重新执行restore命令）：
主服务器db1:  db2 restore db ddn from /home/db2inst/ddnback taken at <备份文件时间戳> to /mnt/data     例如：db2set db2codepage=819
进行数据库的ROLLFORWARD恢复：
主服务器db1:    db2  rollforward db ddn to end of logs and stop
测试数据库状态：
主服务器： db2 connect to db2
           然后 db2 list tables
           然后 db2”select count(*) from mb1_device”
           然后 db2set db2codepage=1386
1.8   检查归档日志相关操作

请确保活动日志目录下没有的日志文件都已经正确归档到了带机上(查看TSM或第三方存储管理软件)。



归档日志配置文件参数及说明：

【db2inst@db1 SQLOGDIR】

su – db2inst

db2 connect to ddn

db2 get db cfg for ddn show detail | grep –i log

LOGRETAIN             RECOVERY

USEREXIT               ON

LOGARCHMETH1    RECOVERY

如果userexit为ON，但是LOGARCHMETH1相同，查看目录和链接 /home/db2inst/db2exec/bindb2mbk-master



如果LOGARCHMETH1为DISK:/archlog，则DB2会自动将归档日志归档到目录/archlog下

db2 “update db cfg for ddn using logarchmeth1 DISK:/archlog”



如果需要更改参数，执行更新命令：

db2 update db cfg for ddn using 参数名     参数值

如果更改参数生效，需要重新启动DB2连接

db2 force application all

db2 list applications



如果应用无法停止，重新启动DB2

db2 force application all

db2stop

db2start

1.9   扩容表空间

DB2现有表空间扩容方法
db2 list tablespaces show detail

1）直接添加一个容器的例子：
db2 " ALTER TABLESPACE PAYROLL ADD (DEVICE '/dev/rhdisk9' 10000) "
加容器之后DB2会有一个自动balance的过程,可能会持续几个小时!!!
2）改变现有容器的大小(该方法不会触发balance,但如果表空间建立在裸设备上,则要扩冲裸设备空间):
db2 " ALTER TABLESPACE TS1 RESIZE (FILE '/conts/cont0' 2000, DEVICE '/dev/rcont1' 2000, FILE 'cont2' 2000) "
注意这种方式就是将原有的相应容器都改成大小是2000页
db2 "ALTER TABLESPACE TS1 RESIZE (ALL 2000)"
这种方式就是把表空间中所有的容器大小都改成2000页
db2 " ALTER TABLESPACE TS1 EXTEND (FILE '/conts/cont0' 1000, DEVICE '/dev/rcont1' 1000, FILE 'cont2' 1000) "
这种方式就是将相应的容器都扩大1000页，也就是增加1000页。
db2 " ALTER TABLESPACE DATA_TS EXTEND (ALL 1000)"
这种方式就是将所有的容器都增加1000页。
db2 " ALTER TABLESPACE USERSPACE1 EXTEND (ALL 100)"
DB2日常维护月操作
1、        日志清理相关操作

检查第一活动日志：
[db2inst@db1 SQLOGDIR]$db2 get db cfg | grep “First active”
    清理日志文件时只能清理第一活动日志之前的日志；
请至少每月查看一次db2diag.log文件，看其中是否有异常。

相关日志清理操作

无论采用哪种措施，都要先确定目前的活动日志。使用db2inst用户执行以下操作：

(1) 连接数据库：db2 connect to ddn
(2) 查看日志文件目录：db2 get db cfg | grep "Path"
(3) 查看第一活动日志：db2 get db cfg | grep "First active"

注意：第一活动日志及其以后的日志（序号更高的）为数据库的活动日志，不能进行移动、压缩、删除等操作，否则将造成数据库故障。

    然后，请根据数据库日志文件保留时间的相关规定确定要进行处理的日志文件范围。建议至少保留60天以内的日志文件，并且不要进行压缩操作，以免损坏日志文件。


    下面介绍对日志文件进行压缩和删除的方法。执行操作前请先用如下命令确认操作的日志文件：

    find -name '*.LOG' ! -newer | more

    其中，-newer 指定find命令查找最后修改时间比某个日志文件新的所有日志文件，而在前面加上 ! 取反，则返回比该日志文件旧的所有日志文件及其本身。
    可以使用如下命令确定符合条件的日志文件的数量：

    find -name '*.LOG' ! -newer | wc -l


    如果考虑压缩陈旧的日志文件，可参考如下方法：

  a.直接压缩日志文件

    在日志文件目录下执行命令：find -name '*.LOG' ! -newer -exec gzip {} \;

  b.将日志文件打包后压缩：目前存在/mnt/data/db2logbak/

    在日志文件目录下执行命令：find -name '*.LOG' ! -newer | xargs tar -zcvf log_bak_20100402_1.tar.gz
    然后，再将这些日志文件删除，方法稍后说明。


    如果考虑删除陈旧的日志文件，可参考如下方法：

  a.使用操作系统命令直接删除

    在日志文件目录下执行命令：find -name '*.LOG' ! -newer -exec rm {} \;

  b.使用数据库命令进行清除

    执行命令：db2 prune logfile prior to S0003270.LOG
    该命令会清除S0003270.LOG之前所有的在线档案日志文件（不包括S0003270.LOG本身）。


2、        检查备份和日志是否都保存好了

通过 tar -tvf /dev/st0 命令查看磁带的内容，确认显示结果中有最新的备份文件。当磁带中的备份文件较多时，这个操作可能花费很长时间。

DB2日常维护季度操作
1、        通过快照监控器，查看系统性能如何

通过快照监控器，抓取数据库的信息，分析数据库性能是否合理：

# db2 get snapshot for all on 数据库名 > log.txt

2、        数据库补丁级别

# db2level

注意事项
1、        不要删除活动日志文件0

DB2 的活动日志文件不能被删除。一旦 DB2 的活动日志文件被删除，或者所在的存储设备出现问题，则不可避免地造成 DB2 数据库系统宕机。

2、        注意交易日志存储空间

在归档日志模式下，如果没有使用自动归档方式，则存储的日志文件会不断增多，有可能造成日志所在的文件系统空间满。 当这种情况发生时，会根据参数 BLK_LOG_DSK_FUL 的配置而有不同的现象：

1）如果该参数启用，则 DB2 数据库可继续读操作，但是写操作会挂起

2）如果该参数没有启用，则 DB2 数据库会停止工作



两种情况下，都需要到日志所在的文件系统添加了空间才恢复正常。



3、        按照系统的实际工作量配置日志空间

DB2数据库通过日志文件维护数据的完整性和一致性。DB2 数据库的日志空间可通过如下公式计算：
日志空间 = （主日志文件 + 二级日志文件） * 日志文件尺寸

其中：
1） 主日志文件由参数 LOGPRIMARY 控制，
2） 二级日志文件由参数 LOGSECOND 控制
3） 日志文件尺寸由参数 LOGFILSIZ 控制
4） LOGPRIMARY + LOGSECOND < 256 （不同的 DB2 版本略有不同，请参看相同版本的 DB2 手册确认）
4、        检查许可证（License）安装情况

许可证过期会造成不必要的服务中断，所以在 DB2 安装完毕后，建议检察许可的安装情况
5、        创建数据库前调整好系统时间

在数据库创建好之后，调整系统时间会造成数据库内部时间戳的异常。数据库中一些对象和时间相关，一旦时间不准确要调整需要很小心。错误的时间调整可能会造成很多问题，如：
1）某些对象失效，例如 ：
SQL0440N，找不到具有兼容自变量的类型为 “<例程类型>” 的名为  “<例程名>” 的已授权例程
2）数据库日志逻辑错误 -> 宕机
3）常见错误 – 只调整时间，未调整时区
6、        不要随便执行 chown (chmod) –R （UNIX/Linux）

在实例目录下chown (chmod) -R 会造成

1）  在数据库服务器上 db2 connect to 能连接上数据库

2）  db2 connect to user ... using ...连接不上

附：常用表空间扩容方法
DB2现有表空间扩容方法
db2 list tablespaces show detail

1）直接添加一个容器的例子：
db2 " ALTER TABLESPACE PAYROLL ADD (DEVICE '/dev/rhdisk9' 10000) "
加容器之后DB2会有一个自动balance的过程,可能会持续几个小时!!!
2）改变现有容器的大小(该方法不会触发balance,但如果表空间建立在裸设备上,则要扩冲裸设备空间):
db2 " ALTER TABLESPACE TS1 RESIZE (FILE '/conts/cont0' 2000, DEVICE '/dev/rcont1' 2000, FILE 'cont2' 2000) "
注意这种方式就是将原有的相应容器都改成大小是2000页
db2 "ALTER TABLESPACE TS1 RESIZE (ALL 2000)"
这种方式就是把表空间中所有的容器大小都改成2000页
db2 " ALTER TABLESPACE TS1 EXTEND (FILE '/conts/cont0' 1000, DEVICE '/dev/rcont1' 1000, FILE 'cont2' 1000) "
这种方式就是将相应的容器都扩大1000页，也就是增加1000页。
db2 " ALTER TABLESPACE DATA_TS EXTEND (ALL 1000)"
这种方式就是将所有的容器都增加1000页。
db2 " ALTER TABLESPACE USERSPACE1 EXTEND (ALL 100)"
附：归档日志相关知识
db2日志保存的两种方式：循环日志和归档日志
循环日志：
在任何情况下都不能删除循环日志，如果删除数据库就会出错。
如果出错了，只能用备份做恢复，如果没有做备份，那么只有找IBM官方来帮做一个连接
然后你export出数据，然后再重建数据库。据说这个还是要在你买了PPA的情况下才提供
的服务内容。
归档日志：
归档日志中的活动日志部份是不能删除的，如果删除结果同循环日志被删除的情况。
归档日志中的已归档日志是可以删除的，但删除了以后你可能就没法做一些前滚操作了。数据库备份的恢复涉及备份文件和日志
归档日志相关知识：
将LOGRETAIN设置为ON后，数据库将支持前滚恢复。此时，系统中将会存在三种类型的日志文件:
活动日志:该日志包含尚未提交或回滚的事务单元的相关信息，以及已提交但尚未写入数据库文件的事务的信息。
联机存档日志:活动日志中所有改动对正常处理已不需要，即该日志中所记录的事务都已提交并写入数据库文件时，该活动日志转换为联机存档日志。称之为联机，是由于它们与活动日志存放在同一个目录下。
脱机存档日志:将联机存档日志从活动日志目录下Copy到另外的地方存档，就称为脱机存档日志。这些日志可能在数据库前滚恢复的时候仍然需要。
管理数据库日志的工作可以手工完成(即将联机存档日志手工拷贝到某个archive目录)，也可由编写USEREXIT程序自动维护。
由于DB2对所有平台都提供了相应的USEREXIT示例程序，而且非常易于修改和使用，所以IBM建议用户使用USEREXIT程序来管理日志文件。
使用USEREXIT程序的方法
要使用User exit program自动化log文件的archiving和retrieval过程:
1.  设置database cfg参数logarchmeth1 为USEREXIT。
connect to ddn
update db cfg using logarchmeth1 USEREXIT
随后操作可参考>>1.8 检查归档日志相关操作


附：使用 CLP 捕获数据库运行状况快照
可从 CLP 使用 GET HEALTH SNAPSHOT 命令来捕获运行状况快照。该命令语法支持检索运行状况监视器监视的不同对象类型的运行状况快照信息。
先决条件
必须具有实例连接才能捕获运行状况快照。如果没有实例连接，则创建缺省实例连接。要获取远程实例的快照，必须先连接至该实例。
过程
要使用 CLP 捕获数据库运行状况快照
从 CLP 发出带有期望参数的 GET HEALTH SNAPSHOT 命令。
在以下示例中，将在启动数据库管理器之后立即捕获数据库管理器级别运行状况快照。
db2 get health snapshot for dbm

对于分区数据库系统，可为特定分区捕获专门的数据库快照，或者为所有分区捕获全局的数据库快照。要对特定分区（如分区号 2）上的数据库捕获运行状况快照，请发出以下命令：
db2 get health snapshot for db on sample at dbpartitionnum 2
要对所有分区上的所有应用程序捕获数据库快照，请发出以下命令：
db2 get health snapshot for db on sample global
以下命令捕获的运行状况快照带有附加详细信息，包括公式、附加信息和运行状况指示器历史记录：
db2 get health snapshot for db on sample show detail

对于基于集合状态的运行状况指示器，可对所有集合对象捕获数据库快照，而不考虑这些对象的状态。常规 GET HEALTH SNAPSHOT FOR DB 命令返回所有集合对象，这些对象需要针对所有基于集合状态的运行状况指示器的警报。
要对列示了所有集合对象的数据库捕获运行状况快照，请发出以下命令：
db2 get health snapshot for db on sample with full collection

查看端口netstat -aon|findstr "111"
tasklist|findstr "111"

du -m * 查看当前目录文件大小mb
find . -size 10000k 查找当前目录大于10mb的
新增主键
alter table trade_flow_info add constraint  PK_FXJK PRIMARY KEY (TRADE_ON_UUID);
 alter table table_name drop primary key (col)

创建db2 实例和创建库的方法大致分为两类！一类是图形界面db2setup 创建一种是CLI创建！此处只描述一下CLI方式至于图形界面请大家搜索一下吧！
db2 创建实例 创建数据库
1.创建实例用户
mkdir /db2/db2test 创建实例用户目录
smitty user
选择Add a User
* User NAME                                          [db2test]
User ID                                                   []
ADMINISTRATIVE USER?                       false
Primary GROUP                                     [db2iadm1]
Group SET                                           [staff]
ADMINISTRATIVE GROUPS                   []
ROLES                                                         []
Another user can SU TO USER?            true
SU GROUPS                                          [ALL]
HOME directory                                     [/db2/db2test]
Initial PROGRAM                                    [/usr/bin/ksh]

2.创建实例 DB2_install=/usr/opt/db2_08_01/instance
./db2icrt -u db2test db2test

3.创建数据库
su - db2test
db2start     #此处不执行启动实例将报:SQL1032N No start database manager command was issued. SQLSTATE=57019
db2 create db db2test

4.删除数据库
db2 drop db db2test
db2stop

5.删除实例
cd DB2_install
./db2idrop -f db2test # -f参数一定要添加否则删除完了会报错！

6.删除用户
smitty user
选择Remove a User
* User NAME                                          [db2test]                                                           +
Remove AUTHENTICATION information?                  yes
删除用户目录
rm -rf db2test


df -B 1g
1、查看数据库页大小
db2 get db cfg
2、收集表状态信息
db2 runstats on table schema.table_name
3、查询数据表占用页的数量
select tabname, npages from syscat.tables where tabname = 'table_name'
4、计算表占用磁盘空间大小
表占用磁盘空间大小 = 数据页大小 * 页数量
查看表占磁盘空间大小：select tabname, npages*32768/(1024*1024) from syscat.tables where tabname = 'XXXXXX'

db2 v9以上查看表占磁盘逻辑空间大小：select sum(x.DATA_OBJECT_P_SIZE+x.INDEX_OBJECT_P_SIZE+x.LOB_OBJECT_P_SIZE+x.LONG_OBJECT_P_SIZE+x.XML_OBJECT_P_SIZE) from SYSIBMADM.ADMINTABINFO x where TABNAME='XXXXXXX';
select TABNAME,sum(x.DATA_OBJECT_P_SIZE+x.INDEX_OBJECT_P_SIZE+x.LOB_OBJECT_P_SIZE+x.LONG_OBJECT_P_SIZE+x.XML_OBJECT_P_SIZE) from SYSIBMADM.ADMINTABINFO x group by TABNAME;
db2 v9以上查看数据库占用空间大小：db2 "call SYSPROC.GET_DBSIZE_INFO(?,?,?,10)"


-- db2 delete 大表不写日志操作
1.update command options using c off  -- //关闭自动提交
2.alter table fxjkusr.run_rule_info  activate not logged initially //设置不记日志
3.delete from MARPT.RPT_DIM_U_ORG_INX_M_CURR_CUS_PRO_TBK -- 删除数据
4.commit//手动提交
5.update command options using c on//打开自动提交

、查看数据库页大小
db2 get db cfg
2、收集表状态信息
db2 runstats on table schema.table_name
3、查询数据表占用页的数量
select tabname, npages from syscat.tables where tabname = 'table_name'
4、计算表占用磁盘空间大小
表占用磁盘空间大小 = 数据页大小 * 页数量
查看表占磁盘空间大小：select tabname, npages*16384/(1024*1024) from syscat.tables where tabname = 'XXXXXX'

db2 v9以上查看表占磁盘逻辑空间大小：select sum(x.DATA_OBJECT_P_SIZE+x.INDEX_OBJECT_P_SIZE+x.LOB_OBJECT_P_SIZE+x.LONG_OBJECT_P_SIZE+x.XML_OBJECT_P_SIZE) from SYSIBMADM.ADMINTABINFO x where TABNAME='XXXXXXX';
select TABNAME,sum(x.DATA_OBJECT_P_SIZE+x.INDEX_OBJECT_P_SIZE+x.LOB_OBJECT_P_SIZE+x.LONG_OBJECT_P_SIZE+x.XML_OBJECT_P_SIZE) from SYSIBMADM.ADMINTABINFO x group by TABNAME;
db2 v9以上查看数据库占用空间大小：db2 "call SYSPROC.GET_DBSIZE_INFO(?,?,?,10)"
查看死锁
db2 get snapshot for locks on fxjkdb
杀掉死锁进程
db2 force application (进程hander)
导出某张表的数据
db2 "export to pub_bizinfo.ixf of ixf select * from pub_bizinfo"
导入某张表的数据
表存在
db2 "import from pub_bizinfo.ixf of ixf insert into pub_bizinfo"
不生成日志
db2 "load from pub_bizinfo.ixf of ixf insert into pub_bizinfo"
表不存在
db2 "import from pub_bizinfo.ixf of ixf create into pub_bizinfo"
0 6 * * * $HOME/for_crontab/createTomorrowTables >> $HOME/for_crontab/mylog.log 2>&1
0 6 * * * /root/zwk/test.sh >> /root/zwk/operate_`date +"\%Y\%m\%d"`.log 2>&1
backup
db2 connect to rams
db2 quiesce db immediate
db2 terminate
db2 deactivate db fxjkdb
db2 force application all
db2 backup db fxjkdb to /home/fxjkusr/test/test

select TABNAME,SUM(CARD) OVER(PARTITION BY TABNAME) from syscat.tables where tabschema='FXJKUSR';

select TABNAME,sum(card) from syscat.tables where tabschema='FXJKUSR'group by TABNAME
在linux下，不可避免的会用VIM打开一些windows下编辑过的文本文件。我们会发现文件的每行结尾都会有一个^M符号，这是因为 DOS下的编辑器和Linux编辑器对文件行末的回车符处理不一致，

清理日志脚本
46 15 * * *  find /home/rams/domains/log/* -mtime +7 |xargs rm -rf  >/dev/null 2>&1
12 19 * * *  >/home/rams/domains/rams_domain/bin/start_rams_s1.log  >/dev/null 2>&1

CMD="db2 -t "
count=`${CMD} <<EOF | grep 'labstr' | awk '{print $1}'
connect to srcdb;
select count(*), 'labstr' from tbl1 where NAME='小明';
EOF`
echo $count\
列出定时任务
crontab -l

对于回车符的定义：
windows：   0D0A
unixlinux:     0A
MAC: 0D

比较快捷的去除这些符号的方法有这么几种：

（1）是用VI的命令：
    使用vi打开文本文件
    vi dos.txt
    命令模式下输入
    :set fileformat=unix
    :w

(2) VI下使用正则表达式替换
   g/^M/s/^M//
    或者
   %s/^M//g
   ctrl + v 然后 ctrl + m

（3）使用sed 工具
    sed ’s/^M//’ filename > tmp_filename

（4）既然window下的回车符多了‘ ’，那么当然通过删除‘ ’ ，也可以实现：
    tr -d " "

（5）最后一个方法是本人最常用的方法，个人觉得最方便
    在终端下敲命令：
    $ dos2unix filename
    直接转换成unix格式，就OK了！～



java -Xms128m -Xmx256m -jar /home/.jar
alter table FX_PRIVATE_CUST alter ID_TYPE set data type varchar(20)

DB2删除重复记录得方法和其他数据库系统有何不同呢？下文为您列举了五种DB2删除重复记录的情况，希望对您有所启迪。
设置联合主键
alter table table_a add constraint  PK_FA PRIMARY KEY (ID_A , ID_B );

select * from TRADE_FLOW_INFO where TRADE_ON_UUID in (select TRADE_ON_UUID
from TRADE_FLOW_INFO group by TRADE_ON_UUID having count(TRADE_ON_UUID) > 1);

delete from (select TRADE_ON_UUID,row_number() over(partition by TRADE_ON_UUID order by TRADE_ON_UUID) as row_num
from TRADE_FLOW_INFO)  where row_num >1;


delete from TRADE_FLOW_INFO_STATUS;

select * from TRADE_FLOW_INFO_STATUS;
1、查找表中多余的重复记录，重复记录是根据单个字段（peopleId）来判断

select * from TRADE_FLOW_INFO where TRADE_ON_UUID in (select TRADE_ON_UUID
from TRADE_FLOW_INFO group by TRADE_ON_UUID having count(TRADE_ON_UUID) > 1);


2、DB2删除重复记录，重复记录是根据单个字段（peopleId）来判断，只留有rowid最小的记录
delete from (select TRADE_ON_UUID,row_number() over(partition by TRADE_ON_UUID order by TRADE_ON_UUID) as row_num
from TRADE_FLOW_INFO_STATUS)  where row_num >1
3、查找表中多余的重复记录（多个字段）

select * from vitae a where (a.peopleId,a.seq) in (select peopleId,seq from vitae group by peopleId,seq having count(*) > 1)

4、DB2删除重复记录（多个字段），只留有rowid最小的记录

delete from vitae a where (a.peopleId,a.seq) in (select peopleId,seq from vitae group by peopleId,seq having count(*) > 1) and rowid not in (select min(rowid) from vitae group by peopleId,seq having count(*)>1)

5、查找表中多余的重复记录（多个字段），不包含rowid最小的记录

select * from vitae a where (a.peopleId,a.seq) in (select peopleId,seq from vitae group by peopleId,seq having count(*) > 1) and rowid not in (select min(rowid) from vitae group by peopleId,seq having count(*)>1)
你说的是jvm的内存空间吧。
在方法（代码块）中定义一个变量时，java就在栈中为这个变量分配JVM内存空间，当超过变量的作用域后，java会自动释放掉为该变量所分配的JVM内存空间；而在堆中分配的JVM内存由java虚拟机的自动垃圾回收器来管理。

JVM内存区域组成

JVM内存分四种：

1、栈区（stacksegment）—由编译器自动分配释放,存放函数的参数值，局部变量的值等，具体方法执行结束之后，系统自动释放JVM内存资源

2、堆区（heapsegment）—一般由程序员分配释放，存放由new创建的对象和数组，jvm不定时查看这个对象，如果没有引用指向这个对象就回收

3、静态区（datasegment）—存放全局变量，静态变量和字符串常量，不释放

4、代码区（codesegment）—存放程序中方法的二进制代码，而且是多个对象共享一个代码空间区域

在方法（代码块）中定义一个变量时，java就在栈中为这个变量分配JVM内存空间，当超过变量的作用域后，java会自动释放掉为该变量所分配的JVM内存空间；在堆中分配的JVM内存由java虚拟机的自动垃圾回收器来管理，堆的优势是可以动态分配JVM内存大小，生存期也不必事先告诉编译器，因为它是在运行时动态分配JVM内存的。缺点就是要在运行时动态分配JVM内存，存取速度较慢；栈的优势是存取速度比堆要快，缺点是存在栈中的数据大小与生存期必须是确定的无灵活性。

◆java堆由Perm区和Heap区组成，Heap区则由Old区和New区组成，而New区又分为Eden区,From区,To区，Heap={Old+NEW={Eden,From,To}}，见图1所示。

Heap区分两大块，一块是NEWGeneration,另一块是OldGeneration.在NewGeneration中，有一个叫Eden的空间，主要是用来存放新生的对象，还有两个SurvivorSpaces（from,to）,它们用来存放每次垃圾回收后存活下来的对象。在OldGeneration中，主要存放应用程序中生命周期长的JVM内存对象，还有个PermanentGeneration，主要用来放JVM自己的反射对象，比如类对象和方法对象等。

在NewGeneration块中，垃圾回收一般用Copying的算法，速度快。每次GC的时候，存活下来的对象首先由Eden拷贝到某个SurvivorSpace,当SurvivorSpace空间满了后,剩下的live对象就被直接拷贝到OldGeneration中去。因此，每次GC后，EdenJVM内存块会被清空。在OldGeneration块中，垃圾回收一般用mark-compact的算法，速度慢些，但减少JVM内存要求.

垃圾回收分多级，0级为全部(Full)的垃	圾回收，会回收OLD段中的垃圾；1级或以上为部分垃圾回收，只会回收NEW中的垃圾，JVM内存溢出通常发生于OLD段或Perm段垃圾回收后，仍然无JVM内存空间容纳新的Java对象的情况。

JVM调用GC的频度还是很高的，主要两种情况下进行垃圾回收：当应用程序线程空闲；另一个是JVM内存堆不足时，会不断调用GC，若连续回收都解决不了JVM内存堆不足的问题时，就会报outofmemory错误。因为这个异常根据系统运行环境决定，所以无法预期它何时出现。

根据GC的机制，程序的运行会引起系统运行环境的变化，增加GC的触发机会。为了避免这些问题，程序的设计和编写就应避免垃圾对象的JVM内存占用和GC的开销。显示调用System.GC()只能建议JVM需要在JVM内存中对垃圾对象进行回收，但不是必须马上回收，一个是并不能解决JVM内存资源耗空的局面，另外也会增加GC的消耗。

◆当一个URL被访问时，JVM内存区域申请过程如下：

A.JVM会试图为相关Java对象在Eden中初始化一块JVM内存区域

B.当Eden空间足够时，JVM内存申请结束。否则到下一步

C.JVM试图释放在Eden中所有不活跃的对象（这属于1或更高级的垃圾回收）,释放后若Eden空间仍然不足以放入新对象，则试图将部分Eden中活跃对象放入Survivor区

D.Survivor区被用来作为Eden及OLD的中间交换区域，当OLD区空间足够时，Survivor区的对象会被移到Old区，否则会被保留在Survivor区

E.当OLD区空间不够时，JVM会在OLD区进行完全的垃圾收集（0级）

F.完全垃圾收集后，若Survivor及OLD区仍然无法存放从Eden复制过来的部分对象，导致JVM无法在Eden区为新对象创建JVM内存区域，则出现"outofmemory错误"

 使用jvmstat 之前需要配置相应环境变量，环境变量配置如下：

JVMSTAT_HOME：jvmstat安装目录
JVMSTAT_JAVA_HOME：JDK所在目录，与JAVA_HOME值相同


        配置好两个环境变量之后就可以运行jvmstat 了，运行命令为：

visualgc pid
#windows 系统进入bat 目录后运行该命令
#linux 系统进入bin 目录后运行该命令




 启动mysq数据库，net start mysql;
 mysql-hlocalhost -uroot -p;


 typeperf -si 5 "\Memory\Available Mbytes" "\Memory\Pages/sec"

 要显示处理器和内存计数器，请键入：
typeperf "\Memory\Available bytes" "\processor(_total)\% processor time"

要以 CSV 输出格式每三秒钟显示一次 Explorer 进程，请键入：
typeperf "\Process(Explorer)\Thread Count" -si 3 -o typeperf.csv

要在计算机 Server_name 上显示 50 个 RAS 计数器的范例，请键入：
typeperf "\RAS port(LPT1)\Bytes Transmitted" -sc 50 -s Server_name




如果你想允许用户myuser从ip为192.168.1.6的主机连接到mysql服务器的dk数据库，并使用mypassword作为密码

GRANT ALL PRIVILEGES ON dk.* TO 'myuser'@'192.168.1.3' IDENTIFIED BY 'mypassword' WITH GRANT OPTION;

FLUSH   PRIVILEGES;


# /etc/init.d/mysql stop
# mysqld_safe --user=mysql --skip-grant-tables --skip-networking &
# mysql -u root mysql
mysql> UPDATE user SET Password=PASSWORD('newpassword') where USER='root';
mysql> FLUSH PRIVILEGES;
mysql> quit
# /etc/init.d/mysql restart
# mysql -uroot -p
Enter password: <输入新设的密码newpassword>



tps(每秒事务处理量(TransactionPerSecond))
1. 统计所有节点表空间使用率
　　select substr(TABLESPACE_NAME,1,20) as TBSPC_NAME,bigint(TOTAL_PAGES * PAGE_SIZE)/1024/1024 as "TOTAL(MB)",used_pages*PAGE_SIZE/1024/1024 as "USED(MB)", free_pages*PAGE_SIZE/1024/1024 as "FREE(MB)" from table(snapshot_tbs_cfg('DB_NAME', -2)) as snapshot_tbs_cfg

获取到当前时间为止，数据库总的TPS及Response Time；
select current time as current_time, total_app_commits,total_act_time,total_app_commitamp - db_conn_time)as tps,total_act_time/total_app_commits as response_time from table (mon_get_database(-2))


　　查看表空间使用率
　　select substr(tbsp_name,1,20) as TABLESPACE_NAME,substr(tbsp_content_type,1,10) as TABLESPACE_TYPE,sum(tbsp_total_size_kb)/1024 as TOTAL_MB,sum(tbsp_used_size_kb)/1024 as USED_MB,sum(tbsp_free_size_kb)/1024 as FREE_MB,tbsp_page_size AS PAGE_SIZE from SYSIBMADM.TBSP_UTILIZATION group by tbsp_name,tbsp_content_type,tbsp_page_size
　　order by 1

asc升序   desc降序
列出平均执行时间排前十的SQL语句
db2 "select total_act_time/num_exec_with_metrics as a_exe_time ,substr(stmt_text,1,100) as sql from table(mon_get_pkg_cache_stmt(null,null,null,-2))where num_exec_with_metrics>=1 order by 1 desc fetch first 10 rows only"

按已执行时间和耗用CPU时间由大到小列出正在运行的SQL
db2 "select application_handle,elapsed_time_sec,total_cpu_time,rows_read,substr(stmt_text,1,40)as sql from sysibmadm.mon_current_sql order by 2 desc,3 desc"
　　db2 call GET_DBSIZE_INFO (?,?,?,0)

　　  输出参数的值
　　  --------------------------
　　  参数名： SNAPSHOTTIMESTAMP
　　  参数值： 2008-05-26-10.53.06.421000

　　  参数名： DATABASESIZE
　　  参数值： 1203863552

　　  参数名： DATABASECAPACITY
　　  参数值： 4281493504

　　unit=byte, byte/1024/1024=m

　　db2 call GET_DBSIZE_INFO (?,?,?,0)



=========DB2常用的命令======================================
启动数据库
  db2start
停止数据库
  db2stop
连接数据库
  db2 connect to bgj0 user db2inst using password
读数据库管理程序配置
  db2 get dbm cfg
写数据库管理程序配置
  db2 update dbm cfg using 参数名 参数值
读数据库的配置
  db2 connect to bgj0user db2 using pwd
  db2 get db cfg for bgj0
写数据库的配置
  db2 connect to  user db2 using pwd
  db2 update db cfg for bgj0 using 参数名 参数值
=====================================================================
关闭所有应用连接
  db2 force application all
  db2 "force application(8)"
=====================================================================
备份数据库
  db2 force application all
  db2 backup db bgj0 to d:
  (db2 initialize tape on [url=file://\\.\tape0]\\.\tape0)
  (db2 rewind tape on [url=file://\\.\tape0]\\.\tape0)
  db2 backup db bgj0 to [url=file://\\.\tape0]\\.\tape0
恢复数据库
  db2 restore db bgj0 from d: to d:
  db2 restore db bgj0 from [url=file://\\.\tape0]\\.\tape0 to d:
前滚数据库
  db2 rollforward db db3test to end of logs and complete
  db2 rollforward db db3test to [timestamp] and complete
  db2 rollforward db db3test to [timestamp] using local time and complete
========================================================================
如何查看数据库的存储过程?
    SELECT * FROM SYSCAT.PROCEDURES
绑定存储过程
    db2 connect to bgj0 user db2 using pwd
    db2 bind c:\dfplus.bnd
拷贝存储过程到服务器上的C:\sqllib\function目录中
=======================================================================

select current date from sysibm.sysdummy1;
values current date;

--获取当前日期
select current time from sysibm.sysdummy1;
values current time;
--获取当前时间戳
select current timestamp from sysibm.sysdummy1;
values current timestamp;

--要使当前时间或当前时间戳记调整到 GMT/CUT，则把当前的时间或时间戳记减去当前时区寄存器：

values current time -current timezone;
values current timestamp -current timezone;

--获取当前年份

values year(current timestamp);

--获取当前月
values month(current timestamp);

--获取当前日
values day(current timestamp);

--获取当前时
values hour(current timestamp);

--获取分钟
values minute(current timestamp);

--获取秒
values second(current timestamp);

--获取毫秒
values microsecond(current timestamp);

--从时间戳记单独抽取出日期和时间

values date(current timestamp);
values VARCHAR_FORMAT(current TIMESTAMP,'yyyy-mm-dd');
values char(current date);
values time(current timestamp);

--执行日期和时间的计算

values current date+1 year;
values current date+3 years+2 months +15 days;
values current time +5 hours -3 minutes +10 seconds;

--计算两个日期之间的天数

values days(current date)- days(date('2010-02-20'));

--时间和日期换成字符串

values char(current date);
values char(current time);

--要将字符串转换成日期或时间值

values timestamp('2010-03-09-22.43.00.000000');
values timestamp('2010-03-09 22:44:36');
values date('2010-03-09');
values date('03/09/2010');
values time('22:45:27');
values time('22.45.27');

--计算两个时间戳记之间的时差：

--秒的小数部分为单位
values timestampdiff(1,char(current timestamp - timestamp('2010-01-01-00.00.00')));
--秒为单位
values timestampdiff(2,char(current timestamp - timestamp('2010-01-01-00.00.00')));
--分为单位
values timestampdiff(4,char(current timestamp - timestamp('2010-01-01-00.00.00')));
--小时为单位
values timestampdiff(8,char(current timestamp - timestamp('2010-01-01-00.00.00')));
--天为单位
values timestampdiff(16,char(current timestamp - timestamp('2010-01-01-00.00.00')));
--周为单位
values timestampdiff(32,char(current timestamp - timestamp('2010-01-01-00.00.00')));
--月为单位
values timestampdiff(64,char(current timestamp - timestamp('2010-01-01-00.00.00')));
--季度为单位
values timestampdiff(128,char(current timestamp - timestamp('2010-01-01-00.00.00')));
--年为单位
values timestampdiff(256,char(current timestamp - timestamp('2010-01-01-00.00.00')));
一、整库备份（备份数据为一个文件）

1）备份之前断开所有连接

db2 force application all

2）备份

db2 backup db dbname user db2admin using db2admin to d:/

3）恢复

db2 restore db dbname user db2admin using db2admin from d:/

二、按模式备份（备份数据为多个文件）

1）备份表结构

db2look -d dbname -e -a -x -i db2admin -w db2admin -o d:\createdb.sql

2）导出数据（进入到指定目录后执行）

db2move dbname export -u db2admin -p db2admin

3）导入表结构

db2 -tvf createdb.sql

4）导入数据（进入到指定目录后执行）

db2move dbname import -u db2admin -p db2admin

三、以文本方式导入导出某个表（数据量较小的表）

1）导出

export to d:\dbtable.txt of del select * from dbtable;

2）导入

import from d:\dbtable.txt  of del insert into dbtable;

3）导入乱码

import from d:\dbtable.txt of del modified by codepage=1208 insert into dbtable;

codepage=1208 为UTF-8
codepage=1386 为GBK
复制代码
导出数据：
export to "/qdzh_db/test/201507.del" of del lobs to /qdzh_db/test select * from  pub_bizinfo where PBI_TRANTIMESTART like '201507%'
说明：
（1）表名test前面需要带schema名
（2）如不确认表结构，可用命令 db2 describe table test查询
3
DB2在执行一个大的insert/update操作的时候报“The transaction log for the database is full.. ”错误，查了一下文档是DB2的日志文件满了的缘故。

首先运行下面命令来查看DB2的日志配置信息

?
1
$ db2 get db cfg | grep LOG
注意其中的下面配置项
Log file size (4KB) (LOGFILSIZ) = 1024 Number of primary log files (LOGPRIMARY) = 45 Number of secondary log files (LOGSECOND) = 20此时可以通过下面的命令来修改B2的日志配置信息
$ db2 update db cfg using LOGFILSIZ 10240 $ db2 update db cfg using LOGPRIMARY 100 $ db2 update db cfg using LOGSECOND 100修改配置以后需要重新启动数据库实例
$ db2stop force $ db2start最后再次查看修改后的参数，然后重新运行insert/update操作。
导入数据：
确认环境信息没有问题执行导入命令
import from "/home/qdzhusr/test/201507/test.del" of del lobs from /home/qdzhusr/test/201507/ insert into pub_bizinfo

load from "/home/qdzhusr/test/201507/test.del" of del lobs from /home/qdzhusr/test/201507/ insert into pub_bizinfo

For2ear@

COPY NO/COPY YES/NONRECOVERABLE

load from "/qdzh_db/test/201508.del" of del lobs from /qdzh_db/test/ insert into pub_bizinfo NONRECOVERABLE without prompting

load from aa1.ixf of ixf replace into table1 COPY NO without prompting

然后db2 load from /qdzh_db/test/test.del of del terminate into pub_bizinfo
然后 reorg table <表>
然后就可以了！

执行命令：reorg table XXX；即可。

db2 force all application
db2 quiesce db immediate
db2 "backup db qdzhdb tablespace(userspace1)"


导出表数据
  db2 export to c:\dftz.txt of del select * from dftz
  db2 export to c:\dftz.ixf of ixf select * from dftz
导入表数据
import from c:\123.txt of del insert into ylbx.czyxx（把123文件中的内容以DEL格式插入到ylbx模式下的czyxx表中，加至czyxx表中数据的后面）

db2 import from c:\dftz.txt of del commitcount 5000 messages c:\dftz.msg insert into dftz（将c盘下dftz文件中的内容记录以del格式导至dftz表中，每5000条提交一次，并在dftz.msg文件中记录过程中的报警信息）

db2 import from c:\dftz.ixf of ixf commitcount 5000 messages c:\dftz.msg insert into dftz（将c盘下dftz文件中的内容记录以ixf格式导至dftz表中，每5000条提交一次，并在dftz.msg文件中记录过程中的报警信息）

db2 import from c:\dftz.ixf of ixf commitcount 5000 insert into dftz（将c盘下dftz文件中的内容记录以ixf格式导至dftz表中，每5000条提交一次）

db2 import from c:\dftz.ixf of ixf commitcount 5000 insert_update into dftz（将c盘下dftz文件中的内容记录以ixf格式更新并导入dftz表中）

db2 Import from c:\dftz.ixf of ixf restartcount 55 rowcount 10000 replace_create into dftz（仅ixf）（将dftz.ixf中的内容以ixf格式从第55条至第10000条的记录导至新建立的dftz表中）

db2 Import from c:\dftz.ixf of ixf rowcount 10000 create into dftz（仅ixf）（将dftz.ixf中的内容以ixf格式前10000条的记录导至新建立的dftz表中）

db2 import from c:\dftz.ixf of ixf commitcount 5000 replace into dftz  （将dftz表中的内容导入dftz表中并替换其所有内容，每5000条提交一次）
======================================================================
执行一个批处理文件
    db2 –tf 批处理文件名
  （文件中每一条命令用 ；结束）
自动生成批处理文件
======================================================================
  建文本文件：temp.sql
select 'runstats on table DB2.' || tabname || ' with distribution and detailed indexes all;' from syscat.tables where tabschema='DB2' and type='T';
db2 –tf temp.sql>runstats.sql
===============================================================
自动生成建表（视图）语句
在服务器上：C:\sqllib\misc目录中
db2 connect to bgj0 user db2 using pwd
db2look -d bgj0 -u db2inst -e -p -c c:\bgj0.txt
============================================================================
授权给某用户权限
grant dbadm on database to user bb
============================================================================

select * from czyxx fetch first 1 rows only
============================================================================

db2expln -d 数据库名 -u 用户名 密码 -o 文件名|-t  -c 生成包的模式名 -p 包名

=======================================================================================
要使用SQL调用语句重组表，使用admin_cmd过程发出执行命令：
call sysproc.admin_cmd('reorg table tablename index indexname')

===========================================================================
查看某一指定表的状态
db2 load query table 表名
============================================================================

显示当前用户所有表

　　list tables

列出所有的系统表

　　list tables for system
======================做数据库的编目与反编目（即删除编目）================
编目
1.db2 catalog tcpip node node1 remote 172.16.170.100(本机IP地址) server 50004(可从 get dbm cfg show detail 中看出）
2.db2 catalog db sample(要映射到的数据库在本机的别名) at node node1

反编目
1.db2 uncatalog node node1
2.db2 uncatalog db sample
================查看表结构==============================

　　db2 describe select * from tmmsm01 (db2 describe table tmmsm01)

================为表改名========================================


db2 rename table 原始表名 to 目的表名

==================修改某个操作用户的权限================


（需要系统ROOT用户参与）
把用户所在组通过smitty group修改所属组的操作权限参数，然后在db2 get dbm cfg show detail中通过db2 update dbm cfg for bgj0 using  SYSMON group name   DB2MON命令来修改


=========================================================


检查表的大小



db2 select tabname，npages，fpages from syscat.tables where tabname='tabname'

查看最近一次数据重组的时间的时间：
db2 ‘select stats_time,tabname from syscat.tables where stats_time is not null Order by stats_time’|more

检查是否已做过runstats：
db2 -v "select tbname,nleaf,nlevels,stats_time from sysibm.sysindexes"

为数据库做自动统计信息收集：
db2 update db cfg for bgj0 using auto_maint on
db2 update db cfg for bgj0 using auto_tbl_maint on
db2 update db cfg for bgj0 using auto_runstats on

收集某表中所有列上的统计信息：

 runstats on table 某个模式下的表表名 on all columns

上句等同于：      runstats on table 表名


收集表和索引上的数据库统计信息，不包含分布统计信息：
runstats on table 模式下的表 and indexes all

收集表和索引上的数据库统计信息，包含分布统计信息：
runstats on table pub_bizinfo with distribution and indexes all


收集表上的数据库统计信息以及索引上的详细统计信息，不包含分布统计信息：
runstats on table 模式下的表 and detailed indexes all

收集表上的数据库统计信息以及索引上的详细统计信息，包含分布统计信息：
runstats on table 模式下的表 with distribution and detailed indexes all


收集关键列上的数据库统计信息：
runstats on table 模式下的表 on key columns


==============================================================

检查哪个表有做过reorg
db2 select tabname，npages，fpages from syscat.tables



检查备份与重构命令的历史记录：
db2 list history backup/reorg  all for bgj0


=======================================================================


执行表、索引检查是否需要做reorg，先执行reorgchk命令检，命令如下：
db2 reorgchk update statistics on table bgj0.bgj0logevent

(查看用于索引的F4，F5，F6，F7，F8这几列，如果这几列中的任何一列有星号*，则说明当前的表和/或索引应该重组。)

reorgchk on table all 确定是否需要对表进行重组。这对于对所有表自动执行 runstats 很有用。

===============================================================

脱机方式重组表是整理表碎片最快方法。使用CLP重组表，执行：
db2 reorg table bgj0.bgj0logevent

要使用临时表空间重组表，执行：
db2 reorg table dbname.tablename use 临时表空间名


重组表并根据索引对行进行重新排序，执行：
db2 reorg table bgj0.bgj0logevent index IDX_LOG_01

db2 reorg indexes all for table bgj0.bgj0logevent allow read access


=====查死锁=======================================================
cd /db2data/db2user/db2inst/db2inst/NODE0000/SQL00001/db2event/db2detaildeadlock
du -a|sort -rn

db2evmon -path /db2data/db2user/db2inst/db2inst/NODE0000/SQL00001/db2event/db2detaildeadlock>/tmp/lock1.txt


============监控器================================================



           第一步：打开监控开关（只和get snapshot相关)
           db2 "update monitor switches using lock ON sort ON bufferpool ON uow ON table ON statement ON"
           db2 "update monitor switches using lock off sort off bufferpool off uow off table off statement ON"
           db2 update dbm cfg using DFT_MON_BUFPOOL on DFT_MON_LOCK on DFT_MON_SORT on DFT_MON_STMT on  DFT_MON_TABLE on  DFT_MON_TIMESTAMP on  DFT_MON_UOW on  HEALTH_MON on
           db2 get monitor switches

           第二步：创建事件监控器
           db2 "create event monitor monitor_all for statement,database,tables,tablespaces,deadlocks,transactions write to file '/db2data/event'"

           第三步：激活事件监控器
           db2 "set event monitor db2detaildeadlock state=1"
           ps -ef|grep db2event
           [bgrzl0m0][db2inst][/db2data/event]>ls
           00000000.evt  db2event.ctl

           第四步：格式化事件监控文件
           db2evmon -db bgj0 -evm db2detaildeadlock > db2detaildeadlock.txt




============清空监控器：===========================================

查看监控器名称：ps -ef |grep db2event     (db2detaildeadlock)

db2 "set event monitor db2detaildeadlock state=0"

删除“  00000000.evt  db2event.ctl”文件


db2 "set event monitor db2detaildeadlock state=1"



===============快照监控器===================================================
 db2 update dbm cfg using DFT_MON_BUFPOOL on DFT_MON_LOCK on DFT_MON_SORT on DFT_MON_STMT on  DFT_MON_TABLE on  DFT_MON_TIMESTAMP on  DFT_MON_UOW on  HEALTH_MON on

 Default database monitor switches
   Buffer pool                         (DFT_MON_BUFPOOL) = ON                         ON
   Lock                                   (DFT_MON_LOCK) = OFF                        ON
   Sort                                   (DFT_MON_SORT) = ON                         ON
   Statement                              (DFT_MON_STMT) = ON                         ON
   Table                                 (DFT_MON_TABLE) = ON                         ON
   Timestamp                         (DFT_MON_TIMESTAMP) = ON                         ON
   Unit of work                            (DFT_MON_UOW) = ON                         ON
 Monitor health of instance and databases   (HEALTH_MON) = ON                         ON


 db2 get snapshot for all on bgj0 > all_snap.out

动态sql语句snapshot
监控是否存在死锁
grep -n "Deadlocks" all_snap.out|grep -v "= 0"|more

执行频繁的语句
grep -n "Number of execution" all_snap.out|grep -v "= 0"|sort -krn|more


执行时间很长的语句
grep -E "Total execution time" all_snap.out| sort -rn|more
grep -E "Rows read" all_snap.out| sort -rn|more


==========================================================================




管理

export 将数据库数据抽取到一个平面文件中。
import 通过使用 IMPORT 实用程序，将数据导入到数据库。
load query table <tbname>
[to local-message-file][nosummary | summaryonly] [showdelta]  返回 LOAD 实用程序的进度。
backup database <dbname> [to <path>] 执行数据库备份。
restore database <dbname> [from <path>] 执行数据库恢复。
get health snapshot for dbm 返回实例的正常快照信息（仅适用于 V8）。
get health snapshot for all on <dbname> 返回数据库 <dbname> 的所有正常快照（仅适用于 V8）。

管理服务器

get admin cfg 返回管理服务器的配置设置。
update admin cfg using <p> <v> 将管理服务器配置参数 <p> 更新为值 <v>。


===============================================================



 db2pd -v
 db2pd -osinfo
 [bgrz1d0][db2inst][/db2data/db2user/db2inst]>db2pd -help

Usage:
   -h | -help [file=<filename>]
      Help
   -v | -version [file=<filename>]
      Version
   -osinfo [disk] [file=<filename>]
      Operating System Information
   -dbpartitionnum <num>[,<num>]
      Database Partition Number(s)
   -alldbpartitionnums
      All partition numbers
   -database | -db <database>[,<database>]
      Database(s)
   -alldatabases | -alldbs
      All Active Databases
   -inst
      Instance scope output
   -file <filename>
      All Output to Filename
   -command <filename>
      Read in predefined options
   -interactive
      Interactive
   -full
      Expand output to full length
   -repeat [num sec] [count]
      Repeat every num seconds (default 5) count times
   -everything
      All options on all database partitions

Instance scope options:

   -agents [db=<database>] [ [agent=<agentid>] | [application=<appid>] ] [file=<filename>]
      Agents
   -fcm [<numApps>] [file=<filename>]
      FCM Information
   -mempools [file=<filename>]
      Memory Pools
   -memsets [file=<filename>]
       Memory Sets
   -dbmcfg [file=<filename>]
      DBM Config
   -sysplex [db=<database>] [file=<filename>]
      Sysplex List
   -utilities [file=<filename>]
      Utilities
   *-fmp
      FMP Table

Database scope options:

   -applications [ [application=<appid>] | [agent=<agentid>] ] [file=<filename>]
      Applications
   -transactions [tran=<tranhdl>] [app=<apphdl>] [file=<filename>]
      Transactions
   -bufferpools [file=<filename>]
      Buffer Pools
   -logs [file=<filename>]
      Transaction Logs
   -locks [tran=<tranhdl>] [file=<filename>] [showlocks] [wait]
      Locks
   -tablespaces [file=<filename>] [group] [tablespace=<tablespace id>]
      Tablespaces/Containers
   -dynamic [file=<filename>]
      Dynamic Cache
   -static [file=<filename>]
      Static Cache
   -mempools [file=<filename>]
      Memory Pools
   -memsets [file=<filename>]
       Memory Sets
   -dbcfg [file=<filename>]
      Database Config
   -catalogcache [file=<filename>]
      Catalog Cache
   -tcbstats [all|index] [tbspaceid=<tbspaceid> [tableid=<tableid>]] [file=<filename>]
      Table Control Block Stats
   -reorgs [file=<filename>]
      Table Reorg Stats
   -recovery [file=<filename>]
      Recovery Status
   -reopt [file=<filename>]
      Reoptimized SQL Statements
   -storagepaths
      Storage Paths
   -hadr [file=<filename>]
      High Availability Disaster Recovery
   -activestatements [file=<filename>]
      Active Statement List

   Examples:
   db2pd -dbpartitionnum 0,1 -db sample -locks
   db2pd -dbp 0,1 -database bgj0 app=<50>
   db2pd -alldbp -alldbs


验证数据库是否正在进行恢复的计数器，当前日志和当前LSN（日志序号）提供了日志位置，
db2pd -db sample -recovery

db2pd -logs


db2pd -db BGJ0 -applications
db2pd -db BGJ0 -transactions|more
db2pd -db bgj0 -locks wait

db2pd -db bgj0  -applications -dyn|more
db2pd -db BGJ0 -applications -transactions -dynamic|more
db2pd -db bgj0

db2pd -db bgj0 -applications -transactions -dynamic|grep locks


[bgrzl0m0][db2inst][/db2data/db2user/db2inst]>db2pd -db BGJ0 -logs

Database Partition 0 -- Database BGJ0 -- Active -- Up 0 days 00:38:39 -- Date 08/06/2009 15:46:23

Logs:
Current Log Number            0
Pages Written                 0
Method 1 Archive Status       n/a
Method 1 Next Log to Archive  n/a
Method 1 First Failure        n/a
Method 2 Archive Status       n/a
Method 2 Next Log to Archive  n/a
Method 2 First Failure        n/a

Address            StartLSN       State      Size       Pages      Filename
0x0780000020008118 0x0008F2488000 0x00000000 16000      16000      S0000000.LOG
0x07800000200081B8 0x0008F6308000 0x00000000 16000      16000      S0000001.LOG
0x0780000020008258 0x0008FA188000 0x00000000 16000      16000      S0000002.LOG
0x07800000200082F8 0x0008FE008000 0x00000000 16000      16000      S0000003.LOG
0x0780000020008398 0x000901E88000 0x00000000 16000      16000      S0000004.LOG
0x0780000020008438 0x000905D08000 0x00000000 16000      16000      S0000005.LOG

db2pd  -db BGJ0 -dbcfg
db2pd  -db BGJ0 -dbmcfg
db2pd  -db BGJ0 -bufferpools
db2pd  -db BGJ0 -tablespaces
db2 list tablespaces show detail|more
db2 list tablespace containers for 4 show detail
db2pd -db BGJ0 -reorg

确定哪个事务包含锁定：
db2pd -db bgj0 -locks showlocks wait

诊断造成锁定等待的表加锁情况：
db2pd -db bgj0 -applications （查看status为lock_wait项对应的AppHandl号）
db2pd -db bgj0 -transactions （查看AppHandl号对应的tranhdl号）
db2pd -db bgj0 -locks（查看tranhdl号对应的锁类型（type）与锁情况（mode））

==================================================================


db2mtrk
   -i显示当前实例内存使用；
   -i -v显示当前实例内存使用详细信息；
   -d数据库内存使用情况；
   -d -v数据库内存使用详细信息；
   -p代理进程专用内存使用率
   -r(interval重复使用间隔数，count是重复的次数

Memory for database: BGJ0

   Backup/Restore/Util Heap is of size 16384 bytes
   Package Cache is of size 540672 bytes
   Catalog Cache Heap is of size 131072 bytes
   Buffer Pool Heap is of size 395689984 bytes
   Buffer Pool Heap is of size 1254653952 bytes
   Buffer Pool Heap is of size 42713088 bytes
   Buffer Pool Heap is of size 704512 bytes
   Buffer Pool Heap is of size 442368 bytes
   Buffer Pool Heap is of size 311296 bytes
   Buffer Pool Heap is of size 245760 bytes
   Lock Manager Heap is of size 340508672 bytes
   Database Heap is of size 31637504 bytes
   Other Memory is of size 0 bytes
   Total: 2067595264 bytes


============================db2advis命令===========================



db2 -tvf (路径)explain.ddl


db2 update monitor switches using statement on


create event monitor for statements write

db2 set event monitor sql_trace state=1


(执行正常的数据库活动，并开始获取应用上所有的SQL语句，直到想要的监控的时段结束。）


db2 event monitor sql_trace state=0




按照执行时间降序排列执行耗时最长的SQL语句，使用下列语句：
db2 "select stmt_text,(stop_time-start_time) 'ExecutionTime(sec)' from stmt_sql_trace where stmt_operation not in(7,8,9,19) order by decimal(ExecutionTime) desc fetch first 10 rows only";


按照频率降序排列执行次数最多的SQL语句，使用下列语句：
db2 select distinct(stmt_text),count(*) Count from stmt_sql_trace where stmt_operation not in(7,8,9,19) group by stmt_text order by count (*) desc fetch first 10 rows only;


按照CPU时间降序排列最耗CPU时间的SQL语句，使用下列语句：
db2 "select stmt_text,user_cpu_time,UserCPU(sec) from stmt_sql_trace where stmt_operation not in(7,8,9,19) order by usrcpu desc fetch first 10 rows only"


按照总排序时间降序排列排序时间最长的SQL语句，使用下列语句：
db2 select stmt_text,total_sort_time,TotalSortTime(ms) from stmt_sql_trace where stmt_operation not in (7,8,9.19) order by decimal (total_sort_time) desc fetch first 10 rows only;




捕获上诉每一类中的SQL语句，并将它们放置在tune.sql文件中。并将(--#set frequency <所要执行的SQL语句的次数> )命令插入到tune.sql文件中，这样可以更改工作负载中每条语句的执行频率。

所得到的tune.sql类似于下面这样：
--#set frequency 100
SELECT DISTINCT DIVISION FROM org;



为了确定哪些索引可能提高性能，按如下执行索引顾问程序：
db2advis -d sample -i tune1.sql -t 0 -o tuneidx.sql
其中所有被推荐可能会提高性能的索引将放置在文件tuneidx.sql中。编辑该文件，在文件开始处添加一条连接数据库的连接语句：
db2 connect to sample user userid using password；
并在文件末尾添加如下行命令：
terminate；

最后运行该文件以创建推荐的索引：
db2 -tf tuneidx.sql -z tuneidx.log

其中，tuneidx.log捕获tuneidx.sql的所有输出。



===========测试机上测验表空间的表数据有改变后的空间大小增减============


BGJ0下的DS_EP01里BGJ0LOGEVENT数据count数：1150525


前台删除BGJ0LOGEVENT数据后count数（用delete删）：


more 55.log时表空间看不出来大小增减；

db2stop force
db2start

db2 connect to bgj0

重构检查：（db2 reorgchk update statistics on table BGJ0.BGJ0LOGEVENT）
重构： （db2 reorg table on BGJ0.BGJ0LOGEVENT）


more 55.log时可看表空间有大小变动



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
delete之后能不能释放表空间

原先表空间用了80%，由于库中有一张表巨大无比，所以利用长假作了delete操作，删除了其中4/5的数据，但是看表空间还是80%左右，是不是作完delete自己是不能释放表空间的阿？

如果要释放表空间的话，应该怎么操作呢？谢谢



(1)commit了没有？然后reorg一下，可以用runstats先分析一下目标表，其结果可以从sysstat.tables得到


(2)不行的话export出来，删除表，再LOAD进去。



注:DELETE之后的数据记录号还存在，所以数据占用量是不减少的，这是为了找回DELETE后而又想要的数据




~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

=========生成数据库结构文件=================================



db2look   -d   bgj0   -e   -c   -o   /db2bak/bgj0/structure.sql

=========当前目录下生成db2support文件============================

db2support . -d bgj0 -c

=========DB2安装=================================================

1.	开始安装
a)	作为root用户登录，进入到安装文件目录下运行
         ./db2_install –p DB2.ESE
2.	创建db2管理服务器
a)	作为root用户登录，通过以下命令创建db2管理服务器
                dascrt –u dasuser
3.	启动db2数据库管理器
a)	作为db2数据库管理器用户（dasuser）登录
b)	运行. das/bin/db2admin start命令启动数据库管理器
4.	创建实例
a)	作为root用户登录，通过以下命令创建64位的db2实例
               db2icrt –u db2fenc –w 64 db2inst2
5.	创建db2文件的链接
a)	运行 db2ln命令
6.	注册license
a)	作为实例用户（db2inst）登录,运行：db2licm –a db2ese.lic命令
7.	启动实例
a)	作为实例用户（db2inst）登录，运行db2start命令
8.	创建数据库
        运行db2 create db test
　　　　提示成功后。
　　　　Db2 connect to test就可以连上数据库了




========DB2参数配置=====================================

1.	作为实例用户（db2inst）登录
2.	运行db2set DB2COMM=tcpip
3.	运行db2 update dbm cfg using svcename 50002设置服务的连接端口
4.	设置归档日志
    Db2 connect to dbname
Db2 update db cfg using LOGRETAIN recovery
注：设置了该参数，在连接数据库的时候会报backup pending
5.	修改日志路径, 将日志文件归档至活动日志路径之外的位置
db2 update db cfg for test using logarchmeth1 DISK:/db2log/db2archivelog




==============数据库健康快照检查==============================

db2 get health snapshot for all on bgj0 <show detail>



==============================================================

检查所有数据库中的读写行数对比、发生的等锁数、总的锁占用时间、单位时间内的锁占用数量、死锁或锁增加趋势、发生了多少次排序操作以及相关的时间量等数据库使用模式:


select db_name, SNAPSHOT_TIMESTAMP,rows_read, rows_selected, lock_waits, lock_wait_time, lock_wait_time/nullif(lock_waits,0) as avg_wt_time, deadlocks, lock_escals, total_sorts, total_sort_time, total_sort_time/nullif(total_sorts,0) as avg_sort_time, sort_overflows, sort_overflows/nullif(total_sorts,0) as pct_ovflow_sorts from table (snapshot_database ('',-1)) as snapshot_db



=============================================================


获取表空间大小以及剩余可用空间大小:

select substr(tablespace_name,1,120) as TBSPC_NAME,used_pages, free_pages from table (snapshot_tbs_cfg (' ', -1)) as snapshot_tbs_cfg



=============================================================

根据被读的频率来确定需要执行reorg或runstats命令的表:

select substr(table_schema,1,10) as tbschema, substr(table_name,1,30) as tbname,rows_read,rows_written,overflow_accesses,page_reorgs from table (SNAPSHOT_TABLE(' ', -1)) as snapshot_table order by rows_read desc fetch first 10 rows only



=============================================================

根据被写的次数找出10张更新最频繁的表:

select substr(table_schema,1,10) as tbschema,substr(table_name,1,30) as tbname, rows_read, rows_written, overflow_accesses, page_reorgs from table (SNAPSHOT_TABLE(' ', -1)) as snapshot_table order by rows_written desc fetch first 10 rows only

=============================================================



对于db2数据库，导入和导出表结构和数据其实很简单，只需要用到db2look和db2move两个命令即可。这两个命令都需要在客户端的命令行处理器中执行，但对于数据库服务器和客户端不在同一机器上的，需要借助catalog命令，来先完成远程数据库加载到本地，然后再进行导出导入操作。

    如果是远程操作，则先需要把远程的数据库信息加载到本地，如果是本地则跳过1和2，从3开始，具体如下：

       1、 catalog server 端的 node ，命令如下：
       db2 catalog tcpip node node_name remote hostname server service_port
       db2 uncatalog node node_name   （取消节点的编目）

   其中 node_name 是由你任意起的一个结点名，结点名不能跟已有的结点名重复（可通过db2  list node directory 查看），hostname也可为IP address，service_port为端口号一般默认为50000。节点目录用于存储远程数据库的所有连通性信息。

       2、 catalog 远端 DB2 数据库，命令如下：
       db2 catalog db db_name [as alias_name] at node node_name
     db2 uncatalog db db_name    （取消数据库的编目）

      db_name 是指远程数据库的名字， alias_name 是客户端实例名（可以忽略）， db2node 是指上面你所指定的节点node ！

     3、 连接数据库，命令如下：
       db2 connect to db_name user user_name using password
     db_name 是指数据库的名字， user_name 是数据库用户名，password是数据库密码

   4、用db2look命令生成表结构的DLL脚本
   db2look -d db_name -i user_name -w password -a -e -o d:\script.sql

     db_name 是指数据库的名字， user_name 是数据库用户名，password是数据库密码

   5、用db2move导出所有表的数据
     db2move db_name export -u user_name -p password

     db_name 是指数据库的名字，user_name 是数据库用户名， password是数据库密码

   6、用export导出指定的表数据
     db2 "export to d:\data\tab1.ixf of ixf lobs to d:\data\ lobfile lobs modified by lobsinsepfiles  messages d:\data\tab1.msg select * from schema_name.table_name"
   schema_name 是表所属，table_name是表名， lobsinsepfiles 或 lobsinfile 是生成lob文件 前一个是生成每个，后面是生成到一个文件中


   7、执行sql脚本
    db2 -tvf d:\script.sql -z d:\script.log

    8、用db2move导入所有表的数据
     db2move db_name import -io replace -u user_name -p password

    9、用import导入指定的表数据
      db2 "import from d:\data\tab1.ixf of ixf messages d:\data\tab1.msg insert into schema_name.table_name"

      DB2：查看表的索引
select *  from SYSCAT.INDEXES  where TABNAME='表名'

db2 "select  tabname  from syscat.indexes"

      使用语句db2 describe indexes for  table MOBILE.TFCREGISTERINF可以查看到表索引描述
      创建索引
      CREATE INDEX JOB_BY_DPTON on EMPLOYEE (WORKDEPT, JOB)

      DB2索引创建都应该哪些原则呢？这是很多人都提到的问题，下面就为您详细介绍DB2索引创建原则，供您参考学习。

DB2索引实现是一个B+树，通过索引可以实现快速查询，避免全表扫描以此来减少IO操作。

索引是对表数据的一种抽象，通过抽取有限数据，对数据的分布进行计算，以此来完成对数据的快速检索。

索引创建语句

CREATE INDEX <INDEX_NAME> ON <TABLE_NAME> (<COLNAME1,COLNAME2…>)
创建索引需要注意的地方：

索引应该用来提高查询速度，但是会对更新和删除操作带来负面影响，因为要同步更新索引。所以索引应该创建到更新、删除相对比读取少的表上。

索引需要独立的空间进行存储和管理。索引是需要磁盘空间来存储。所以避免重复创建冗余索引。如下:

“CREATE TABLE TEST_IDX (COL1 INT NOT NULL, COL2 INT NOT NULL, COL3 IN NOT NULL)”“CREATE INDEX TEST_IDX_IDX1 ON TEST_IDX (COL1, COL2, COL3)”
已经有索引TEST_IDX_IDX1在三个列上，在创建”CREATE INDEX TEST_IDX_IDX2 ON TEST_IDX (COL1, COL2)”，这样的索引一般没有什么作用。

索引用来避免表扫描。通过索引对大量数据抽取有限部分，形成一个相对少量的有序数据结构，通过对有序数据结构的查找可以快速想要查找的数据。所以索引适合建立在数据量比较大的表上，而且该表上的查询经常是根据条件查询部分数据。比如一些系统基础表，如SYSTEM表，这些表数据量小，而且经常是查询全部数据，所以这些表上建立索引对性能的影响不是很大，完全可以避免，以免对管理造成影响。

创建索引的目的还有一个就是保证数据唯一性，可以利用”CREATE UNIQUE INDEX <INDEX_NAME> ON <TABLENAME> (<COLNAME>)”，来完成。

主键会隐式创建索引，所以请不要在主键上创建索引浪费空间。

尽量减少索引的创建。DB2路径访问优化器会根据表中所提供的索引来完成尽可能多的访问路径的成本估计。创建过多的索引意味着DB2优化器生成更多的访问路径，完成更多的访问计划成本估算，这会增加SQL语句编译时间。

创建唯一索引可以避免排序。因为索引是有序数据结构，在进行扫描时，DB2会默认按照顺序输出结果，而不是按照插入先后。通过创建唯一索引可以避免排序，提高查询性能。

具有大量重复数据的列上不要创建索引。在大量重复的列上创建索引没有任何意义。如下数据结构：表中字段col1有大量重复数据，其中的数据分布是按照90%的Y，和10%的N来分布。这样的列上创建索引没有任何意义。在查询条件为col1=‘Y’时，该表的索引扫描和表扫描没有特大差异。根据实践经验，列上的数据分布应该均匀，并且抽密度不能大于5 ‰。

创建如下表：

“CREATE TABLE TEST1 (NO INT NOT NULL, NAME CHAR(5))”

“CREATE INDEX TEST1_IDX_1 ON TEST1 (NO)”

“INSERT INTO TEST1 SELECT ROW_NUMBER() OVER(), CHR(INT(RAND()*75+48))||CHR(INT(RAND()*75+48))||CHR(INT(RAND()*75+48)) FROM SYSCAT.COLUMNS T1 JOIN SYSCAT.COLUMNS T2 ON T1.COLNAME!=T2.COLNAME FETCH FIRST 100 ROWS ONLY“

“SELECT * FROM TEST1 WHERE NO = 50”



DB2索引优化
索引虽然能够大大提升查询效率，但是并不是对所有查询都适用的。比如对于“Select * From account where balance != 500”这样的语句，balance列上的索引基本上是无效的。（这是很好理解的，“不等于”在B+树索引中怎么能查找呢？）
我们把查询语句中Where后面的表达式称为谓词。DB2中谓词能否使用索引的情况列表如下：


du -sh * 查看当前目录下所有子目录和文件的汇总大小
普通用户使用sudo来执行root权限的命令

如，将Hadoop用户添加到sudoers文件中去

 vi /etc/sudoers
1
2
1
2
root ALL=(ALL) ALL
hadoop ALL=(ALL) ALL
df -h 查看磁盘空间状态信息

free 查看内存使用状况 后面加个m 就是带个单位撒

top 查看实时刷新的系统进程信息

sudo vi /etc/sysconfig/network-scripts/ifcfg-eth0 修改该配置文件即可改ip地址
或者在root权限下用setup指令通过一个带提示的伪图形界面来修改
查看ip地址
ifconfig

sudo vi /etc/sysconfig/network 修改其中的hostname配置项

管理内网的”主机名—ip地址”本地映射
sudo vi /etc/hosts

root权限下 service network restart
关闭防火墙服务 service iptables stop
关闭防火墙自动启动 chkconfig iptables off

查看我们系统中有哪些服务在监听哪些端口。
netstat -nltp

修改系统的默认启动级别
vi /etc/inittab

然后修改环境变量 sudo vi /etc/profile
在文件的最后添加以下两行

export JAVA_HOME=/usr/jdk1.7.0_65
export PATH=$PATH:$JAVA_HOME/bin
1
2
1
2
然后 source /etc/profile 来生效

mysql

RPM软件包安装

--yum install mysql （网络在线安装）
1
1
1.可以编译源码来安装
2.用redhat发布的一种标准软件安装包进行安装 RPM包
redhat 公司的RPM方式的包管理 也是很常用的软件包管理器

rpm -qa | grep MySQL
sudo rpm -e mysql-libs-5.1.66-2.el6_3.i686 –nodeps
sudo rpm -ivh MySQL-server-5.1.73-1.glibc23.i386.rpm

service iptables status可以查看到iptables服务的当前状态

一 防火墙配置文件及命令
(I)Red Hat Linux系统
此类型系统包括red hat的各类衍生及相关不版本，包括RHEL、CentOS、Fedora等等。
防火墙配置文件： /etc/sysconfig/iptables
服务操作命令 ： /etc/init.d/iptables service iptables {start|stop...}
临时改变命令 ： iptables iptables-save iptables-restore等
























ssh-keygen
ssh-copy-id xqw@10.135.0.179
vim .ssh/config
git remote add --mirror=push g1 ssh://10.135.0.179:/home/xqw/gznx.git
git push g1
vim .git/config
ssh 10.135.0.179
chmod 700 config


git log 有许多选项可以帮助你搜寻感兴趣的提交，接下来我们介绍些最常用的。

我们常用 -p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新：

$ git log -p -2

在做代码审查，或者要快速浏览其他协作者提交的更新都作了哪些改动时，就可以用这个选项。此外，还有许多摘要选项可以用，比如 --stat，仅显示简要的增改行数统计：

$ git log --stat

每个提交都列出了修改过的文件，以及其中添加和移除的行数，并在最后列出所有增减行数小计。还有个常用的 --pretty 选项，可以指定使用完全不同于默认格式的方式展示提交历史。比如用oneline 将 每个提交 放在一行显示，这在提交数很大时非常有用。另外还有short，full 和fuller 可以用，展示的信息或多或少有些不同，请自己动手实践一下看看效果如何。

$ git log --pretty=oneline
ca82a6dff817ec66f44342007202690a93763949 changed the version number
085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test code
a11bef06a3f659402fe7563abf99ad00de2209e6 first commit
但最有意思的是 format，可以定制要显示的记录格式，这样的输出便于后期编程提取分析，像这样：

$ git log --pretty=format:"%h - %an, %ar : %s"
ca82a6d - Scott Chacon, 11 months ago : changed the version number
085bb3b - Scott Chacon, 11 months ago : removed unnecessary test code
a11bef0 - Scott Chacon, 11 months ago : first commit
表 2-1 列出了常用的格式占位符写法及其代表的意义。

选项	 说明
%H	提交对象（commit）的完整哈希字串
%h	提交对象的简短哈希字串
%T	树对象（tree）的完整哈希字串
%t	树对象的简短哈希字串
%P	父对象（parent）的完整哈希字串
%p	父对象的简短哈希字串
%an	作者（author）的名字
%ae	作者的电子邮件地址
%ad	作者修订日期（可以用 -date= 选项定制格式）
%ar	作者修订日期，按多久以前的方式显示
%cn	提交者(committer)的名字
%ce	提交者的电子邮件地址
%cd	提交日期
%cr	提交日期，按多久以前的方式显示
%s	提交说明
你一定奇怪_作者（author）_和_提交者（committer）_之间究竟有何差别，其实作者指的是实际作出修改的人，提交者指的是最后将此工作成果提交到仓库的人。所以，当你为某个项目发布补丁，然后某个核心成员将你的补丁并入项目时，你就是作者，而那个核心成员就是提交者。我们会在第五章再详细介绍两者之间的细微差别。

用 oneline 或 format 时结合 --graph 选项，可以看到开头多出一些 ASCII 字符串表示的简单图形，形象地展示了每个提交所在的分支及其分化衍合情况。在我们之前提到的 Grit 项目仓库中可以看到：

、git-svn clone svn_repository
2、修改本地代码，使用git add/commit将修改提交到本地git库
3、定期使用git-svn rebase获取中心svn repository的更新
4、使用git-svn dcommit命令将本地git库的修改同步到中心svn库

1.初始化仓库
初始化仓库有两种情况，一种是直接在一个空目录里建立一个项目，这时候你可以这样干：
git init
另一种是从其他机器复制一个仓库，比如这样：
git clone git://git2.kernel.org/pub/scm/git/git.git (远程仓库)
git clone https://github.com/jQuery/jquery.git (远程仓库)
git clone git@github.com:wengpingbo/MicroBlog.git (远程仓库)
git clone /home/oss/test.git (本地仓库)
第一次从服务器上复制一个仓库，可能比较慢，因为git要把所有的历史记录和版本全部复制下来，这也算git的一个弊端吧！
复制完后，就会在当前目录下生成一个工作目录，名字以仓库名字命名。如果你不想指定目录，那就在上面的命令后加一个目录就ok了。比如我想把test仓库放到oss仓库中：git clone /home/oss/test.git oss
之后，你就可以开始你的工作啦！
2.添加文件
在编辑了几个文档之后，你可能突然想起来，好像文件还没有让git跟踪。Git并不会实时的跟踪你的文件，只在你明确让它记录你的文件时，它才会把指定的文件的当前状态记录到仓库中去，然后又撒手不管了。我想这就是说git笨的原因吧。这个时候，你需要手动添加你的文件当暂存区域：
git add filename1 filename2
如果你懒得一个一个加，你可以试试这个：
git add -A
它会把当前目录下所有的文件都添加到暂存区域。
3.添加一个版本
在添加完文件后，你可能觉得应该创建一个commit了。
git commit
怎么样？是不是有点不对劲，好像这个命令并没有按你想象的那样跳出一个提交成功的提示，而是直接跑到了你在配置中指定的编辑器中了。仔细看一下，原来是让你给这个版本做一些备注，随便写点什么，然后保存退出就ok了。如果你不想这么麻烦，可以这么干：
git commit -m ‘initial version’
可能你觉得之前讲的太罗嗦了，提交一个commit还这么麻烦，其实有一个捷径可以使你跳过添加文件这个过程：
git commit -a -m ‘initial version’
大功告成，这个命令会把之前所有的已经添加的文件都加入到这个版本中。
可能你又有疑问了，之前添加的文件不是自动会加入到下一个版本中吗，问什么还加这个-a参数？
其实git add命令只是把指定文件的当前状态添加到暂存区域，并不代表一个文件一旦添加，就会一直存在每个版本中。如果你添加一个文件后对这个又进行了修改，在你commit时候，只会commit这个文件添加时的状态，不会把之后的修改也commit进去，除非你再次添加。
4.推送变更
在你commit完之后，你可能想把自己的代码提交到github或者其他git服务器上，与他人交流共享，这时候就需要和远程服务器打交道了。
如果你是在本地建立起的仓库，默认情况下是没有任何服务器地址的，如果你是从其他服务器复制过来的仓库，这个服务器地址会自动添加到你的仓库中，你可以这样查看：
git remote -v
如果只输入”git remote”，就只会列出服务器端的别名，不会列出地址来。
一个仓库可以有多个服务器地址，这就意味着，你可以从不同的人手中复制同一个仓库，但这并不会打乱你自己的分支，哪怕双方的分支名字都一样。假如你现在在和另外两个人做同一个项目中的同一个分支，你发现A的一个模块正是你想要的，你想把他的代码合并到你现在的版本中，这时候你可以这样做：
git remote add code_a git://url/test.git  //添加对方的地址,code_a是别名
git fetch code_a  //复制对方的仓库到本地，但不合并，git pull会自动合并
git merge code_a/master //把对方master分支合并到自己当前版本下
合并完之后，你可能想提交你的代码到其他的服务器上，这时候你可以先把要提交的服务器地址添加进来，然后这样做：
git push origin master
上面的命令就是把自己master的分支提交到名字为origin的服务器上
5.创建并管理分支
在做项目的时候，你可能会想写一些扩展性的功能，或者做一些小实验，但是你又不想影响你现在的项目。这时候，你可以创建一个分支，然后在这个分支里写东西，当觉得不好的时候，你可以把这个分支删除掉，对你之前的主分支没有任何影响。或者你觉得这个新特性超出了自己的预想，可以合并到主分支里，这时候你只要把工作转回主分支，然后合并分支，最后删除分支，然后就跟那个分支没创建一样。具体操作如下：
git branch test  //创建一个test分支
git checkout test  //转到test分支
edit something...commit something...
git checkout master  //转到master分支
git merge test  //合并test分支
git checkout -b test2  //创建test2分支，并转到test2分支
git branch -d test //删除test分支
git branch  //列出分支列表
git branch -v  //列出分支列表和当前commit
Git merge的实质是把两个版本合在一起，然后在当前分支创建一个新的commit，如果你在两个分支的同一个文件的同一个地方都做了修改，这时候merge就会失败，git就不会自动创建一个新的commit，而是直接停住。你需要手动修改这些冲突的文件，选择这两个分支中的一个版本，或者自己重写这个部分，然后手动添加这些文件到暂存区域，再commit一下就ok了。要查看哪些文件冲突了，可以用”git status”查看。
6.撤消改动
是人就会犯错。当你执行某个命令之后，突然发现，自己写错了，或者漏了一个文件，这时候怎么办？
如果你提交得太早，忘了添加某些文件，你可以这样做：
git commit -m ‘add something ’
git add file1
git commit --amend
最后一个命令会把你当前暂存区域最为上一次的commit。如果你commit以后，马上amend，这时候git会直接跳到编辑commit备注里面，这样你可以修改你上次commit的备注。
如果你添加了不该添加的文件，你可以这样挽回：
git add . //把所有的文件都添加进去
git reset HEAD readme  //把readme文件从暂存区域去除
如果你发现你编辑错了一个文件，你想把它恢复到上一个版本的状态，这时候你可以这样：
git checkout -- filename1 //只撤消这一个文件
如果你觉得这个版本糟糕透了，想完全回滚到上一个版本，你可以干如下事情：
git reset --hard HEAD^
HEAD是指向当前版本，^指当前版本的父版本，这个操作无法撤消。你可以把--hard换成--soft，这只会回退commit信息。还有一个--mixed默认选项，大家可以参考官方文档，查看这3个选项的具体区别。
6、GIT常用命令
Git add
Git clone
Git commit
Git push
Git checkout
Git reset
Git pull
Git status
Git branch
//advanced
Git tag
Git log
Git merge
.用管理员方式打开cmd

2.首先通过pip命令安装wheel
如果提示’pip’不是内部或外部命令，也不是可运行的程序或批处理文件

①将python安装目录下的scripts目录（例如D:\Python27\Scripts）添加到系统环境变量path里，注意前加分号。再执行该命令

pip install wheel

②在cmd下进入到D:\Python27\Scripts目录下执行该命令

pip install wheel
3.安装whl文件

①如果将D:\Python27\Scripts目录添加到path中，可以直接在whl文件所在目录用管理员打开一个cmd窗口，直接执行下面的语句。

pip install python_dateutil-2.5.3-py2.py3-none-any.whl

②否则的话，需要在D:\Python27\Scripts目录下用管理员打开cmd，运行pip命令，文件名应该写全路径）

pip install C:\Users\xxx\Downloads\python_dateutil-2.5.3-py2.py3-none-any.whl

如果使用python的主要目的是为了进行科学计算、数据分析、爬虫等项目，强烈推荐使用Anaconda而不是其他IDE。
Anaconda在python语言外，还集成了numpy、scipy、matplotlib等科学计算包，以及beautiful-soup、requests、lxml等网络相关包。
安装Anaconda后，基本不再需要费劲地安装其他第三方库了。
Windows下安装python的scipy等科学计算包
END
如果一定要死磕
一个基本可以应用到其他IDE、其他第三方库的通用安装方法如下：
首先，确保在pip外，还安装了wheel库。如果没有：打开cmd，输入pip install wheel进行安装。
Windows下安装python的scipy等科学计算包
此方法通过二进制文件安装第三方库，需要在安装前确定好能够安装的版本。
确认方法如下：
在cmd中，输入python进入python（也可在IDE中进行）。
然后输入import pip;print(pip.pep425tags.get_supported())，界面上输出当前python的版本信息，如图。
Windows下安装python的scipy等科学计算包
在www.lfd.uci.edu/%7Egohlke/pythonlibs/上找到相应的whl文件，下载到本地。注意上图中标注的版本信息，应从网页上下载对应的版本为：XXXX-cp35-cp35m-win_amd64.whl
在此处，scipy对应的安装包为scipy?0.18.1?cp35?cp35m?win_amd64.whl（请替换为你的可安装版本）。注意，scipy依赖于numpy+mkl，安装scipy前需要先安装好numpy+mkl。
Windows下安装python的scipy等科学计算包
即使你在此前已经安装过numpy，也请从该页面中找到numpy+mkl的whl，下载到本地，因为重点在于mkl而不是numpy。
Windows下安装python的scipy等科学计算包
通过whl安装库的方法如下：
进入whl文件下载到的文件夹位置，按住shift键的同时，点击鼠标右键，在弹出菜单中选择“在此处打开命令窗口”。
在打开的命令窗口中，输入pip install +whl文件的全名，安装whl。
安装numpy+mkl，输入pip install numpy?1.12.0b1+mkl?cp35?cp35m?win_amd64.whl，按Enter后，等待安装完成。（注意将文件名替换为你的可用版本的名称）
Windows下安装python的scipy等科学计算包
安装scipy，输入pip install scipy?0.18.1?cp35?cp35m?win_amd64.whl，按Enter后，等待安装完成。（注意将文件名替换为你的可用版本的名称）
Windows下安装python的scipy等科学计算包
进入python，输入import scipy，未报错，即表示安装成功。
Windows下安装python的scipy等科学计算包

三、 Git常用命令
（1）git branch 　查看本地分支

（2）git branch -a  　　　　  查看远程分支

（3）git checkout  branchname       切换分支

（4）git add　yourfile

（5）git commit -a -m "描述"　　    提交你当前开发到暂存区，可以理解为你本地的GIT库

（6）git pull　  更新，如果几个人同时在一个分枝上开发，可能会造成不同步，造成自己本地的GIT库落后或提前远程GIT库，这时候就要更新自己本地的库。

（7）git push　提交，将自己开发的代码提交到对应的远程分之上去

（8）git status  查看工作区状态，及查看在此分支上进行了那些操作

（9）git log　　查看操作日志，还是挺有用的

（10）git merge 合并分支，自己开发的模块最终要合并到项目的总分枝上去，这是要先切换到项目总分支，然后 git merge 自己的分支

（11）git branch -d/D   yourbranch  删除本地分支

（12）git push origin :yourbranch    删除远程分支


ubuntu系统，使用apt-get install git即可安装

centos  yum install git

2. 设置Git

在能够使用Git进行工作之前，我们需要进行一次性的配置。为了能让Git能够跟踪谁做了修改，我们需要设置你的用户名。

git config --global user.name "bear2flymoon"

git config --global user.email bear2flymoon@gmail.com

这里我的用户名就设置为：bear2flymoon

邮箱为：bear2flymoon@gmail.com(谷歌被墙，无法登陆)



3. 创建一个本地代码库

假设我们的代码写在机器的/home/bear2flymoon文件夹下的’test'文件夹内。在命令行输入下列命令：

cd /home/bear2flymoon/test/

下面，我们需要告诉Git这个文件夹是我们需要跟踪的项目。所以我们在该目录下输入以下命令来初始化一个新的本地Git代码库

git init

Git会在test文件夹下创建一个名为.git的隐藏文件夹，这就是你的本地代码库。



4. 暂存（stage)文件

我们需要暂存(stage)test文件夹下所有项目文件，输入以下命令:

git add .

最后的“.”符号的意思是“所有文件、文件夹和子文件夹”。假如我们只需要把特定文件添加到源代码控制中去，我们可以指定它们：

git add my_file,my_other_file



5. 提交文件

现在，我们想要提交已经暂存（staged）的文件。我们提交我们的文件时，总是附带着有意义的注释，描述它们现在的状态。我一直用“initial commit"来描述我的第一个提交的注释。

git commit -m "initial commit"

同样，你随时可以回滚到这个提交状态。如果你需要检查现在已暂存和未暂存文件的状态、提交等，你可以输入以下命令询问git的状态：

git status



6. 创建分支

创建分支是你创建代码独立版本的动作，这个新分支独立于你的主干。默认的，每次你提交到Git的代码都会被存储到”master（主干）”分支。

现在，比如我们想向项目中添加一个功能，但我们又想要能够回滚到现在的版本，为了防止出现差错，或者我们会最终放弃这个功能。这时候，我们就可以创建分支并切换到新建的分支，发送命令：

git checkout -b new_feature

或者先创建一个分支，然后切换

git branch new_feature

git checkout new_feature

要看项目下所有的分支，发送命令：

git branch

现在你可以在你的项目上无所顾忌地做任何你想做的：任何时候，你都可以回到你创建分支前的状态。注意，你同时可以有多个分支，甚至可以从一个分支上再创建一个分支。



7. 合并分支

当我们对新功能满意的时候，我们想要把它加到主干分支上。当我们在的新功能分支上时，我们首先需要加载并且提交文件：

git add .

git commit -m "adds my new feature"

然后移到主干分支：

git checkout master

像这样合并：

git merge new_feature

此时，我们的主干分支和新功能分支会变成一样。



8. 丢弃并删除分支

当我们想要丢弃并删除一个分支时，首先加载我们的文件并且在分支里提交：

git add .

git commit -m "feature to be discarded"

然后，移到主干分支

git checkout master

然后发送删除命令

git branch -d new_featrue

假如修改已经合并了，它只会删除分支。假如分支没有合并，我们会得到一个错误信息。删除一个未合并的分支（通常我们不想保留的修改），我们需要发送一样的命令附带一个大写D。意思是“强制删除分支，无论如何我不想要它了。”：

git branch -D new_feature



9. 回滚到之前提交的状态

在某些情况下，我们可能想要回到之前的代码版本。首先，我们需要找到想回到到哪个版本。需要查看所有完成的提交，发送命令：

git log

输出提交的历史记录

commit ca82a6dff817ec66f44342007202690a93763949Author: your_username your_email@domain.comDate:   Mon Nov 4 12:52:11 2013 -0700    changes the frontpage layout
commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7Author: your_username your_email@domain.comDate:   Mon Nov 4 11:40:33 2013 -0700    adds my new feature
commit a11bef06a3f659402fe7563abf99ad00de2209e6Author: your_username your_email@domain.comDate:   Mon Nov 4 10:37:28 2013 -0700    initial commit
如果我们想回到“adds my new feature"这个提交，简单的使用提交的ID做签出（checkout）(通常只用ID的开头9个字母)

git checkout 085bb3bcb

我们也可以签出一个新的分支

git checkout -b my_previous_version 085bb3bcb

只是别太疯狂了！分支越复杂，我们就越难确定我们在做什么。



10. 别名

Git允许我们为常用的命令创建快捷方式（别名）。例如，如果我们不想每次都输入git commit -m “some comment”，而是输入git c “some comment”，我们可以向git全局配置里添加一个别名来实现，像这样：

git config --global alias.c 'commit -m'
这是我使用的别名列表：
git config --global alias.c 'commit -m'
git config --global alias.co 'checkout'
git config --global alias.cob 'checkout -b'
git config --global alias.br 'branch'
git config --global alias.m 'merge'
git config --global alias.a 'add .'
git config --global alias.s 'status'
git config --global alias.dbr 'branch -d'
1. 先用rpm -qa| grep vsftpd命令检查是否已经安装，如果ftp没有安装，使用yum  -y  install vsftpd 安装,(ubuntu 下使用apt-get install vsftpd)
安装之前要更新软件源，保证源是最新的，这样有利于下面在线通过apt-get install命令安装ftp。

命令：sudo apt-get update

安装完之后我们要对它进行配置，才能正常使用。编辑vsftpd的配置文件vi /etc/vsftpd/vsftpd.conf
vi编辑器中的搜索使命是斜杠“/”，然后输入要查找的内容，回车确定。以下是要更改的选项
anonymous_enable=NO  #禁止匿名访问
ascii_upload_enable #允许使用ascii码上传
ascii_download_enable #允许使用ascii码下载
userlist_deny=NO #（这条需手动添加到最后）使用FTP用户表，表里没有的用户需要添加才能登录
设置完毕之后，ESC，冒号wq回车。启动vsftpd服务/etc/init.d/vsftpd start，看到[确定]即为启动成功。

2. service vsftpd start 启动要让FTP每次开机自动启动，运行命令:  chkconfig --level 35 vsftpd on

3. 设置ftp权限
vi  /etc/vsftpd/vsftpd.conf
将anonymous_enable=YES 改为 anonymous_enable=NO
ESC返回,输入“:wq”保存并退出

4. 添加ftp帐号和目录
useradd   -d /alidata/www/wwwroot -s /sbin/nologin pwftp passwd   pwftp chmod -R 755 /alidata/www/wwwroot chown -R  pwftp /alidata/www/wwwroot /etc/rc.d/init.d/vsftpd restart
然后用帐号pwftp密码123456
测试下就可以登陆ftp了。目录是/alidata/www/wwwroot
修改防火墙，允许FTP使用的21端口通过

Linux防火墙配置
重启防火墙service iptables restart之后关闭selinux。不然就不连接不上FTP。

linux关闭selinux
然后reboot重启Linux服务器。
本人使用FlashFXP客户端软件连接，直到出现用户主目录（一般位于/home/用户名），则vsftpd成功安装并运行。然后就能进行文件的上传和下载了。FLASHFXPvACq2ssbvAAAAAC1W7cJKQTzmx77zmqJICvA7d3WnU
tWNXdrp8YuERRFdIvXfOPbcpABkVix2aRTgg6afcIKFPxS72XY
ljdE9tgQD/2r+kmfVBngGM4Qc9p7e0PcTfFF/1tt2bqlxS8r0L
7z0jrqb5NSiPrcf1C8ILDFLj1gnQZNbclKihZxN+TME98NBDCy
9G39o47JhiCC4UqNx3Ryt4C+f34QJeCfvLxrPsnfXVfhM4oywE
xIQA==a




查看目录下有多少个文件及文件夹需在终端输入

1
ls | wc -w
查看目录下有多少个文件需在终端输入

1
ls | wc -c
查看文件夹下有多少个文件，多少个子目录需在终端输入
1
-l
若只想知道文件的个数，则需在终端输入

1
-l |grep ^-|wc -l
目录

假如删除当前目录下最后修改时间是3小时以前的文件
find . -mmin 180 -print | xargs rm -rf
注意-mtime之后带的数字是以24小时为单位的
#find . -mtime +30 -type f | xargs rm -rf


批处理的常见命令（未列举的命令还比较多，请查阅帮助信息）
     1、REM 和 ::
     2、ECHO 和 @
     3、PAUSE
     4、ERRORLEVEL
     5、TITLE
     6、COLOR
     7、mode 配置系统设备
     8、GOTO 和 :
     9、FIND
     10、START
     11、assoc 和 ftype
     12、pushd 和 popd
     13、CALL
     14、shift
     15、IF
     16、setlocal 与 变量延迟
     17、ATTRIB  显示或更改文件属性
======================================================
介绍命令
1、REM 和 ::
REM为注释命令，一般用来给程序加上注解，该命令后的内容不被执行，但能回显。
其次, :: 也可以起到rem 的注释作用, 而且更简洁有效; 但有两点需要注意：
第一, 任何以冒号:开头的字符行, 在批处理中都被视作标号, 而直接忽略其后的所有内容。
有效标号：冒号后紧跟一个以字母数字开头的字符串，goto语句可以识别。
无效标号：冒号后紧跟一个非字母数字的一个特殊符号，goto无法识别的标号，可以起到注释作用，所以 :: 常被用作注释符号，其实 :+ 也可起注释作用。
第 二, 与rem 不同的是, ::后的字符行在执行时不会回显, 无论是否用echo on打开命令行回显状态, 因为命令解释器不认为他是一个有效的命令行, 就此点来看, rem 在某些场合下将比 :: 更为适用; 另外, rem 可以用于 config.sys 文件中。

行内注释格式：%注释内容%  （不常用，慎用）


2、ECHO 和 @
@字符放在命令前将关闭该命令回显，无论此时echo是否为打开状态。
echo命令的作用列举如下：
（1）打开回显或关闭回显功能
    格式:echo [{ on|off }]
    如果想关闭“ECHO OFF”命令行自身的显示，则需要在该命令行前加上“@”。
（2）显示当前ECHO设置状态
    格式:echo
（3）输出提示信息
    格式：ECHO 信息内容
    上述是ECHO命令常见的三种用法，也是大家熟悉和会用的，但作为DOS命令淘金者你还应该知道下面的技巧：
（4）关闭DOS命令提示符
    在DOS提示符状态下键入ECHO OFF，能够关闭DOS提示符的显示使屏幕只留下光标，直至键入ECHO ON，提示符才会重新出现。
（5）输出空行，即相当于输入一个回车
    格式：ECHO．
    值得注意的是命令行中的“．”要紧跟在ECHO后面中间不能有空格，否则“．”将被当作提示信息输出到屏幕。另外“．”可以用，：；”／[\]＋等任一符号替代。
    命令ECHO．输出的回车，经DOS管道转向可以作为其它命令的输入，比如echo.|time即相当于在TIME命令执行后给出一个回车。所以执行时系统会在显示当前时间后，自动返回到DOS提示符状态
（6）答复命令中的提问
    格式：ECHO 答复语|命令文件名
上述格式可以用于简化一些需要人机对话的命令（如：CHKDSK／F；FORMAT Drive:；del *.*）的操作，它是通过DOS管道命令把ECHO命令输出的预置答复语作为人机对话命令的输入。下面的例子就相当于在调用的命令出现人机对话时输入“Y”回车：
C:>ECHO Y|CHKDSK/F
C:>ECHO Y|DEL A :*.*
（7）建立新文件或增加文件内容
格式：ECHO 文件内容>文件名
      ECHO 文件内容>>文件名
例如：
C:>ECHO @ECHO OFF>AUTOEXEC.BAT建立自动批处理文件
C:>ECHO C:\CPAV\BOOTSAFE>>AUTOEXEC.BAT向自动批处理文件中追加内容
C:>TYPE AUTOEXEC.BAT显示该自动批处理文件
@ECHO OFF
C:\CPAV\BOOTSAFE
（8）向打印机输出打印内容或打印控制码
格式：ECHO 打印机控制码>;PRN
      ECHO 打印内容>;PRN
下面的例子是向M－1724打印机输入打印控制码。＜Alt＞156是按住Alt键在小键盘键入156，类似情况依此类推：
C:>ECHO +156+42+116>;PRN（输入下划线命令FS＊t）
C:>ECHO [email=+155@]+155@>;PRN[/email]（输入初始化命令ESC@）
C:>ECHO.>;PRN（换行）
（9）使喇叭鸣响
C:>ECHO ^G
“^G”是在dos窗口中用Ctrl＋G或Alt＋007输入，输入多个^G可以产生多声鸣响。使用方法是直接将其加入批处理文件中或做成批处理文件调用。
这里的“^G”属于特殊符号的使用，请看本文后面的章节


3、PAUSE
PAUSE，玩游戏的人都知道，暂停的意思
在这里就是停止系统命令的执行并显示下面的内容。
例：
PAUSE
运行显示：
请按任意键继续. . .
要显示其他提示语，可以这样用：
Echo 其他提示语 & pause > nul


4、errorlevel
程序返回码
echo %errorlevel%
每个命令运行结束，可以用这个命令行格式查看返回码
用于判断刚才的命令是否执行成功
默认值为0，一般命令执行出错会设 errorlevel 为1


5、title
设置cmd窗口的标题
title 新标题        #可以看到cmd窗口的标题栏变了


6、COLOR
设置默认的控制台前景和背景颜色。
COLOR [attr]
  attr        指定控制台输出的颜色属性
颜色属性由两个十六进制数字指定 -- 第一个为背景，第二个则为
前景。每个数字可以为以下任何值之一:
    0 = 黑色       8 = 灰色
    1 = 蓝色       9 = 淡蓝色
    2 = 绿色       A = 淡绿色
    3 = 湖蓝色     B = 淡浅绿色
    4 = 红色       C = 淡红色
    5 = 紫色       D = 淡紫色
    6 = 黄色       E = 淡黄色
    7 = 白色       F = 亮白色
如果没有给定任何参数，该命令会将颜色还原到 CMD.EXE 启动时
的颜色。这个值来自当前控制台窗口、/T 开关或
DefaultColor 注册表值。
如果用相同的前景和背景颜色来执行 COLOR 命令，COLOR 命令
会将 ERRORLEVEL 设置为 1。
例如: "COLOR fc" 在亮白色上产生亮红色


7、mode 配置系统设备
配置系统设备。
串行口:　　　     MODE COMm[:] [BAUD=b] [PARITY=p] [DATA=d] [STOP=s]
                                [to=on|off] [xon=on|off] [odsr=on|off]
                                [octs=on|off] [dtr=on|off|hs]
                                [rts=on|off|hs|tg] [idsr=on|off]
设备状态:             MODE [device] [/STATUS]
打印重定向:　　 MODE LPTn[:]=COMm[:]
选定代码页:　　 MODE CON[:] CP SELECT=yyy
代码页状态:　　 MODE CON[:] CP [/STATUS]
显示模式:　　     MODE CON[:] [COLS=c] [LINES=n]
击键率:　             MODE CON[:] [RATE=r DELAY=d]
例：
mode con cols=113 lines=15 & color 9f
此命令设置DOS窗口大小：15行，113列


8、GOTO 和 :
GOTO会点编程的朋友就会知道这是跳转的意思。
在批处理中允许以“:XXX”来构建一个标号，然后用GOTO XXX跳转到标号:XXX处，然后执行标号后的命令。
例：
if {%1}=={} goto noparms
if "%2"=="" goto noparms
标签的名字可以随便起，但是最好是有意义的字符串啦，前加个冒号用来表示这个字符串是标签，goto命令就是根据这个冒号（:）来寻找下一步跳到到那里。最好有一些说明这样你别人看起来才会理解你的意图啊。

例：
@echo off
:start
set /a var+=1
echo %var%
if %var% leq 3 GOTO start
pause
运行显示：
1
2
3
4

9、find
在文件中搜索字符串。
FIND [/V] [/C] [/N] [/I] [/OFF[LINE]] "string" [[drive:][path]filename[ ...]]
   /V        显示所有未包含指定字符串的行。
   /C        仅显示包含字符串的行数。
   /N        显示行号。
   /I        搜索字符串时忽略大小写。
   /OFF[LINE] 不要跳过具有脱机属性集的文件。
   "string"   指定要搜索的文字串，
   [drive:][path]filename
         指定要搜索的文件。
如果没有指定路径，FIND 将搜索键入的或者由另一命令产生的文字。
Find常和type命令结合使用
Type [drive:][path]filename | find "string" [>tmpfile] #挑选包含string的行
Type [drive:][path]filename | find /v "string" #剔除文件中包含string的行
Type [drive:][path]filename | find /c #显示文件行数
以上用法将去除find命令自带的提示语（文件名提示）

例：
@echo off
echo 111 >test.txt
echo 222 >>test.txt
find "111" test.txt
del test.txt
pause
运行显示如下：
---------- TEST.TXT
111
请按任意键继续. . .

例：
@echo off
echo 111 >test.txt
echo 222 >>test.txt
type test.txt|find "111"
del test.txt
pause
运行显示如下：
111
请按任意键继续. . .

10、start 命令
批处理中调用外部程序的命令（该外部程序在新窗口中运行，批处理程序继续往下执行，不理会外部程序的运行状况），如果直接运行外部程序则必须等外部程序完成后才继续执行剩下的指令
例：start explorer d:\
调用图形界面打开D盘


11、assoc 和 ftype
文件关联
assoc 设置'文件扩展名'关联，关联到'文件类型'
ftype 设置'文件类型'关联，关联到'执行程序和参数'
当你双击一个.txt文件时，windows并不是根据.txt直接判断用 notepad.exe 打开
而是先判断.txt属于 txtfile '文件类型'
再调用 txtfile 关联的命令行 txtfile=%SystemRoot%\system32\NOTEPAD.EXE %1
可以在"文件夹选项"→"文件类型"里修改这2种关联
assoc           #显示所有'文件扩展名'关联
assoc .txt      #显示.txt代表的'文件类型'，结果显示 .txt=txtfile
assoc .doc      #显示.doc代表的'文件类型'，结果显示 .doc=Word.Document.8
assoc .exe      #显示.exe代表的'文件类型'，结果显示 .exe=exefile
ftype           #显示所有'文件类型'关联
ftype exefile   #显示exefile类型关联的命令行，结果显示 exefile="%1" %*
assoc .txt=Word.Document.8
设置.txt为word类型的文档，可以看到.txt文件的图标都变了
assoc .txt=txtfile
恢复.txt的正确关联

ftype exefile="%1" %*
恢复 exefile 的正确关联
如果该关联已经被破坏，可以运行 command.com ，再输入这条命令


12、pushd 和 popd
切换当前目录
@echo off
c: & cd\ & md mp3       #在 C:\ 建立 mp3 文件夹
md d:\mp4               #在 D:\ 建立 mp4 文件夹
cd /d d:\mp4            #更改当前目录为 d:\mp4
pushd c:\mp3            #保存当前目录，并切换当前目录为 c:\mp3
popd                    #恢复当前目录为刚才保存的 d:\mp4
一般用处不大，在当前目录名不确定时，会有点帮助。（dos编程中很有用）


13、CALL
CALL命令可以在批处理执行过程中调用另一个批处理，当另一个批处理执行完后，再继续执行原来的批处理
CALL command
调用一条批处理命令，和直接执行命令效果一样，特殊情况下很有用，比如变量的多级嵌套，见教程后面。在批处理编程中，可以根据一定条件生成命令字符串，用call可以执行该字符串，见例子。
CALL [drive:][path]filename [batch-parameters]
调用的其它批处理程序。filename 参数必须具有 .bat 或 .cmd 扩展名。
CALL :label arguments
调用本文件内命令段，相当于子程序。被调用的命令段以标签:label开头
以命令goto :eof结尾。
另外，批脚本文本参数参照(%0、%1、等等)已如下改变:
     批脚本里的 %* 指出所有的参数(如 %1 %2 %3 %4 %5 ...)
     批参数(%n)的替代已被增强。您可以使用以下语法:（看不明白的直接运行后面的例子）
         %~1         - 删除引号(")，扩充 %1
         %~f1        - 将 %1 扩充到一个完全合格的路径名
         %~d1        - 仅将 %1 扩充到一个驱动器号
         %~p1        - 仅将 %1 扩充到一个路径
         %~n1        - 仅将 %1 扩充到一个文件名
         %~x1        - 仅将 %1 扩充到一个文件扩展名
         %~s1        - 扩充的路径指含有短名
         %~a1        - 将 %1 扩充到文件属性
         %~t1        - 将 %1 扩充到文件的日期/时间
         %~z1        - 将 %1 扩充到文件的大小
         %~$PATH : 1 - 查找列在 PATH 环境变量的目录，并将 %1
                       扩充到找到的第一个完全合格的名称。如果环境
                       变量名未被定义，或者没有找到文件，此组合键会
                       扩充到空字符串
    可以组合修定符来取得多重结果:
        %~dp1       - 只将 %1 扩展到驱动器号和路径
        %~nx1       - 只将 %1 扩展到文件名和扩展名
        %~dp$PATH:1 - 在列在 PATH 环境变量中的目录里查找 %1，
                       并扩展到找到的第一个文件的驱动器号和路径。
        %~ftza1     - 将 %1 扩展到类似 DIR 的输出行。
    在上面的例子中，%1 和 PATH 可以被其他有效数值替换。
%~ 语法被一个有效参数号码终止。%~ 修定符不能跟 %*使用
注意：参数扩充时不理会参数所代表的文件是否真实存在，均以当前目录进行扩展
要理解上面的知识，下面的例子很关键。
例：
@echo off
Echo 产生一个临时文件 > tmp.txt
Rem 下行先保存当前目录，再将c:\windows设为当前目录
pushd c:\windows
Call :sub tmp.txt
Rem 下行恢复前次的当前目录
Popd
Call :sub tmp.txt
pause
Del tmp.txt
exit
:sub
Echo 删除引号： %~1
Echo 扩充到路径： %~f1
Echo 扩充到一个驱动器号： %~d1
Echo 扩充到一个路径： %~p1
Echo 扩充到一个文件名： %~n1
Echo 扩充到一个文件扩展名： %~x1
Echo 扩充的路径指含有短名： %~s1
Echo 扩充到文件属性： %~a1
Echo 扩充到文件的日期/时间： %~t1
Echo 扩充到文件的大小： %~z1
Echo 扩展到驱动器号和路径：%~dp1
Echo 扩展到文件名和扩展名：%~nx1
Echo 扩展到类似 DIR 的输出行：%~ftza1
Echo.
Goto :eof
例：
set aa=123456
set cmdstr=echo %aa%
call %cmdstr%
pause
本例中如果不用call，而直接运行%cmdstr%，将显示结果%aa%，而不是123456

14、shift
更改批处理文件中可替换参数的位置。
SHIFT [/n]
如果命令扩展名被启用，SHIFT 命令支持/n 命令行开关；该命令行开关告诉
命令从第 n 个参数开始移位；n 介于零和八之间。例如:
    SHIFT /2
会将 %3 移位到 %2，将 %4 移位到 %3，等等；并且不影响 %0 和 %1。
15、IF
IF 条件判断语句，语法格式如下：
IF [NOT] ERRORLEVEL number command
IF [NOT] string1==string2 command
IF [NOT] EXIST filename command
下面逐一介绍，更详细的分析请看后面章节。

(1) IF [NOT] ERRORLEVEL number command
IF ERRORLEVEL这个句子必须放在某一个命令的后面，执行命令后由IF ERRORLEVEL 来判断命令的返回值。
Number的数字取值范围0~255，判断时值的排列顺序应该由大到小。返回的值大于等于指定的值时，条件成立
例：
@echo off
dir c:
rem退出代码为>=1就跳至标题1处执行，>=0就跳至标题0处执行
IF ERRORLEVEL 1 goto 1
IF ERRORLEVEL 0 goto 0
Rem 上面的两行不可交换位置，否则失败了也显示成功。
:0
echo 命令执行成功！
Rem 程序执行完毕跳至标题exit处退出
goto exit
:1
echo 命令执行失败！
Rem 程序执行完毕跳至标题exit处退出
goto exit
:exit
pause
运行显示：命令执行成功！
(2) IF [NOT] string1==string2 command
string1和string2都为字符的数据，英文内字符的大小写将看作不同，这个条件中的等于号必须是两个（绝对相等的意思）
条件相等后即执行后面的command
检测当前变量的值做出判断，为了防止字符串中含有空格，可用以下格式
if [NOT] {string1}=={string2} command
if [NOT] [string1]==[string2] command
if [NOT] "string1"=="string2" command
这种写法实际上将括号或引号当成字符串的一部分了，只要等号左右两边一致就行了，比如下面的写法就不行：
if {string1}==[string2] command

(3) IF [NOT] EXIST filename command
EXIST filename为文件或目录存在的意思
echo off
IF EXIST autoexec.bat echo 文件存在！
IF not EXIST autoexec.bat echo 文件不存在！
这个批处理大家可以放在C盘和D盘分别执行，看看效果



16、setlocal 与 变量延迟
本条内容引用[英雄出品]的批处理教程：
要想进阶，变量延迟是必过的一关！所以这一部分希望你能认真看。
为了更好的说明问题，我们先引入一个例子。
例1:
@echo off
set a=4
set a=5 & echo %a%
pause
结果：4
解说：为什么是4而不是5呢？在echo之前明明已经把变量a的值改成5了？
让我们先了解一下批处理运行命令的机制：
批 处理读取命令时是按行读取的（另外例如for命令等，其后用一对圆括号闭合的所有语句也当作一行），在处理之前要完成必要的预处理工作，这其中就包括对该 行命令中的变量赋值。我们现在分析一下例1，批处理在运行到这句“set a=5 & echo %a%”之前，先把这一句整句读取并做了预处理——对变量a赋了值，那么%a%当然就是4了！（没有为什么，批处理就是这样做的。）
而为了能够感知环境变量的动态变化，批处理设计了变量延迟。简单来说，在读取了一条完整的语句之后，不立即对该行的变量赋值，而会在某个单条语句执行之前再进行赋值，也就是说“延迟”了对变量的赋值。
那么如何开启变量延迟呢？变量延迟又需要注意什么呢？举个例子说明一下：
例2:
@echo off
setlocal enabledelayedexpansion
set a=4
set a=5 & echo !a!
pause
结果：5
解说：启动了变量延迟，得到了正确答案。变量延迟的启动语句是“setlocal enabledelayedexpansion”，并且变量要用一对叹号“!!”括起来（注意要用英文的叹号），否则就没有变量延迟的效果。
分析一下例2，首先“setlocal enabledelayedexpansion”开启变量延迟，然后“set a=4”先给变量a赋值为
4，“set a=5 & echo !a!”这句是给变量a赋值为5并输出（由于启动了变量延迟，所以批处理能够感知到动态变化，即不是先给该行变量赋值，而是在运行过程中给变量赋值，因此此时a的值就是5了）。
再举一个例子巩固一下。
例3:
@echo off
setlocal enabledelayedexpansion
for /l %%i in (1,1,5) do (
set a=%%i
echo !a!
)
pause
结果：
1
2
3
4
5
解说：本例开启了变量延迟并用“!!”将变量扩起来，因此得到我们预期的结果。如果不用变量延迟会出现什
么结果呢？结果是这样的：
ECHO 处于关闭状态。
ECHO 处于关闭状态。
ECHO 处于关闭状态。
ECHO 处于关闭状态。
ECHO 处于关闭状态。
即没有感知到for语句中的动态变化。
提示：在没有开启变量延迟的情况下，某条命令行中的变量改变，必须到下一条命令才能体现。这一点也可以加以利用，看例子。
例：交换两个变量的值，且不用中间变量
@echo off
::目的：交换两个变量的值，但是不使用临时变量
::Code by JM 2007-1-24 [email=CMD@XP]CMD@XP[/email]
::出处：http://www.cn-dos.net/forum/viewthread.php?tid=27078
set var1=abc
set var2=123
echo 交换前： var1=%var1% var2=%var2%
set var1=%var2%& set var2=%var1%
echo 交换后： var1=%var1% var2=%var2%
pause

17、ATTRIB  显示或更改文件属性
ATTRIB [+R|-R] [+A|-A] [+S|-S] [+H|-H] [[drive:] [path] filename] [/S [/D]]
  +   设置属性。
  -    清除属性。
  R   只读文件属性。
  A   存档文件属性。
  S   系统文件属性。
  H   隐藏文件属性。
  [drive:][path][filename]
      指定要处理的文件属性。
  /S  处理当前文件夹及其子文件夹中的匹配文件。
  /D  也处理文件夹。

例：
md autorun
attrib +a +s +h autorun
上面的命令将建立文件夹autorun，然后将其设为存档、系统、隐藏属性

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
第二节 常用特殊符号
    1、@  命令行回显屏蔽符
    2、%  批处理变量引导符
    3、>   重定向符
    4、>>  重定向符
    5、<、>&、<& 重定向符
    6、|  命令管道符
    7、^  转义字符
    8、&  组合命令
    9、&& 组合命令
    10、||  组合命令
    11、""  字符串界定符
    12、, 逗号
    13、; 分号
    14、() 括号
    15、! 感叹号
    16、批处理中可能会见到的其它特殊标记符: （略）
        CR(0D) 命令行结束符
        Escape(1B) ANSI转义字符引导符
        Space(20) 常用的参数界定符
        Tab(09) ; = 不常用的参数界定符
        + COPY命令文件连接符
        * ? 文件通配符
        / 参数开关引导符
        : 批处理标签引导符

废话少说，开讲了
1、@  命令行回显屏蔽符
这个字符在批处理中的意思是关闭当前行的回显。我们从前几课知道
ECHO OFF可以关闭掉整个批处理命令的回显，但不能关掉ECHO OFF这个命令，现在我们在ECHO OFF这个命令前加个@，就可以达到所有命令均不回显的要求

2、%  批处理变量引导符
这个百分号严格来说是算不上命令的，它只是批处理中的参数而已（多个%一起使用的情况除外，以后还将详细介绍）。
引用变量用%var%，调用程序外部参数用%1至%9等等
%0  %1  %2  %3  %4  %5  %6  %7  %8  %9  %*为命令行传递给批处理的参数
%0 批处理文件本身，包括完整的路径和扩展名
%1 第一个参数
%9 第九个参数
%* 从第一个参数开始的所有参数
参数%0具有特殊的功能，可以调用批处理自身，以达到批处理本身循环的目的，也可以复制文件自身等等。
例：最简单的复制文件自身的方法
copy %0 d:\wind.bat
小技巧：添加行内注释
%注释内容%（可以用作行内注释，不能出现重定向符号和管道符号）
为什么这样呢？此时“注释内容”其实被当作变量，其值是空的，故只起注释作用，不过这种用法容易出现语法错误，一般不用。

3、>   重定向符
输出重定向命令
DOS的标准输入输出通常是在标准设备键盘和显示器上进行的，利用重定向,可以方便地将输入输出改向磁盘文件或其它设备。其中:
1.大于号“>”将命令发送到文件或设备，例如打印机>prn。使用大于号“>”时，有些命令输出(例如错误消息)不能重定向。
2.双大于号“>>”将命令输出添加到文件结尾而不删除文件中已有的信息。
3.小于号“<”从文件而不是键盘上获取命令所需的输入。
4.>&符号将输出从一个默认I/O流(stdout,stdin,stderr)重新定向到另一个默认I/O流。
例如，command >output_file 2>&1将处理command过程中的所有错误信息从屏幕重定向到标准文件输出中。标准输出的数值如下所示：
命令重定向的标准句柄

 句柄名称	 值	 说明
 STDIN	0 	标准输入，发送自键盘
 STDUOT	1	标准输出，发送到命令Shell窗口
 STDERR	2 	标准错误输出，发送到命令Shell窗口
 UNDEFINED	3~9 	特定于应用程序的句柄
这个字符的意思是传递并且覆盖，他所起的作用是将运行的结果传递到后面的范围（后边可以是文件，也可以是默认的系统控制台）
在NT系列命令行中，重定向的作用范围由整个命令行转变为单个命令语句，受到了命令分隔符&,&&,||和语句块的制约限制。
比如：
使用命令：echo hello >1.txt将建立文件1.txt，内容为”hello “（注意行尾有一空格）
使用命令：echo hello>1.txt将建立文件1.txt，内容为”hello“（注意行尾没有空格）：
具体重定向实例请看我的另外一篇文章：DOS的重定向命令及在安全方面的应用

4、>>  重定向符
输出重定向命令
这个符号的作用和>有点类似，但他们的区别是>>是传递并在文件的末尾追加，而>是覆盖
用法同上
同样拿1.txt做例子
使用命令：
echo hello > 1.txt
echo world >>1.txt
这时候1.txt 内容如下:
hello
world

5、<、>&、<& 重定向符
这三个命令也是管道命令，但它们一般不常用，你只需要知道一下就ok了，当然如果想仔细研究的话，可以自己查一下资料。(本人已查过，网上也查不到相关资料)
<，输入重定向命令，从文件中读入命令输入，而不是从键盘中读入。
@echo off
echo 2005-05-01>temp.txt
date <temp.txt
del temp.txt
这样就可以不等待输入直接修改当前日期
>&，将一个句柄的输出写入到另一个句柄的输入中。
<&，刚好和>&相反，从一个句柄读取输入并将其写入到另一个句柄输出中。
常用句柄：0、1、2，未定义句柄：3—9
1>nul 表示禁止输出正确的信息
2>nul 表示禁止输出错误信息。
其中的1与2都是代表某个数据流输入输出的地址（NT CMD 称之为句柄，MSDOS称之为设备）。
句柄0：标准输入stdin，键盘输入
句柄1：标准输出stdout，输出到命令提示符窗口（console，代码为CON）
句柄2：标准错误stderr，输出到命令提示符窗口（console，代码为CON）
其中的stdin可被<重定向，stdout可被>、>>重定向。
我们已经知道读取文本中的内容可以用for命令，但如果只需要读取第一行用for命令就有点麻烦。简单的办法如下:
@echo off
set /p str=<%0
echo %str%
pause
运行显示批处理文件自身的第一行：@echo off

6、|  命令管道符
格式：第一条命令 | 第二条命令 [| 第三条命令...]
将第一条命令的结果作为第二条命令的参数来使用，记得在unix中这种方式很常见。
例如：
dir c:\|find "txt"
以上命令是：查找C：\所有，并发现TXT字符串。
FIND的功能请用 FIND /? 自行查看
在不使format的自动格式化参数时，我是这样来自动格式化A盘的
echo y|format a: /s /q /v:system
用过format的都知道，再格盘时要输入y来确认是否格盘，这个命令前加上echo y并用|字符来将echo y的结果传给format命令
从而达到自动输入y的目的
（这条命令有危害性，测试时请慎重）


7、^  转义字符
^是对特殊符号<,>,&的前导字符，在命令中他将以上3个符号的特殊功能去掉，仅仅只把他们当成符号而不使用他们的特殊意义。
比如
echo test ^>1.txt
结果则是：test > 1.txt
他没有追加在1.txt里，呵呵。只是显示了出来
另外，此转义字符还可以用作续行符号。
举个简单的例子：
@echo off
echo 英雄^
是^
好^
男人
pause
不用多说，自己试一下就明白了。
为什么转义字符放在行尾可以起到续行符的作用呢？原因很简单，因为每行末尾还有一个看不见的符号，即回车符，转义字符位于行尾时就让回车符失效了，从而起到了续行的作用。


8、& 组合命令
语法：第一条命令 & 第二条命令 [& 第三条命令...]
&、&&、||为组合命令，顾名思义，就是可以把多个命令组合起来当一个命令来执行。这在批处理脚本里是允许的，而且用的非常广泛。因为批处理认行不认命令数目。
这个符号允许在一行中使用2个以上不同的命令，当第一个命令执行失败了，也不影响后边的命令执行。
这里&两边的命令是顺序执行的，从前往后执行。
比如：
dir z:\ & dir y:\ & dir c:\
以上命令会连续显示z,y,c盘的内容，不理会该盘是否存在


9、&& 组合命令
语法：第一条命令 && 第二条命令 [&& 第三条命令...]
用这种方法可以同时执行多条命令，当碰到执行出错的命令后将不执行后面的命令，如果一直没有出错则一直执行完所有命令
这个命令和上边的类似，但区别是，第一个命令失败时，后边的命令也不会执行
dir z:\ && dir y:\ && dir c:\


10、||  组合命令
语法：第一条命令 || 第二条命令 [|| 第三条命令...]
用这种方法可以同时执行多条命令，当一条命令失败后才执行第二条命令，当碰到执行正确的命令后将不执行后面的命令，如果没有出现正确的命令则一直执行完所有命令；

提示：组合命令和重定向命令一起使用必须注意优先级
管道命令的优先级高于重定向命令，重定向命令的优先级高于组合命令
问题：把C盘和D盘的文件和文件夹列出到a.txt文件中。看例：
dir c:\ && dir d:\ > a.txt
这 样执行后a.txt里只有D盘的信息！为什么？因为组合命令的优先级没有重定向命令的优先级高！所以这句在执行时将本行分成这两部分：dir c:\和dir d:\ > a.txt，而并不是如你想的这两部分：dir c:\ && dir d:\和> a.txt。要使用组合命令&&达到题目的要求，必须得这么写：
dir c:\ > a.txt && dir d:\ >> a.txt
这样，依据优先级高低，DOS将把这句话分成以下两部分：dir c:\ > a.txt和dir d:\ >> a.txt。例十八中的几句的差别比较特殊，值得好好研究体会一下。
当然这里还可以利用&命令（自己想一下道理哦）：
dir c:\ > a.txt & dir d:\ >> a.txt
[这个也可以用 dir c:\;d:\ >>a.txt 来实现]

11、""  字符串界定符
双引号允许在字符串中包含空格，进入一个特殊目录可以用如下方法
cd "program files"
cd progra~1
cd pro*
以上三种方法都可以进入program files这个目录


12、, 逗号
逗号相当于空格，在某些情况下“,”可以用来当做空格使
比如
dir,c:\

13、; 分号
分号，当命令相同时，可以将不同目标用；来隔离，但执行效果不变，如执行过程中发生错误，则只返回错误报告，但程序仍会执行。（有人说不会继续执行，其实测试一下就知道了，只不过它的执行有个规则，请看下面的规则）
比如：
dir c:\;d:\;e:\;z:\
以上命令相当于
dir c:\
dir d:\
dir e:\
dir f:\
如果其中z盘不存在，运行显示：系统找不到指定的路径。然后终止命令的执行。
例：dir c:\;d:\;e:\1.txt
以上命令相当于
dir c:\
dir d:\
dir e:\1.txt
其中文件e:\1.txt不存在，但e盘存在，有错误提示，但命令仍会执行。

规则：(我是在操作系统是XP SP3,英文版下测试的)
1.如果目标路径不存在，则整个语句都不执行，例如dir c:\;c:\dfdfdf\a.txt，则根本不会执行，因为我没有c:\dfdfdf\这个目录；
2.如果路径存在，仅文件不存在，则会继续执行，并且提示文件不存在的错误，例如：dir c:\;c:\temp\a.txt，我的目录中有c:\temp\文件夹，但这个目录下面没有1.txt这个文件。
就说这些了!各位有什么意见请回贴!有什么疑问请到BAT交流区发贴!下一节改进!


14、() 括号
小括号在批处理编程中有特殊的作用，左右括号必须成对使用，括号中可以包括多行命令，这些命令将被看成一个整体，视为一条命令行。
    括号在for语句和if语句中常见，用来嵌套使用循环或条件语句，其实括号()也可以单独使用，请看例子。
例：
命令：echo 1 & echo 2 & echo 3
可以写成：
(
echo 1
echo 2
echo 3
)
上面两种写法效果一样，这两种写法都被视为是一条命令行。
注意：这种多条命令被视为一条命令行时，如果其中有变量，就涉及到变量延迟的问题。


15、! 感叹号
没啥说的，在变量延迟问题中，用来表示变量，即%var%应该表示为!var!，请看前面的setlocal命令介绍。

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
第二章 DOS循环：for命令详解

讲FOR之前呢,咋先告诉各位新手朋友,如果你有什么命令不懂,直接在CMD下面输入:
name /? 这样的格式来看系统给出的帮助文件,比如for /? 就会把FOR命令的帮助全部显示出来!当然许多菜鸟都看不懂....所以才会有那么多批处理文章!!!!俺也照顾菜鸟,把FOR命令用我自己的方式说明下!
正式开始:

一、基本格式
FOR %%variable IN (set) DO command [command-parameters]
  %%variable  指定一个单一字母表示可替换的参数。
  (set)      指定一个或一组文件。可以使用通配符。
  command    指定对每个文件执行的命令。
  command-parameters
             为特定命令指定参数或命令行开关。



参数:FOR有4个参数 /d   /l   /r   /f   他们的作用我在下面用例子解释
现在开始讲每个参数的意思

二、参数 /d
FOR /D %%variable IN (set) DO command [command-parameters]
    如果集中包含通配符，则指定与目录名匹配，而不与文件
    名匹配。
如果 Set (也就是我上面写的 "相关文件或命令") 包含通配符（* 和 ?），将对与 Set 相匹配的每个目录（而不是指定目录中的文件组）执行指定的 Command。
这个参数主要用于目录搜索,不会搜索文件,看这样的例子
@echo off
for /d %%i in (c:\*) do echo %%i
pause
运行会把C盘根目录下的全部目录名字打印出来,而文件名字一个也不显示!
在来一个,比如我们要把当前路径下文件夹的名字只有1-3个字母的打出来
@echo off
for /d %%i in (???) do echo %%i
pause
这样的话如果你当前目录下有目录名字只有1-3个字母的,就会显示出来,没有就不显示了
这里解释下*号和?号的作用,*号表示任意N个字符,而?号只表示任意一个字符
知道作用了,给大家个思考题目!
@echo off
for /d %%i in (window?) do echo %%i
pause
保存到C盘下执行,会显示什么呢?自己看吧! 显示：windows
/D参数只能显示当前目录下的目录名字,这个大家要注意!


三、参数 /R
FOR /R [[drive:]path] %%variable IN (set) DO command [command-parameters]
    检查以 [drive:]path 为根的目录树，指向每个目录中的
    FOR 语句。如果在 /R 后没有指定目录，则使用当前
目录。如果集仅为一个单点(.)字符，则枚举该目录树。

递归
上面我们知道,/D只能显示当前路径下的目录名字,那么现在这个/R也是和目录有关,他能干嘛呢?放心他比/D强大多了!
他可以把当前或者你指定路径下的文件名字全部读取,注意是文件名字,有什么用看例子!
请注意2点：
    1、set中的文件名如果含有通配符(？或*)，则列举/R参数指定的目录及其下面的所用子目录中与set相符合的所有文件，无相符文件的目录则不列举。
    2、相反，如果set中为具体文件名，不含通配符，则枚举该目录树（即列举该目录及其下面的所有子目录），而不管set中的指定文件是否存在。这与前面所说的单点（.）枚举目录树是一个道理，单点代表当前目录，也可视为一个文件。
例：
@echo off
for /r c:\ %%i in (*.exe) do echo %%i
pause
咱们把这个BAT保存到D盘随便哪里然后执行,我会就会看到,他把C盘根目录,和每个目录的子目录下面全部的EXE文件都列出来了!!!!
例：
@echo off
for /r %%i in (*.exe) do @echo %%i
pause
参数不一样了吧!这个命令前面没加那个C:\也就是搜索路径,这样他就会以当前目录为搜索路径,比如你这个BAT你把他放在d:\test目录下执行,那么他就会把D:\test目录和他下面的子目录的全部EXE文件列出来!!!
例：
@echo off
for /r c:\ %%i in (boot.ini) do echo %%i
pause
运行本例发现枚举了c盘所有目录，为了只列举boot.ini存在的目录，可改成下面这样：
@echo off
for /r c:\ %%i in (boot.ini) do if exist %%i echo %%i
pause
用这条命令搜索文件真不错。。。。。。
这个参数大家应该理解了吧!还是满好玩的命令!


四、参数 /L
FOR /L %%variable IN (start,step,end) DO command [command-parameters]
    该集表示以增量形式从开始到结束的一个数字序列。
    因此，(1,1,5) 将产生序列 1 2 3 4 5，(5,-1,1) 将产生
    序列 (5 4 3 2 1)。
使 用迭代变量设置起始值 (Start#)，然后逐步执行一组范围的值，直到该值超过所设置的终止值 (End#)。/L 将通过对 Start# 与 End# 进行比较来执行迭代变量。如果 Start# 小于 End#，就会执行该命令。如果迭代变量超过 End#，则命令解释程序退出此循环。还可以使用负的 Step# 以递减数值的方式逐步执行此范围内的值。例如，(1,1,5) 生成序列 1 2 3 4 5，而 (5,-1,1) 则生成序列 (5 4 3 2 1)。语法是：
看着这说明有点晕吧!咱们看例子就不晕了!
@echo off
for /l %%i in (1,1,5) do @echo %%i
pause
保存执行看效果,他会打印从1 2 3 4 5  这样5个数字
(1,1,5)这个参数也就是表示从1开始每次加1直到5终止!
等会晕,就打印个数字有P用...好的满足大家,看这个例子
@echo off
for /l %%i in (1,1,5) do start cmd
pause
执行后是不是吓了一跳,怎么多了5个CMD窗口,呵呵!如果把那个 (1,1,5)改成 (1,1,65535)会有什么结果,我先告诉大家,会打开65535个CMD窗口....这么多你不死机算你强!
当然我们也可以把那个start cmd改成md %%i 这样就会建立指定个目录了!!!名字为1-65535
看完这个被我赋予破坏性质的参数后,我们来看最后一个参数


五、参数 /F
\迭代及文件解析
使用文件解析来处理命令输出、字符串及文件内容。使用迭代变量定义要检查的内容或字符串，并使用各种options选项进一步修改解析方式。使用options令牌选项指定哪些令牌应该作为迭代变量传递。请注意：在没有使用令牌选项时，/F 将只检查第一个令牌。
文件解析过程包括读取输出、字符串或文件内容，将其分成独立的文本行以及再将每行解析成零个或更多个令牌。然后通过设置为令牌的迭代变量值，调用 for 循环。默认情况下，/F 传递每个文件每一行的第一个空白分隔符号。跳过空行。

详细的帮助格式为：
FOR /F ["options"] %%variable IN (file-set) DO command [command-parameters]
FOR /F ["options"] %%variable IN ("string") DO command [command-parameters]
FOR /F ["options"] %%variable IN ('command') DO command [command-parameters]
    带引号的字符串"options"包括一个或多个
    指定不同解析选项的关键字。这些关键字为:
        eol=c           - 指一个行注释字符的结尾(就一个)(备注：默认以使用；号为行首字符的为注释行)
        skip=n          - 指在文件开始时忽略的行数，(备注：最小为1，n可以大于文件的总行数，默认为1。)
        delims=xxx      - 指分隔符集。这个替换了空格和跳格键的默认分隔符集。
        tokens=x,y,m-n  - 指每行的哪一个符号被传递到每个迭代
                          的 for 本身。这会导致额外变量名称的分配。m-n
                          格式为一个范围。通过 nth 符号指定 mth。如果
                          符号字符串中的最后一个字符星号，
                          那么额外的变量将在最后一个符号解析之后
                          分配并接受行的保留文本。经测试，该参数最多
                          只能区分31个字段。(备注：默认为1，则表示只显示分割后的第一列的内容，最大是31，超过最大则无法表示)
        usebackq        - 使用后引号（键盘上数字1左面的那个键`）。
                        未使用参数usebackq时：file-set表示文件，但不能含有空格
                            双引号表示字符串，即"string"
                            单引号表示执行命令，即'command'
                          使用参数usebackq时：file-set和"file-set"都表示文件
                          当文件路径或名称中有空格时，就可以用双引号括起来
                            单引号表示字符串，即'string'
                            后引号表示命令执行，即`command`

以上是用for /?命令获得的帮助信息，直接复制过来的，括号中的备注为我添加的说明。
晕惨了!我这就举个例子帮助大家来理解这些参数!

For命令例1：****************************************
@echo off
rem 首先建立临时文件test.txt
echo ;注释行,这是临时文件,用完删除 >test.txt
echo 11段 12段 13段 14段 15段 16段 >>test.txt
echo 21段,22段,23段,24段,25段,26段 >>test.txt
echo 31段-32段-33段-34段-35段-36段 >>test.txt
FOR /F "eol=; tokens=1,3* delims=,- " %%i in (test.txt) do echo %%i %%j %%k
Pause
Del test.txt
运行显示结果：
11段 13段 14段 15段 16段
21段 23段 24段,25段,26段
31段 33段 34段-35段-36段
请按任意键继续. . .
为什么会这样?我来解释：
eol=;          分号开头的行为注释行
tokens=1,3*    将每行第1段,第3段和剩余字段分别赋予变量%%i，%%j，%%k
delims=,-     （减号后有一空格）以逗号减号和空格为分隔符，空格必须放在最后

For命令例2：****************************************
@echo off
FOR /F "eol= delims=" %%i in (test.txt) do echo %%i
Pause
运行将显示test.txt全部内容，包括注释行，不解释了哈。

For命令例3：****************************************
另外/F参数还可以以输出命令的结果看这个例子
@echo off
FOR /F "delims=" %%i in ('net user') do @echo %%i
pause
这样你本机全部帐号名字就出来了把扩号内的内容用两个单引号引起来就表示那个当命令执行,FOR会返回命令的每行结果,加那个"delims=" 是为了让我空格的行能整行显示出来,不加就只显示空格左边一列!

基本上讲完了FOR的基本用法了...如果你看过FOR的系统帮助,你会发现他下面还有一些特定义的变量,这些我先不讲.大家因该都累了吧!你不累我累啊....
所谓文武之道，一张一弛，现休息一下。



＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
第三章 FOR命令中的变量
FOR命令中有一些变量,他们的用法许多新手朋友还不太了解,今天给大家讲解他们的用法!

先把FOR的变量全部列出来:
     ~I          - 删除任何引号(")，扩展 %I
     %~fI        - 将 %I 扩展到一个完全合格的路径名
     %~dI        - 仅将 %I 扩展到一个驱动器号
     %~pI        - 仅将 %I 扩展到一个路径
     %~nI        - 仅将 %I 扩展到一个文件名
     %~xI        - 仅将 %I 扩展到一个文件扩展名
     %~sI        - 扩展的路径只含有短名
     %~aI        - 将 %I 扩展到文件的文件属性
     %~tI        - 将 %I 扩展到文件的日期/时间
     %~zI        - 将 %I 扩展到文件的大小
     %~$PATH:I   - 查找列在路径环境变量的目录，并将 %I 扩展
                   到找到的第一个完全合格的名称。如果环境变量名
                   未被定义，或者没有找到文件，此组合键会扩展到
                   空字符串

我们可以看到每行都有一个大写字母"I",这个I其实就是我们在FOR带入的变量,我们FOR语句代入的变量名是什么,这里就写什么.
比如:FOR /F  %%z IN ('set') DO @echo %%z
这里我们代入的变量名是z那么我们就要把那个I改成z,例如%~fI改为%~fz
至于前面的%~p这样的内容就是语法了!

好开始讲解:

一、 ~I          - 删除任何引号(")，扩展 %I
这个变量的作用就如他的说明,删除引号!
我们来看这个例子:
首先建立临时文件temp.txt，内容如下
"1111
"2222"
3333"
"4444"44
"55"55"55
可建立个BAT文件代码如下:
@echo off
echo ^"1111>temp.txt
echo "2222">>temp.txt
echo 3333^">>temp.txt
echo "4444"44>>temp.txt
echo ^"55"55"55>>temp.txt
rem 上面建立临时文件，注意不成对的引号要加转义字符^，重定向符号前不要留空格
FOR /F "delims=" %%i IN (temp.txt) DO echo  %%~i
pause
del temp.txt
执行后,我们看CMD的回显如下:
1111           #字符串前的引号被删除了
2222           #字符串首尾的引号都被删除了
3333"          #字符串前无引号，后面的引号保留
4444"44        #字符串前面的引号删除了，而中间的引号保留
55"55"55       #字符串前面的引号删除了，而中间的引号保留
请按任意键继续. . .
和之前temp.txt中的内容对比一下,我们会发现第1、2、5行的引号都消失了,这就是删除引号~i的作用了!
删除引号规则如下(BAT兄补充!)
1、若字符串首尾同时存在引号，则删除首尾的引号；
2、若字符串尾不存在引号，则删除字符串首的引号；
3、如果字符串中间存在引号，或者只在尾部存在引号，则不删除。
龙卷风补充：无头不删，有头连尾删。


二、 %~fI        - 将 %I 扩展到一个完全合格的路径名
看例子:
把代码保存放在随便哪个地方,我这里就放桌面吧.
FOR /F "delims==" %%i IN ('dir /b') DO @echo  %%~fi
pause
执行后显示内容如下
C:\Documents and Settings\Administrator\桌面\test.bat
C:\Documents and Settings\Administrator\桌面\test.vbs
当我把代码中的 %%~fi直接改成%%i
FOR /F "delims==" %%i IN ('dir /b') DO @echo  %%i
pause
执行后就会显示以下内容：
test.bat
test.vbs
通过对比,我们很容易就看出没有路径了,这就是"将 %I 扩展到一个完全合格的路径名"的作用
也就是如果%i变量的内容是一个文件名的话,他就会把这个文件所在的绝对路径打印出来,而不只单单打印一个文件名,自己动手动实验下就知道了!


三、 %~dI        - 仅将 %I 扩展到一个驱动器号
看例子:
代码如下,我还是放到桌面执行!
FOR /F "delims==" %%i IN ('dir /b') DO @echo  %%~di
pause
执行后我CMD里显示如下
C:
C:
我桌面就两个文件test.bat,test.vbs,%%~di作用是,如果变量%%i的内容是一个文件或者目录名,他就会把他这文件
或者目录所在的盘符号打印出来!


四、 %~pI        - 仅将 %I 扩展到一个路径
这个用法和上面一样,他只打印路径不打印文件名字
FOR /F "delims==" %%i IN ('dir /b') DO @echo  %%~pi
pause
我就不打结果了,大家自己复制代码看结果吧,下面几个都是这么个用法,代码给出来,大家自己看结果吧!


五、 %~nI        - 仅将 %I 扩展到一个文件名
只打印文件名字
FOR /F "delims==" %%i IN ('dir /b') DO @echo  %%~ni
pause


六、 %~xI        - 仅将 %I 扩展到一个文件扩展名
只打印文件的扩展名
FOR /F "delims==" %%i IN ('dir /b') DO @echo  %%~xi
pause


七、 %~sI        - 扩展的路径只含有短名
打印绝对短文件名
FOR /F "delims==" %%i IN ('dir /b') DO @echo  %%~si
pause


八、 %~aI        - 将 %I 扩展到文件的文件属性
打印文件的属性
FOR /F "delims==" %%i IN ('dir /b') DO @echo  %%~ai
pause


九、 %~tI        - 将 %I 扩展到文件的日期/时间
打印文件建立的日期
FOR /F "delims==" %%i IN ('dir /b') DO @echo  %%~ti
pause

十、 %~zI        - 将 %I 扩展到文件的大小
打印文件的大小
FOR /F "delims==" %%i IN ('dir /b') DO @echo  %%~zi
pause
上面例子中的"delims=="可以改为"delims="，即不要分隔符


十一、 %~$PATH:I - 查找列在路径环境变量的目录

并将 %I 扩展到找到的第一个完全合格的名称。如果环境变量名未被定义，或者没有找到文件，此组合键会扩展到空字符串
这是最后一个,和上面那些都不一样,我单独说说!

然后在把这些代码保存为批处理,放在桌面。
@echo off
FOR /F "delims=" %%i IN (“notepad.exe”) DO echo  %%~$PATH:i
pause
龙卷风补充：上面代码显示结果为C:\WINDOWS\system32\notepad.exe
他的意思就在PATH变量里指定的路径里搜索notepad.exe文件，如果有notepad.exe则会把他所在绝对路径打印出来，没有就打印一个错误！

好了,FOR的的变量就介绍到这了!


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
第四章 批处理中的变量
批处理中的变量,我把他分为两类,分别为"系统变量"和"自定义变量"
我们现在来详解这两个变量!

一、系统变量
他们的值由系统将其根据事先定义的条件自动赋值,也就是这些变量系统已经给他们定义了值,
不需要我们来给他赋值,我们只需要调用而以!  我把他们全部列出来!

%ALLUSERSPROFILE% 本地 返回“所有用户”配置文件的位置。
%APPDATA% 本地 返回默认情况下应用程序存储数据的位置。
%CD% 本地 返回当前目录字符串。
%CMDCMDLINE% 本地 返回用来启动当前的 Cmd.exe 的准确命令行。
%CMDEXTVERSION% 系统 返回当前的“命令处理程序扩展”的版本号。
%COMPUTERNAME%  系统 返回计算机的名称。
%COMSPEC%  系统 返回命令行解释器可执行程序的准确路径。
%DATE%  系统 返回当前日期。使用与 date /t 命令相同的格式。由 Cmd.exe 生成。有关
date 命令的详细信息，请参阅 Date。
%ERRORLEVEL%  系统 返回上一条命令的错误代码。通常用非零值表示错误。
%HOMEDRIVE%  系统 返回连接到用户主目录的本地工作站驱动器号。基于主目录值而设置。用
户主目录是在“本地用户和组”中指定的。
%HOMEPATH%  系统 返回用户主目录的完整路径。基于主目录值而设置。用户主目录是在“本地用户和组”中指定的。
%HOMESHARE%  系统 返回用户的共享主目录的网络路径。基于主目录值而设置。用户主目录是
在“本地用户和组”中指定的。
%LOGONSERVER%  本地 返回验证当前登录会话的域控制器的名称。
%NUMBER_OF_PROCESSORS%  系统 指定安装在计算机上的处理器的数目。
%OS%  系统 返回操作系统名称。Windows 2000 显示其操作系统为 Windows_NT。
%PATH% 系统 指定可执行文件的搜索路径。
%PATHEXT% 系统 返回操作系统认为可执行的文件扩展名的列表。
%PROCESSOR_ARCHITECTURE%  系统 返回处理器的芯片体系结构。值：x86 或 IA64 基于
Itanium
%PROCESSOR_IDENTFIER% 系统 返回处理器说明。
%PROCESSOR_LEVEL%  系统 返回计算机上安装的处理器的型号。
%PROCESSOR_REVISION% 系统 返回处理器的版本号。
%PROMPT% 本地 返回当前解释程序的命令提示符设置。由 Cmd.exe 生成。
%RANDOM% 系统 返回 0 到 32767 之间的任意十进制数字。由 Cmd.exe 生成。
%SYSTEMDRIVE% 系统 返回包含 Windows server operating system 根目录（即系统根目录）
的驱动器。
%SYSTEMROOT%  系统 返回 Windows server operating system 根目录的位置。
%TEMP% 和 %TMP% 系统和用户 返回对当前登录用户可用的应用程序所使用的默认临时目录。
有些应用程序需要 TEMP，而其他应用程序则需要 TMP。
%TIME% 系统 返回当前时间。使用与 time /t 命令相同的格式。由 Cmd.exe 生成。有关
time 命令的详细信息，请参阅 Time。
%USERDOMAIN% 本地 返回包含用户帐户的域的名称。
%USERNAME% 本地 返回当前登录的用户的名称。
%USERPROFILE% 本地 返回当前用户的配置文件的位置。
%WINDIR% 系统 返回操作系统目录的位置。

这么多系统变量,我们如何知道他的值是什么呢?
在CMD里输入  echo %WINDIR%
这样就能显示一个变量的值了!
举个实际例子,比如我们要复制文件到当前帐号的启动目录里就可以这样
copy d:\1.bat "%USERPROFILE%\「开始」菜单\程序\启动\"
%USERNAME% 本地 返回当前登录的用户的名称。  注意有空格的目录要用引号引起来

另外还有一些系统变量,他们是代表一个意思,或者一个操作!
他们分别是%0 %1 %2 %3 %4 %5 ......一直到%9 还有一个%*
%0 这个有点特殊,有几层意思,先讲%1-%9的意思.
%1 返回批处理的第一个参数
%2 返回批处理的第二个参数
%3-%9依此推类
反回批处理参数?到底怎么个返回法?
我们看这个例子,把下面的代码保存为test.BAT然后放到C盘下
@echo off
echo %1 %2 %3 %4
echo %1
echo %2
echo %3
echo %4
进入CMD,输入cd c:\
然后输入 test.bat 我是第一个参数 我是第二个参数  我是第三个参数  我是第四个参数
注意中间的空格,我们会看到这样的结果:
我是第一个参数 我是第二个参数 我是第三个参数 我是第四个参数
我是第一个参数
我是第二个参数
我是第三个参数
我是第四个参数
对比下代码,%1就是”我是第一个参数”  %2就是”我是第二个参数”
怎么样理解了吧!

这些%1和%9可以让批处理也能带参数运行,大大提高批处理功能!

还有一个%*  他是什么呢?他的作用不是很大,只是返回参数而已,不过他是一次返回全部参数的值,不用在输入%1 %2来确定一个个的

例子
@echo off
echo %*
同样保存为test.bat 放到C盘
进入CMD,输入cd c:\
然后输入 test.bat 我是第一个参数 我是第二个参数  我是第三个参数  我是第四个参数
可以看到他一次把全部参数都显示出来了

好现在开始讲那个比较特殊的%0

%0  这个不是返回参数的值了,他有两层意思!
第一层意思:返回批处理所在绝对路径
例子:
@echo off
echo %0
pause
保存为test.BAT放在桌面运行,会显示如下结果
"C:\Documents and Settings\Administrator\桌面\test.bat"
他把当前批处理执行的所在路经打印出来了,这就是返回批处理所在绝对路径的意思
第二层意思:无限循环执行BAT
例子:
@echo off
net user
%0
保存为BAT执行,他就会无限循环执行net user这条命令,直到你手动停止.
龙卷风补充：其实%0就是第一参数%1前面那个参数，当然就是批处理文件名（包括路径）。
以上就是批处理中的一些系统变量,另外还有一些变量,他们也表示一些功能,
FOR命令中的那些就是,FOR变量已经说过,就不讲了.


二、自定义变量
故名思意,自定义变量就是由我们来给他赋予值的变量
要使用自定义变量就得使用set命令了,看例子.
@echo off
set var=我是值
echo %var%
pause
保存为BAT执行,我们会看到CMD里返回一个  "我是值"
var为变量名,=号右变的是要给变量的值
这就是最简单的一种设置变量的方法了
如果我们想让用户手工输入变量的值,而不是在代码里指定,可以用用set命令的/p参数
例子:
@echo off
set /p var=请输入变量的值
echo %var%
pause
var变量名  =号右边的是提示语,不是变量的值
变量的值由我们运行后自己用键盘输入!

一、交互界面设计

没啥说的，看看高手设计的菜单界面吧：
@echo off
cls
title 终极多功能修复
:menu
cls
color 0A
echo.
echo                 ==============================
echo                 请选择要进行的操作，然后按回车
echo                 ==============================
echo.
echo              1.网络修复及上网相关设置,修复IE,自定义屏蔽网站
echo.
echo              2.病毒专杀工具，端口关闭工具,关闭自动播放
echo.
echo              3.清除所有多余的自启动项目，修复系统错误
echo.
echo              4.清理系统垃圾,提高启动速度
echo.
echo              Q.退出
echo.
echo.
:cho
set choice=
set /p choice=          请选择:
IF NOT "%choice%"=="" SET choice=%choice:~0,1%
if /i "%choice%"=="1" goto ip
if /i "%choice%"=="2" goto setsave
if /i "%choice%"=="3" goto kaiji
if /i "%choice%"=="4" goto clean
if /i "%choice%"=="Q" goto endd
echo 选择无效，请重新输入
echo.
goto cho
只要学完本教程前面的章节，上面的程序应该能看懂了。





二、if…else…条件语句

前面已经谈到，DOS条件语句主要有以下形式
IF [NOT] ERRORLEVEL number command
IF [NOT] string1==string2 command
IF [NOT] EXIST filename command
增强用法：IF [/I] string1 compare-op string2 command
增强用法中加上/I就不区分大小写了!
增强用法中还有一些用来判断数字的符号：

EQU - 等于
NEQ - 不等于
LSS - 小于
LEQ - 小于或等于
GTR - 大于
GEQ - 大于或等于


上面的command命令都可以用小括号来使用多条命令的组合，包括else子句，组合命令中可以嵌套使用条件或循环命令。

例如:

    IF EXIST filename (
        del filename
    ) ELSE (
        echo filename missing
    )

也可写成：
if exist filename (del filename) else (echo filename missing)
但这种写法不适合命令太多或嵌套命令的使用。注意：else必须和if在同一行，或者和if最后的括号在同一行，如： ......) ELSE (......。在括号那换行程序认为是一条语句。


三、循环语句

1、指定次数循环
FOR /L %variable IN (start,step,end) DO command [command-parameters]

组合命令：
FOR /L %variable IN (start,step,end) DO (
Command1
Command2
……
)

2、对某集合执行循环语句。
FOR %%variable IN (set) DO command [command-parameters]

  %%variable  指定一个单一字母可替换的参数。
  (set)      指定一个或一组文件。可以使用通配符。
  command   对每个文件执行的命令，可用小括号使用多条命令组合。

FOR /R [[drive:]path] %variable IN (set) DO command [command-parameters]

    检查以 [drive:]path 为根的目录树，指向每个目录中的
    FOR 语句。如果在 /R 后没有指定目录，则使用当前
目录。如果集仅为一个单点(.)字符，则枚举该目录树。

同前面一样，command可以用括号来组合：
FOR /R [[drive:]path] %variable IN (set) DO (
Command1
Command2
……
commandn
)

3、条件循环
    上面的循环结构是用for命令来实现的，for命令循环有一个缺点，就是整个循环被当作一条命令语句，涉及到变量延迟的问题。
    利用goto语句和条件判断，dos可以实现条件循环，很简单啦，看例子：

例：
@echo off
set var=0
rem ************循环开始了
:continue
set /a var+=1
echo 第%var%次循环
if %var% lss 100 goto continue
rem ************循环结束了
echo 循环执行完毕
pause

例：
@echo off
set var=100
rem ************循环开始了
:continue
echo 第%var%次循环
set /a var-=1
if %var% gtr 0 goto continue
rem ************循环结束了
echo 循环执行完毕
pause





四、子程序

在批处理程序中可以调用外部可运行程序，比如exe程序，也可调用其他批处理程序，这些也可以看作子程序，但是不够方便，如果被调用的程序很多，就显得不够简明了，很繁琐。
   在windowsXP中，批处理可以调用本程序中的一个程序段，相当于子程序，这些子程序一般放在主程序后面。

子程序调用格式：
  CALL :label arguments

子程序语法：
  :label
  command1
  command2
  ......
  commandn
  goto :eof

在子程序段中，参数%0指标签:label

子过程一般放在最后，并且注意在主程序最后要加上exit或跳转语句，避免错误的进入子过程。

子程序和主程序中的变量都是全局变量，其作用范围都是整个批处理程序。

传至子程序的参数在call语句中指定，在子程序中用%1、%2至%9的形式调用，而子程序返回主程序的数据只需在调用结束后直接引用就可以了，当然也可以指定返回变量，请看下面的例子。

子程序例1：
@echo off
call :sub return
echo 子程序返回值：%return%
pause
goto :eof

:sub
set %1=你好
goto :eof
运行结果：你好



子程序例2：设计一个求多个整数相加的子程序
@echo off
set sum=0
call :sub 10 20 35 40 50
echo 数据求和结果：%sum%
pause
goto :eof

:sub
rem 参数1为返回变量名称
set /a sum+=%1
shift /1
if not "%1"=="" goto sub
goto :eof

运行结果：155

五、用ftp命令实现自动下载

ftp是常用的下载工具，ftp界面中有40多个常用命令，自己学习了，不介绍了。这里介绍如何用dos命令行调用ftp命令，实现ftp自动登录，并上传下载，并自动退出ftp程序。
其实可以将ftp命令组合保存为一个文本文件，然后用以下命令调用即可。

ftp  -n -s:[[drive:]path]filename

上面的filename为ftp命令文件，包括登录IP地址，用户名、密码、操作命令等
例：
open 90.52.8.3   ＃打开ip
user iware       ＃用户为iware
password8848    ＃密码
bin             ＃二进制传输模式
prompt
cd tmp1         ＃切换至iware用户下的tmp1目录
pwd
lcd d:\download   ＃本地目录
mget *          ＃下载tmp1目录下的所有文件
bye             ＃退出ftp




六、用7-ZIP实现命令行压缩和解压功能

语法格式：（详细情况见7-zip帮助文件，看得头晕可以跳过，用到再学）
7z <command> [<switch>...] <base_archive_name> [<arguments>...]

7z.exe的每个命令都有不同的参数<switch>,请看帮助文件
<base_archive_name>为压缩包名称
<arguments>为文件名称，支持通配符或文件列表

其中，7z是至命令行压缩解压程序7z.exe，<command>是7z.exe包含的命令，列举如下：

a： Adds files to archive. 添加至压缩包
a命令可用参数：
  -i (Include)
  -m (Method)
  -p (Set Password)
  -r (Recurse)
  -sfx (create SFX)
  -si (use StdIn)
  -so (use StdOut)
  -ssw (Compress shared files)
  -t (Type of archive)
  -u (Update)
  -v (Volumes)
  -w (Working Dir)
  -x (Exclude)

b： Benchmark
d： Deletes files from archive. 从压缩包中删除文件
d命令可用参数：
  -i (Include)
  -m (Method)
  -p (Set Password)
  -r (Recurse)
  -u (Update)
  -w (Working Dir)
  -x (Exclude)

e： Extract解压文件至当前目录或指定目录
e命令可用参数：
  -ai (Include archives)
  -an (Disable parsing of archive_name)
  -ao (Overwrite mode)
  -ax (Exclude archives)
  -i (Include)
  -o (Set Output Directory)
  -p (Set Password)
  -r (Recurse)
  -so (use StdOut)
  -x (Exclude)
  -y (Assume Yes on all queries)

l： Lists contents of archive.
t： Test
u： Update

x： eXtract with full paths用文件的完整路径解压至当前目录或指定目录
x命令可用参数：
  -ai (Include archives)
  -an (Disable parsing of archive_name)
  -ao (Overwrite mode)
  -ax (Exclude archives)
  -i (Include)
  -o (Set Output Directory)
  -p (Set Password)
  -r (Recurse)
  -so (use StdOut)
  -x (Exclude)
  -y (Assume Yes on all queries)




七、调用VBScript程序

使用 Windows 脚本宿主，可以在命令提示符下运行脚本。CScript.exe 提供了用于设置脚本属性的命令行开关。

用法：CScript 脚本名称 [脚本选项...] [脚本参数...]
选项：
//B       批模式：不显示脚本错误及提示信息
//D       启用 Active Debugging
//E:engine   使用执行脚本的引擎
//H:CScript 将默认的脚本宿主改为 CScript.exe
//H:WScript 将默认的脚本宿主改为 WScript.exe （默认）
//I       交互模式（默认，与 //B 相对)
//Job:xxxx   执行一个 WSF 工作
//Logo    显示徽标（默认）
//Nologo 不显示徽标：执行时不显示标志
//S       为该用户保存当前命令行选项
//T:nn    超时设定秒：允许脚本运行的最长时间
//X       在调试器中执行脚本
//U       用 Unicode 表示来自控制台的重定向 I/O

“脚本名称”是带有扩展名和必需的路径信息的脚本文件名称，如d:/admin/vbscripts/chart.vbs。
“脚本选项和参数”将传递给脚本。脚本参数前面有一个斜杠 (/)。每个参数都是可选的；但不能在未指定脚本名称的情况下指定脚本选项。如果未指定参数，则 CScript 将显示 CScript 语法和有效的宿主参数。




八、将批处理转化为可执行文件

由于批处理文件是一种文本文件，任何人都可以对其进行随便编辑，不小心就会把里面的命令破坏掉，所以如果将其转换成.com格式的可执行文件，不仅执行效率会大大提高，而且不会破坏原来的功能，更能将优先级提到最高。Bat2Com就可以完成这个转换工作。
小 知识：在DOS环境下，可执行文件的优先级由高到低依次为.com>.exe>.bat>.cmd，即如果在同一目录下存在文件名相同 的这四类文件，当只键入文件名时，DOS执行的是name.com，如果需要执行其他三个文件，则必须指定文件的全名，如name.bat。

这是一个只有5.43K大小的免费绿色工具，可以运行在纯DOS或DOS窗口的命令行中，用法：Bat2Com
FileName，这样就会在同一目录下生成一个名为FileNme.com的可执行文件，执行的效果和原来的.bat文件一样。

九、时间延迟

本条参考引用[英雄]教程
什么是时间延迟？顾名思义，就是执行一条命令后延迟一段时间再进行下一条命令。
延迟的应用见下节：“模拟进度条”。
1、利用ping命令延时
例：
  @echo off
  echo 延时前：%time%
  ping /n 3 127.0.0.1 >nul
  echo 延时后：%time%
  pause
解说：用到了ping命令的“/n”参数，表示要发送多少次请求到指定的ip。本例中要发送3次请求到本机的ip（127.0.0.1）。127.0.0.1可简写为127.1。“>nul”就是屏蔽掉ping命令所显示的内容。

2、利用for命令延时
例：
  @echo off
  echo 延时前：%time%
  for /l %%i in (1,1,5000) do echo %%i>nul
  echo 延时后：%time%
  pause
解说：原理很简单，就是利用一个计次循环并屏蔽它所显示的内容来达到延时的目的。

3、利用vbs延迟函数，精确度毫秒，误差1000毫秒内

例：

复制代码
@echo off
echo %time%
call :delay 5000
echo %time%
pause

exit
:delay
echo WScript.Sleep %1>delay.vbs
CScript //B delay.vbs
del delay.vbs
goto :eof
复制代码
运行显示：

10:44:06.45
10:44:11.95
请按任意键继续. . .

上面的运行结果显示实际延时了5500毫秒，多出来的500毫秒时建立和删除临时文件所耗费的时间。误差在一秒之内。


4、仅用批处理命令实现任意时间延迟，精确度10毫秒，误差50毫秒内

仅用批处理命令就可以实现延迟操作。

例：

@echo off
set /p delay=请输入需延迟的毫秒数：
set TotalTime=0
set NowTime=%time%
::读取起始时间，时间格式为：13:01:05.95
echo 程序开始时间：%NowTime%
:delay_continue
set /a minute1=1%NowTime:~3,2%-100
::读取起始时间的分钟数
set /a second1=1%NowTime:~-5,2%%NowTime:~-2%0-100000
::将起始时间的秒数转为毫秒
set NowTime=%time%
set /a minute2=1%NowTime:~3,2%-100
:: 读取现在时间的分钟数
set /a second2=1%NowTime:~-5,2%%NowTime:~-2%0-100000
::将现在时间的秒数转为毫秒
set /a TotalTime+=(%minute2%-%minute1%+60)%%60*60000+%second2%-%second1%
if %TotalTime% lss %delay% goto delay_continue
echo 程序结束时间：%time%
echo 设定延迟时间：%delay%毫秒
echo 实际延迟时间：%TotalTime%毫秒
pause

运行显示：

   请输入需延迟的毫秒数：6000
   程序开始时间：15:32:16.37
   程序结束时间：15:32:22.37
   设定延迟时间：6000毫秒
   实际延迟时间：6000毫秒
   请按任意键继续. . .

实现原理：首先设定要延迟的毫秒数，然后用循环累加时间，直到累加时间大于等于延迟时间。

误差：windows系统时间只能精确到10毫秒，所以理论上有可能存在10毫秒误差。
      经测试，当延迟时间大于500毫秒时，上面的延迟程序一般不存在误差。当延迟时间小于500毫秒时，可能有几十毫秒误差，为什么？因为延迟程序本身也是有运行时间的，同时系统时间只能精确到10毫秒。

为了方便引用，可将上面的例子改为子程序调用形式：

@echo off
echo 程序开始时间：%Time%
call :delay 10
echo 实际延迟时间：%totaltime%毫秒
echo 程序结束时间：%time%
pause
exit

::-----------以下为延时子程序--------------------
:delay
@echo off
if "%1"=="" goto :eof
set DelayTime=%1
set TotalTime=0
set NowTime=%time%
::读取起始时间，时间格式为：13:01:05.95
:delay_continue
set /a minute1=1%NowTime:~3,2%-100
set /a second1=1%NowTime:~-5,2%%NowTime:~-2%0-100000
set NowTime=%time%
set /a minute2=1%NowTime:~3,2%-100
set /a second2=1%NowTime:~-5,2%%NowTime:~-2%0-100000
set /a TotalTime+=(%minute2%-%minute1%+60)%%60*60000+%second2%-%second1%
if %TotalTime% lss %DelayTime% goto delay_continue
goto :eof






十、模拟进度条

下面给出一个模拟进度条的程序。如果将它运用在你自己的程序中，可以使你的程序更漂亮。

@echo off
mode con cols=113 lines=15 &color 9f
cls
echo.
echo  程序正在初始化. . .
echo.
echo  ┌──────────────────────────────────────┐
set/p=  ■<nul
for /L %%i in (1 1 38) do set /p a=■<nul&ping /n 1 127.0.0.1>nul
echo   100%%
echo  └──────────────────────────────────────┘
pause

解说：“set /p a=■<nul”的意思是：只显示提示信息“■”且不换行，也不需手工输入任何信息，这样可以使每个“■”在同一行逐个输出。“ping /n 0 127.1>nul”是输出每个“■”的时间间隔，ping /n 0表示不执行这个命令，所以会比ping出去的时间更短，也就是即每隔多少时间最短输出一个“■”。当然你也可以改为1或2或3等使时间延长

PS:上面的代码执行太快了，并且第一个出现的节奏和后面的不协调，我稍微修改了点，如下：
echo.
echo ┌──────────────────────────────────────┐
ping 127.0.0.1 >nul /n 1 & set /p=<nul
for /L %%i in (1 1 39) do set /p a=■<nul & ping /n 1 127.0.0.1>nul
echo   100%%
echo └──────────────────────────────────────┘
pause




十一、特殊字符的输入及应用

开始 -> 运行 -> 输入cmd -> edit -> ctrl+p（意思是允许输入特殊字符）-> 按ctrl+a将会显示笑脸图案。

（如果要继续输入特殊字符请再次按ctrl+p，然后ctrl+某个字母）

以上是特殊字符的输入方法，选自[英雄]教程，很管用的。也就是用编辑程序edit输入特殊字符，然后保存为一文本文件，再在windows下打开此文件，复制其中的特殊符号即可。

一些简单的特殊符号可以在dos命令窗口直接输入，并用重定向保存为文本文件。
例：
C:>ECHO ^G>temp.txt
“^G”是用Ctrl＋G或Alt＋007输入(按住Alt后，只能按小键盘的数字)，输入多个^G可以产生多声鸣响。


特殊字符的应用也很有意思，这里仅举一例：退格键(输入方法：开始 -> 运行 -> 输入cmd -> edit -> ctrl+p ->退格键)

退格键表示删除左边的字符，此键不能在文档中正常输入，但可以通过edit编辑程序录入并复制出来。即“”。

利用退格键，配合空格覆盖，可以设计闪烁文字效果


例：文字闪烁，可以使用Ctrl+C组合键来强行终运行
@echo off
:start
set/p=床前明月光<nul
::显示文字，光标停于行尾
ping -n 0 127.0.0.1>nul
::设置延迟时间

set /p a=<nul
:: 输出一些退格符将光标置于该行的最左端（退格符的数量可以自己调整）。

ping -n 0 127.0.0.1>nul
::设置延迟时间

set /p a=                               <nul
::输出空格将之前输出的文字覆盖掉。

set /p a=<nul
::再次输出退格符将光标置于该行的最左端，这里的退格符数量一定不能比前面的

空格数少，否则光标不能退到最左端。

ping -n 0 127.0.0.1>nul
::设置延迟时间

goto start

解说：主要是利用set命令的/p，表示后等号面的字符都是提示字符，然后在用退格键，让光标置于该行的最左端，但是原来的文字还在，然后使用空格作为输入提示符，所以就会覆盖前面的文字，然后再次输出退格符将光标置于该行的最左端，循环执行。如果你把ping命令的次数改为4，使延迟增长，就能看到光标的位置变化了。

例：输出唐诗一首，每行闪动多次
@echo off
setlocal enabledelayedexpansion

set str=床前明月光 疑是地上霜 举头望明月 低头思故乡
::定义字符串str
for %%i in (%str%) do (
rem 由于str中含有空格，则以空格为分隔符将str中的每一个部分依次赋给变量%%i。
        set char=%%i
        echo.
        echo.
        for /l %%j in (0,1,5) do (
                set/p=!char:~%%j,1!<nul
  rem 依次取出变量char中的每一个字符，并显示。
                ping -n 0 127.0.0.1>nul
  rem 设置输出每个字符的时间延迟。
        )
call :hero %%i
)
pause>nul
exit

:hero
for /l %%k in (1,1,10) do (
ping /n 0 127.0.0.1>nul
set /p a=<nul
set /p a=                               <nul
set /p a=<nul
ping /n 0 127.0.0.1>nul
set /p a=%1<nul
)
::文字闪动
goto :eof

十二、随机数（%random%）的应用技巧

%RANDOM% 系统变量 返回 0 到 32767 之间的任意十进制数字。由 Cmd.exe 生成。

2的15次方等于32768，上面的0～32767实际就是15位二进制数的范围。

那么，如何获取100以内的随机数呢？很简单，将%RANDOM%按100进行求余运算即可，见例子。

例：生成5个100以内的随机数
  @echo off
  setlocal enabledelayedexpansion
  for /L %%i in (1 1 5) do (
     set /a randomNum=!random!%%100
     echo 随机数：!randomNum!
  )
  pause
运行结果：（每次运行不一样）
随机数：91
随机数：67
随机数：58
随机数：26
随机数：20
请按任意键继续. . .

求余数运算set /a randomNum=!random!%%100中的100可以是1～32768之间的任意整数。

总结：利用系统变量%random%，求余数运算%%，字符串处理等，可以实现很多随机处理。


通过上面的学习，我们知道，%random%可以产生0到32767之间的随机数，但是，如何才能得到一定范围内的随机数呢？
我们可以使用通用的算法公式如下：
　　通用的公式%random%%%(max-min+1)+min来产生[min,max]区间里的随机数，
注：批处理中求模得用两个%%符号。
　　比如，我们想获得4到12之间的随机数，就可以这样来使用，代码如下：

@REM 产生10个[4,12]间的随机数
@echo off
REM 启用延迟环境变量扩展
setlocal enabledelayedexpansion
REM 设置随机数的最小和最大值以及求模用的变量
set min=4
set max=12
set /a mod=!max!-!min!+1

for /l %%i in (1,1,10) do (
REM 产生[min,max]之间的随机数
set /a r=!random!%%!mod!+!min!
echo.
echo 随机数%%i：!r!)

详细出处参考：http://www.jb51.net/article/36489.htm


思考题目：生成给定位数的随机密码
解答思路：将26个英文字母或10数字以及其它特殊字符组成一个字符串，随机抽取其中的若干字符。

参考答案1：（简单）
@echo off
call :randomPassword 5 pass1 pass2
echo %pass1% %pass2%
pause
exit

:randomPassword
::---------生成随机密码
::---------%1为密码长度，%2及以后为返回变量名称
::---------for命令最多只能区分31个字段
@echo off
set password_len=%1
if not defined password_len goto :eof
if %password_len% lss 1 goto :eof
set wordset=a b c d e f g h i j k l m n o p q r s t u v w x y z
set return=
set num=0
:randomPassword1
set /a num+=1
set /a numof=%random%%%26+1
for /f "tokens=%numof% delims= " %%i in ("%wordset%") do set return=%return%%%i
if %num% lss %password_len% goto randomPassword1
if not "%2"=="" set %2=%return%
shift /2
if not "%2"=="" goto randomPassword
goto :eof





参考答案2：（最优）
@echo off
call :randomPassword 6 pass1 pass2 pass3
echo %pass1% %pass2% %pass3%
pause
exit

:randomPassword
::---------生成随机密码
::---------%1为密码长度，%2及以后为返回变量名称
::---------goto循环、变量嵌套、命令嵌套
@echo off
if "%1"=="" goto :eof
if %1 lss 1 goto :eof
set password_len=%1
set return=
set wordset=abcdefghijklmnopqrstuvwxyz023456789_
::---------------------------循环
:randomPassword1
set /a numof=%random%%%36   ::---生成0-35之间的随即数
call set return=%return%%%wordset:~%numof%,1%%   ::---在wordset变量中，从的随即生成的0-35的下一个取出一个字符
set /a password_len-=1
if %password_len% gtr 0 goto randomPassword1
::---------------------------循环
if not "%2"=="" set %2=%return%
shift /2
if not "%2"=="" goto randomPassword
goto :eof



说明：本例涉及到变量嵌套和命令嵌套的应用，见后。





十三、变量嵌套 与 命令嵌套

    和其它编程语言相比，dos功能显得相对简单，要实现比较复杂的功能，需要充分运用各种技巧，变量嵌套与命令嵌套就是此类技巧之一。

先复习一下前面的“字符串截取”的关键内容：

**********************************************
截取功能统一语法格式为：%a:~[m[,n]]%
**********************************************
方括号表示可选，%为变量标识符，a为变量名，不可少，冒号用于分隔变量名和说明部分，符号～可以简单理解为“偏移”即可，m为偏移量（缺省为0），n为截取长度（缺省为全部）。

百分号如果需要当成单一字符，必须写成%%

以上是dos变量处理的通用格式，如果其中的m、n为变量，那么这种情况就是变量嵌套了。

比如设变量word为“abcdefghij”，变量num为“123456789”
%word:~4,1%为e，其中4可以从变量num中取值，即%num:~3,1%，写成组合形式如下：
%word:~%num:~3,1%,1% 经测试这种写法不能正确执行，写成%word:~(%num:~3,1%),1%同样不行，那么，怎么实现这种变量嵌套呢？这就必须结合命令嵌套。

什么是命令嵌套呢？简单的说，首先用一条dos命令生成一个字符串，而这个字符串是另一条dos命令，用call语句调用字符串将其执行，从而得到最终结果。

例：用call语句实现命令嵌套
@echo off
set str1=aaa echo ok bbb
echo 初始字符串：%str1%
echo 生成命令字符串如下：
echo %str1:~4,7%
echo 运行命令字符串生成最终结果为：
call %str1:~4,7%
pause

运行显示：
初始字符串：aaa echo ok bbb
生成命令字符串如下：
echo ok
运行命令字符串生成最终结果为：
ok
请按任意键继续. . .


蠢1
if(savePrintPassBookJsonParams.printTotal != ""&&savePrintPassBookJsonParams.printTotal !=undefined){
							submit_ShowMessage("1","销户成功！",null,printsavePrintPassBookJsonParamsString);
						}else{
							submit_ShowMessage("1","销户成功！",null,closetab);
						}
fxjkinst:RME7.aox

柜员轧账 柜员完工 柜员调阅档案

成功！
交易流水号：30100201611290000853607
单位活期开户成功，年检成功
活期帐号:03060301000008676

4004737890

172.26.2.81:7031/console
 http://172.26.10.213:7051/rams

burpsuite

亚人，铁甲城，喰种，巨人
0101457
201090101017300475
6222084402013736500
513422198910290019

0603:1681  1333
99990124320206010001  内部户

513401196004161011 何晓斌

06010098002165856
6231990000001489514

活期帐号:06010301000003585
06010301000003879

06010301000004477

向美玲
513723199009151582
:/.,321

活期帐号:06010301000003478

6231990000000031374
06010301000002978


成功！
交易流水号：30100201610110000813782
单位活期开户成功，年检成功
活期帐号:06010301000003086




对私  6210570100003000004
单位活期
06010301000015875
 擦擦擦擦擦擦擦擦擦擦擦擦擦擦擦擦擦擦擦车天天天天天天天天天天天天天天天天天天天天天天天天天天天天天天
 06010301000016375
 06010301000016473


06010301000015679
3130511206164830   现金凭证
3130512208177329  转账

保证金总户开户成功,
总户号为:06010350000002381

单位定期
06010524000004967

财政二级
活期帐号:06010349000001669
现金 3130511206164835
转账 3130512208177334
子户账号：06010380000002874
子户号：4

子户账号： 06010380000002580
子户号：2
子户账号： 06010380000002678
子户号：3
子户账号： 06010380000003080
子户号：5






fxjkinst : 328&INst


去去去去去去去去去去
11010119800101007X
活期基本账户 06010301000015474


password : DQw5w2#2

http://localhost:8089/counterFront/html/login4.html
PRD_DATADICTMAPPING 修改保文表公共模板字段


http://172.26.10.201:7051/counterFront/html/login.html?version=1.0.0.20151028  test
http://10.2.35.2:7051/channelApp/LogonAction# production
http://172.24.0.25:7051/channelApp/LogonAction# 开发

172.26.10.213:7051/rams
批次号   SY2014001

ps -ef | grep java  显示进程
kill -9 pid 杀死进程

	 tail -f name
	 nohup ./start-riskclient.sh &

	 db2admin
	 123456

0101授权柜员1311
0603   柜员1626 授权柜员 1333
spoon 工具

30100201511150000529266

1387	000000

/home/chlapp/domains/chlapp_domain/logs/ebanking/applog/20151010

2007201521
交易流水号：30100201601080000659635
单位活期开户成功
活期帐号:03060301000009372

成功！
交易流水号：30100201601080000660440
单位客户开户信息发往集中补录成功！客户号：  2007201523
03060301000009577

201020601004900280
1763 1777  0306机构
1517 1529 1552 0201机构

对公信息修改账号
单位活期开户成功
活期帐号:03060301000009274
06010501000000684

30100201602290000692747



对公账号, 06010301000003380
06010301000003086      01010301000003091




对公活期账号  03060301000008676        20500-企业法人营业执照    110101198001010053   客户号   2007201310
定期账号:  03060524000002575   身份证号： 110101198001010053    玩玩
定期账号： 03060524000002673

协议帐号:03060623000000274
活期帐号:03060301000008774
活期帐号:030603010000088729iu
保证金总户:03060350000000381
保证金账号:03060354000000181
子户号：1
保证金账号:03060371000000278
子户号：2
财政二级总户活期帐号:  03060349000000267
子户账号： 03060380000000277
子户号：1


06030302000001183  理财签约账户
对私账号  6231990000000448263	 6231990000000031374
个人借记卡开户成功！
金融IC卡借记卡账号：  6231990000000448263
签约信息：
公积金联名卡   6231990000000031374


财政支付  06010301000003585

3130511207722504 3130511207722525 22

06010524000003968
证实书号 00005713
存单号 00005501
柜员 1367 ，综合柜员 1706



公积金联名卡卡号规则：   6231990002+8位凭证号+1位校验位0-9
IC卡卡号规则：  6231990000+8位凭证号+1位校验位0-9


凭证号   3130511206166326
协议号   00000111
协议号:00000222

00044821
最小凭证号 3130511207722526
IC卡00045240  00045001
00044826
securitCRT

渠道整合平台5256 柜员号1722 清算中心1199

xu  54402390 许可证E56F46-F1D85F-D331A5-4FDBF3


例子
调用模板打印 PP0005000029
标准表格打印 PP0006000005

qdzrdb  172.26.0.21


菜单 CA_MENUDEF






对私 01010040000067374  销户(测试) ,6221359003100325189  挂失,6210570100003000004  正常,01010098000000776  （开发） ,
01010098001987154  （凭证件）,	 不动户 对公 03060302000039463,06030301000000381
,01010301000011189,99990160600006010001,06010302000009373,06010301000003781,11010301000003588,  机构 1206
11010302000006976,06010349000000367(财政二级账总户),06010349000000171--06010380000000377  （子）--,
内部账： 99990124320203060002 ,11010301000003882,06010349000000171,
保证金账户： 11010302000007378,柜员 1699  密码 123456
账号,06010302000009471


172.26.2.22
ls -lrt文件时间
vi 进入文件
q! 退出vi
wq 保存退出


CREATE

T_TABLE     (
         ID BIGINT NOT NULL,

         START_TIME TIMESTAMP,
         END_TIME TIMESTAMP,

         CONSTRAINT P_KEY_1 PRIMARY KEY (ID)
    )
    ;
COMMENT ON TABLE T_TABLE

IS
    '测试表';



6222084402013736500


172.26.2.111 COUNTER

printenv 查看全局变量

tar归档数据
tar -cvf test.tar test1 test2
列出归档数据
tar -tf test.tar


cat 把档案串连接后传到基本输出（萤幕或加 > fileName 到另一个档案）
chmod 说明:Linux/Unix 的档案存取权限分为三级:档案拥有者,群组,其他。利用 chmod 可以藉以控制档案如何被他人所存取。
cp 将一个档案拷贝至另一档案,或将数个档案拷贝至另一目录
将所有的 C 语言程式拷贝至 Finished 子目录中:
cp *.c Finished
将档案 aaa 复制(已存在),并命名为 bbb:
cp aaa bbb
cut 用法：cut -cnum1-num2 filename
说明：显示每行从开头算起 num1 到 num2 的文字。
find 将档案系统内符合 expression 的档案列出来。
-mount, -xdev:只检查和指定目录在同一个档案系统下的档案,避免列出其它档案系统中
的档案
-amin n:在过去 n 分钟内被读取过
-atime n:在过去 n 天过读取过的档案
-cmin n:在过去 n 分钟内被修改过
-ctime n:在过去 n 天过修改过的档案
-anewer file:比档案 file 更晚被读取过的档案
-empty:空的档案-gid n or -group name:gid 是 n 或是 group 名称是 name
-ipath p, -path p:路径名称符合 p 的档案,ipath 会忽略大小写
-name name, -iname name:档案名称符合 name 的档案。iname 会忽略大小写
less  的作用与 more 十分相似,都可以用来浏览文字档案的内容,不同的是 less 允许使用者往回卷动
mv 将一个档案移至另一档案,或将数个档案移至另一目录。
rm 删除档案及目录。
rmdir 使用方式： rmdir [-p] dirName  说明： 删除空的目录。
tocuh 指令改变档案的时间记录。
split 将一个档案分割成数个
at 可以让使用者指定在 TIME 这个特定时刻执行某个程式或指令,
cal 显示日历
-m:以星期一为每周的第一天方式显示。
-j:以凯撒历显示,即以一月一日起的天数显示。
-y:显示今年年历。

date 可以用来显示或设定系统的日期与时间,在显示方面,使用者可以设定欲显示的格
式,格式设定为一个加号后接数个标记,其中可用的标记列表如下

time 指令的用途,在于量测特定指令执行时所需消耗的时间及系统资源等资讯。
uptime 现在的时间
系统开机运转到现在经过的时间
连线的使用者数量
最近一分钟,五分钟和十五分钟的系统负载

chfn 提供使用者更改个人资讯,用于 finger and mail username
last 	显示系统开机以来获是从每月初登入者的讯息
-R 省略 hostname 的栏位
-num 展示前 num 个
username 展示 username 的登入讯息
who 显示系统中有那些使用者正在上面,显示的资料包含了使用者 ID,使用的终端机,
从那边连上来的,上线时间,呆滞时间,CPU 使用量,动作等等。
talk 与其他使用者对谈
wall 会将讯息传给每一个 mesg 设定为 yes 的上线使用者。当使用终端机介面做为标
准传入时, 讯息结束时需加上 EOF (通常用 Ctrl+D)
write 传讯息给其他使用者
kill 送出一个特定的信号 (signal) 给行程 id 为 pid 的行程根据该信号而做特定
的动作, 若没有指定, 预设是送出终止 (TERM) 的信号
-l (signal):列出所有可用的信号名称
将 pid 为 323 的行程砍掉 (kill):
kill -9 323

ps 显示瞬间行程 (process) 的动态
-A 列出所有的行程
-w 显示加宽可以显示较多的资讯
-au 显示较详细的资讯
-aux 显示所有包含其他使用者的行程

pstree 将所有行程以树状图显示

expr ### 字串长度
shell>> expr length "this is a test"
14
### 数字商数
shell>> expr 14 % 9
5
### 从位置处抓取字串
shell>> expr substr "this is a test" 3 5
is is

cal -jy日历

env 可以看到所有的环境变量

HOME ： 代表使用者的家目录。cd ~ 去到使用者的家目录 或者利用 cd 就可以直接回到使用者家目录了。
PS1：shell的主提示符
 SHELL ： 目前这个环境使用的 SHELL 是哪个程序？ 如果是 bash 的话，预设是 /bin/bash
PWD：用户当前工作目录的路径。它指出用户目前在Linux文件系统中处在什么位置。它是由Linux自动设置的
 HISTSIZE ： 这个与“历史命令”有关，曾经下达过的指令可以被系统记录下来，而记录的“数目”则是由这个值来设定的。

 ENV ： 这个使用者所使用的个性化环境设置文件的读取文件。
MAIL ： 当我们使用 mail 这个指令在收信时，系统会去读取的邮件信箱文件 （mailbox)。
 PATH ： 就是执行文件搜寻的路径，目录与目录中间以冒号(:)分隔， 由于文件的搜寻是依序由 PATH 的变量内的目录来查询，所以，目录的顺序也是重要的喔。
LANG ： 语系文件，很多数据都会用到他，当出现编码错误的时候往往需要设置它，中文编码是zh_CN.UTF8

test n1 -参数 n2（或 –参数 表达式）
真返回0，假返回1。
-lt	小于
-le	小于等于
-gt	大于
-ge	大于等于
-eq	等于
-ne	不等于
-f	存在且是普通文件
-d	存在且是目录
-s	存在且字节数大于0
-r	存在且可读
-w	存在且可写
-x	存在且可执行
-a	逻辑与
-o	逻辑或
！	逻辑非

内部变量
$# ——传送给shell程序的位置参数的数量
$?——最后命令的完成码或者在shell程序内部执行的shell程序（返回值）
$0——shell程序的名称
$*——调用shell程序时所传送的全部参数的单字符串， “参数1”“参数2”…形式保存的参数
$@	“参数1”“参数2”…形式保存的参数
$n	第n个参数
$$	本程序的PID
$!	上一个命令的PID

seq命令：产生1-9的数字序列
  比如  seq 1 4
expr命令：对表达式求值
[]直接求值命令：对被括起来的表达式求值
注意：表达式中，数字和运算符指教要有空格，出现在语句中要加反引号

if分支

if [ $# -eq 0 ]
then
	echo “输入了0个参数”
elif [ $# -gt 1 ]
then echo “输入了多个参数”
else echo “输入了1个参数”
fi

case

case “$#” in
   0) echo “输入了0个参数”	;;
	1) echo “输入了1个参数”	;;
	*) echo “输入了多个参数”;;
esac

for 例子——输出100内10的倍数

	for i in `seq 1  9`
	do
		echo `expr $i \* 10`
	done

或写	echo $(expr $i \* 10)

read 变量1 [变量2 …]
可以从键盘上读取多个变量的值，用户输入数据时，以空格或者Tab键作为分隔。
如果输入的数据个数不够，则从左到右对应赋值，没有输入的变量为空；
如果输入的数据个数超了，则从左到右对应赋值，最后一个变量被赋予剩余的所有数据。


while例子——求1到100的和
i=1
sum=0
while [ $i –le 100 ]
do
	sum=$[$sum+$i]
  i=$[$i+1]
done
echo $sum

1 stdout 标准输出
2 stderr 标准错误
command >file 2>&1
将stdout直接送向file, stderr继承1的管道后,再被送往file,此时,file 只被打开了一次,也只使用了一个管道FD1,它包括了stdout和stderr的内容。

cp /etc/my.conf  >/dev/null  2>&1
/dev/null		空设备
此句命令的结果是：
cp命令没有目标文件,应该输出错误。
2>&1表示错误重定向指向标准输出。
>/dev/null又使标准输出重定向到空，就是不要输出信息
即：一个错误的命令执行，什么功能都不实现，且没有任何信息或错误提示输出。

cat < file > file		文件內容会被洗掉
 stdout、stderr 的管道先准备好才会从 stdin读内容
 > file 会先清空 file，然後才读进 < file ，但此时file已被清空，
因此再重定位读进file的为空
最后cat显示的file就成空了

hour=`date|cut –c 10-11`
第一个有效语句是将命令执行的结果赋给hour变量，所以用反向单引号。
用cut命令从date命令的输出中切割出“小时”信息；这里-c 10-11选项表示只切割10到11列。
这个程序使用了if连用格式，也可以使用if完整格式的嵌套形式



command > filename 把标准输出重定向到一个文件中
command >> filename 把标准输出追加重定向到一个文件中
command 1> fielname 把标准输出重定向到一个文件中
command 2 > filename 把标准错误输出重定向到一个文件中
command < filename > filename2 以filename为标准输入，filename2为标准输出
command < filename 把filename作为命令的标准输入
command << delimiter 从标准输入读入数据，直到遇到delimiter为止


Linux下查看内存与cpu的命令
查看内存的命令： free 查看内存详细信息可以用 cat /proc/meminfo
查看cpu使用情况可以用：ps -加参数 还可以用 top 查看cpu型号信息可以用 cat /proc/cpuinfo
远程桌面可以用 Xmanger 来链接..但首先你需要在linux上做相关配置才行。


如果存在proc文件系统，直接看cpuinfo文件就可以了
cat /proc/cpuinfo
1.top

使用权限：所有使用者

使用方式：top [-] [d delay] [q] [c] [S] [s] [i] [n] [b]

说明：即时显示process的动态

d :改变显示的更新速度，或是在交谈式指令列( interactive command)按s

q :没有任何延迟的显示速度，如果使用者是有superuser的权限，则top将会以最高的优先序执行

c :切换显示模式，共有两种模式，一是只显示执行档的名称，另一种是显示完整的路径与名称S :累积模式，会将己完成或消失的子行程( dead child process )的CPU time累积起来

s :安全模式，将交谈式指令取消,避免潜在的危机

i :不显示任何闲置(idle)或无用(zombie)的行程

n :更新的次数，完成后将会退出top

b :批次档模式，搭配"n"参数一起使用，可以用来将top的结果输出到档案内



范例：

显示更新十次后退出;

top -n 10



使用者将不能利用交谈式指令来对行程下命令:

top -s



将更新显示二次的结果输入到名称为top.log的档案里:

top -n 2 -b < top.log

另附一个命令简介linux traceroutewindows tracert两个命令相当，跟踪网络路由
1. Linux下，如何看每个CPU的使用率：
#top -d 1

之后按下数字1. 则显示多个CPU   （top后按1也一样）
Cpu0  :  1.0%us,  3.0%sy,  0.0%ni, 96.0%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st
Cpu1  :  0.0%us,  0.0%sy,  0.0%ni,100.0%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st

2. 在Linux下，如何确认是多核或多CPU:

#cat /proc/cpuinfo

如果有多个类似以下的项目，则为多核或多CPU:

processor       : 0

......

processor       : 1

3. 如何察看某个进程在哪个CPU上运行：

#top -d 1

之后按下f.进入top Current Fields设置页面：

选中：j: P          = Last used cpu (SMP)

则多了一项：P 显示此进程使用哪个CPU。

Sam经过试验发现：同一个进程，在不同时刻，会使用不同CPU Core.这应该是Linux Kernel SMP处理的。

4. 配置Linux Kernel使之支持多Core：

内核配置期间必须启用 CONFIG_SMP 选项，以使内核感知 SMP。

Processor type and features  ---> Symmetric multi-processing support

察看当前Linux Kernel是否支持（或者使用）SMP

#uname -a



7726往下移一点
7728卡号那框长一点


create index FXJK_INDEX_FIRST on run_rule_info(rule_id,min_trade_time,max_trade_time);
create index FXJK_INDEX_TWICE on trade_flow_info(trade_on_uuid);
create index FXJK_INDEX_THIRD on trade_flow_info_status(trade_on_uuid);SELECT TABNAME FROM SYSCAT.TABLES WHERE TBSPACE='鐞涖劎鈹栭梻鏉戞倳';

db2p閹兼粎鍌╠ -d 閺佺増宓佹惔鎾虫倳 -tablespace 閸︺劎骞囩圭偟绮ㄩ弸婊鑵戞俊鍌欑瑓鐏忚鲸妲 AS閺勭棏utomaitc storage閼峰З鐎涙ê鍋嶉惃鍕級閸愭瑱绱滱R閺勭棏utoresize閻ㄥ嫮缂夐崘 AS閺勭椊es鐠囦焦妲戠悰銊р敄闂傚瓨妲搁懛濮╃涙ê鍋嶉惃 AR閺勭椊es鐠囦焦妲戠悰銊р敄闂傚瓨妲搁懛濮╅幍鈺佺潔閻
statistics
AS AR
YES NO

缁崵绮虹粻锛勬倞閻ㄥ嫮鈹栭梻杈剧礄SMS閿涘鎷伴弫鐗堝祦鎼存挾閻炲棛娈戠粚娲？閿涘湒MS閿涘妲窪B2閺佺増宓佹惔鎾茶厬娑撱倗缁鐎烽惃鍕唨閺堛冪粚娲？閵
娑 SMS 鐞涖劎鈹栭梻瀵告祲閸忓疇浠堥惃鍕崳銊︽Ц閺傚洣娆㈢化鑽ょ埠閻╃秿閿涘矁宀冪箹娴滄稓娲拌ぐ鏇氳厬閻ㄥ嫭鏋冩禒鏈电窗闂呭繒娼冪悰銊р敄闂傜繝鑵戠电钖勯惃鍕梹鑳苯闂瑁ゅ倹鏋冩禒鏈电窗婢х偛濮為懛瀹犳彧閸掓澘鍙炬稉绔存稉閸ｃ劋绗傞惃鍕瀮娴犲墎閮寸紒鐔兼閸掕埖鍨ㄦ潏鎯у煂閺佺増宓佹惔鎾舵畱鐞涖劎鈹栭梻鏉戙亣鐏忓繘妾洪崚韬
DMS 鐞涖劎鈹栭梻瀵告暠閺傚洣娆㈢圭懓娅掗幋鏍у斧婵婢跺洤閸ｃ劎绮嶉幋鎰剁礉鐎瑰啩婊戦惃鍕亣鐏忓繑妲搁崷銊ョ殺鐎圭懓娅掗幐鍥х暰缂佹瑨銆冪粚娲？閺冩儼缂冩畱閵嗗倸缍嬬圭懓娅掓稉娈戦幍閺堝鈹栭梻鎾厴瀹歌尪娴ｈ法鏁ら弮璁圭礉閸掓瑨娑撻缚銆冪粚娲？瀹稿弶寮ч妴鍌欑稻閺勭礉娑 SMS 娑撳秴鎮撻敍灞惧亶閸欎簰娴ｈ法鏁 ALTER TABLESPACE 鐠囧綖閺夈儲鍧婇崝鐘冲灗閹碘晛鐫嶇圭懓娅掗敍灞肩矤閼板苯鍘戠拋绋跨殺閺囨潙閻ㄥ嫬鐡ㄩ崒銊ユ珤缁屾椽妫块幓鎰返缂佹瑨銆冪粚娲？閵嗕颈MS 鐞涖劎鈹栭梻纾嬬箷閸忛攱婀佺粔棰佽礋閳ユ粏鍤滈崝銊ㄧ殶閺佹潙銇囩亸蹇婃繄娈戦崝鐔诲厴閵嗗倸缍嬮崣浜掗懛濮╃拫鍐╂殻婢堆冪毈閻 DMS 鐞涖劎鈹栭梻缈犺厬閻ㄥ嫮鈹栭梻纾嬪☉鍫ｆ妞傞敍瀛孊2 閺佺増宓佹惔鎾堕兇缂佺喎褰查懗钘夋礀閹碘晛鐫嶆稉娑撳灗婢舵矮閲滈弬鍥︽鐎圭懓娅掗妴淇侻S 鐞涖劎鈹栭梻鏉戝徔閺堝琚导闂寸艾閼峰З婢х偤鏆遍惃鍕閼虫垝绲鹃張閳ユ粏鍤滈崝銊ㄧ殶閺佹潙銇囩亸蹇婃繀绗撻梻銊ф暏娴 DMS閵
閸氭暏閸滃瞼閻劏鍤滈崝銊ㄧ殶閺佹潙銇囩亸蹇ョ礄AUTORESIZE閿
缂傝櫣娓烽幆鍛枌娑撳绱濇稉宥勭窗鐎 DMS 鐞涖劎鈹栭梻鏉戞儙閻劏鍤滈崝銊ㄧ殶閺佹潙銇囩亸蹇撳閼冲鍌欑瑓閸掓閸欍儱鍨卞杞扮瑝閸氭暏閼峰З鐠嬪啯鏆ｆ径褍鐨崝鐔诲厴閻 DMS 鐞涖劎鈹栭梻杈剧窗
CREATE TABLESPACE DMS1 MANAGED BY DATABASE
     USING (FILE '/db2files/DMS1' 10 M)鐟曚礁鎯庨悽銊ㄥ殰閸斻劏鐨熼弫鏉戙亣鐏忓繐濮涢懗鏂ょ礉鐏 AUTORESIZE YES 鐎涙劕褰為幐鍥х暰娑 CREATE TABLESPACE 鐠囧綖閻ㄥ嫪绔撮柈銊ュ瀻閿
CREATE TABLESPACE DMS1 MANAGED BY DATABASE
     USING (FILE '/db2files/DMS1' 10 M) AUTORESIZE YES閸︺劌鍑￠崚娑樼紦 DMS 鐞涖劎鈹栭梻缈犵閸氬函绱濇潻妯哄讲娴犮儵姘崇箖閸 ALTER TABLESPACE 鐠囧綖娑撳﹣濞囬悽 AUTORESIZE 鐎涙劕褰為弶銉ユ儙閻劍鍨ㄧ粋浣烘暏閼峰З鐠嬪啯鏆ｆ径褍鐨崝鐔诲厴閿
ALTER TABLESPACE DMS1 AUTORESIZE YES
   ALTER TABLESPACE DMS1 AUTORESIZE NO閺堝琚辨稉鍙炬禒鏍х潣閹嶇礄MAXSIZE 閸 INCREASESIZE閿涘绗岄懛濮╃拫鍐╂殻婢堆冪毈閻ㄥ嫯銆冪粚娲？閻╃鍙ч懕鏂


鐟曚胶婀呮担鐘垫畱鐞涖劎鈹栭梻瀛樻Ц缁崵绮虹粻锛勬倞鏉╂ɑ妲搁弫鐗堝祦鎼存挾閻炲棴绱濈化鑽ょ埠缁狅紕鎮婇惃鍕Ц閼峰З婢х偤鏆遍惃鍕剁礉閺佺増宓佹惔鎾堕悶鍡欐畱鐞涖劎鈹栭梻瀛樻Ц鐟曚焦瀵氱规艾銇囩亸蹇曟畱閵
缁崵绮虹粻锛勬倞閿涙瓔MS
閺佺増宓佹惔鎾堕悶鍡窗DMS

reorg 閸撳秵褰侀崚鐘绘珟娴滃棗銇囬柌蹇旀殶閹圭礉娑撻懜鍎忛崘鍨Ц閼充粙鍣撮弨鎯у毉缁屾椽妫块崙鐑樻降閻ㄥ嫸绱濇担鍡曠瘍閺堝褰查懗鐣屸敄闂傜繝绗夋担鍡樼梾闁插﹥鏂侀崣宥堝矁绻曢弰婢堆呪敄闂傝揪绱濋悽鈺燽2dart閻婀呮妯绘寜娴ｅ秴鎯

reorg table schema.tablename;
runstats on table schema.tablename;


閺屻儰绨℃稉娑撳绁弬娆欑礉閸欎簰闁俺绻冩穱鏁糳atabase_memory缁崵绮洪崣鍌涙殶閺夈儴缂冩殶閹圭氨閸愬懎鐡ㄩ惃鍕▏閻劊鍌炵帛鐠併倖鍎忛崘鍏哥瑓database_memory閻ㄥ嫯缂冩ЦAUTOMATIC閿涘矁绻栭柌灞藉讲娴犮儵姘崇箖娑撳娼伴惃鍕嚒娴犮倖娼垫穱鏁奸崣鍌涙殶閿涘奔鎱ㄩ弨鐟扮暚閸氬氦闁插秵鏌婇崥濮ヾb2


tar -czvf閸
tar -zxvf 鐟
[plain] view plain copy 閸︹揙DE娑撳﹥鐓￠惇瀣╁敩閻胶澧栧ú鍓ф晸閸掔増鍨滈惃鍕敩閻胶澧
$ db2 update db cfg for <db> using database_memory 8000000
$ db2stop force
$ db2start

# Linux 娑 閸欐牞绻樼粙瀣窗閻 cpu 閺堟妯兼畱閸10娑撶箻缁
ps aux|head -1;ps aux|grep -v PID|sort -rn -k +3|head


# linux 娑 閸欐牞绻樼粙瀣窗閻劌鍞寸(MEM)閺堟妯兼畱閸10娑撶箻缁

ps aux|head -1;ps aux|grep -v PID|sort -rn -k +4|head
娴ｈ法鏁ら崨鎴掓姢閻婀呮担鐘垫畱閺佺増宓佹惔鎾舵暏娴滃棗鐏忔垵鍞寸涙﹫绱
$db2 get dbm cfg |grep -i memory

# db2mtrk -i -d -v
Tracking Memory on: 2014/06/22 at 21:50:19

Memory for instance

 Other Memory is of size 63111168 bytes
 FCMBP Heap is of size 851968 bytes
 Database Monitor Heap is of size 983040 bytes
 Total: 64946176 bytes

Memory for database: PA913

 Backup/Restore/Util Heap is of size 65536 bytes
 Package Cache is of size 262144 bytes
 Other Memory is of size 196608 bytes
 Catalog Cache Heap is of size 262144 bytes
 Buffer Pool Heap (1) is of size 24465047552 bytes
 Buffer Pool Heap (System 32k buffer pool) is of size 1835008 bytes
 Buffer Pool Heap (System 16k buffer pool) is of size 1572864 bytes
 Buffer Pool Heap (System 8k buffer pool) is of size 1441792 bytes
 Buffer Pool Heap (System 4k buffer pool) is of size 1376256 bytes
 Shared Sort Heap is of size 0 bytes
 Lock Manager Heap is of size 3881172992 bytes
 Database Heap is of size 94830592 bytes
 Application Heap (47) is of size 131072 bytes
 Application Heap (45) is of size 65536 bytes
 Application Heap (44) is of size 65536 bytes
 Application Heap (43) is of size 65536 bytes
 Application Heap (42) is of size 65536 bytes
 Application Heap (41) is of size 65536 bytes
 Application Heap (40) is of size 65536 bytes
 Application Heap (39) is of size 65536 bytes
 Application Heap (38) is of size 65536 bytes
 Application Heap (37) is of size 65536 bytes
 Application Heap (36) is of size 65536 bytes
 Application Heap (35) is of size 65536 bytes
 Application Heap (34) is of size 65536 bytes
 Application Heap (33) is of size 65536 bytes
 Application Heap (32) is of size 65536 bytes
 Application Heap (31) is of size 65536 bytes
 Application Heap (30) is of size 65536 bytes
 Application Heap (29) is of size 65536 bytes
 Application Heap (28) is of size 65536 bytes
 Application Heap (27) is of size 65536 bytes
 Application Heap (26) is of size 65536 bytes
 Application Heap (25) is of size 65536 bytes
 Application Heap (24) is of size 65536 bytes
 Application Heap (23) is of size 65536 bytes
 Application Heap (22) is of size 65536 bytes
 Application Heap (21) is of size 65536 bytes
 Application Heap (20) is of size 65536 bytes
 Application Heap (19) is of size 65536 bytes
 Application Heap (18) is of size 65536 bytes
 Application Heap (17) is of size 65536 bytes
 Application Heap (16) is of size 65536 bytes
 Application Heap (15) is of size 65536 bytes
 Application Heap (14) is of size 65536 bytes
 Application Heap (13) is of size 65536 bytes
 Application Heap (12) is of size 65536 bytes
 Application Heap (11) is of size 196608 bytes
 Application Heap (10) is of size 65536 bytes
 Application Heap (9) is of size 65536 bytes
 Application Heap (8) is of size 65536 bytes
 Application Heap (7) is of size 131072 bytes
 Applications Shared Heap is of size 393216 bytes
 Total: 28451340288 bytes

閸忔湹鑵戦柌宥囧仯閺勬发emory for database: PA913閳ユ繀绗呴惃鍕ㄦ窂uffer Pool Heap (1) is of size 24465047552 bytes閳ユ繐绱濋悽銊ょ啊鏉25G閻ㄥ嫬鍞寸涙﹫绱濋悽鍙樼艾閹存垹鈥樼规碍鍨滈惃鍕殶閹圭氨娑撴畱閺佺増宓侀柌蹇庣瑝閺勭发婢堆嶇礉閹垫禒銉ュ櫤鐏忔垶鏆熼幑绨遍崘鍛摠鐏忚鲸妲搁幋鎴犳畱妫ｆ牠澶夌啊閵

閺屻儰绨℃稉娑撳绁弬娆欑礉閸欎簰闁俺绻冩穱鏁糳atabase_memory缁崵绮洪崣鍌涙殶閺夈儴缂冩殶閹圭氨閸愬懎鐡ㄩ惃鍕▏閻劊鍌炵帛鐠併倖鍎忛崘鍏哥瑓database_memory閻ㄥ嫯缂冩ЦAUTOMATIC閿涘矁绻栭柌灞藉讲娴犮儵姘崇箖娑撳娼伴惃鍕嚒娴犮倖娼垫穱鏁奸崣鍌涙殶閿涘奔鎱ㄩ弨鐟扮暚閸氬氦闁插秵鏌婇崥濮ヾb2

$ db2 update db cfg for <db> using database_memory 8000000
$ db2stop force
$ db2start

閺佺増宓佹惔鎾诲櫢閸氭倵閿涘苯鍘涢悽銊ラ幋椋庢潻鐐村复娑撴稉瀣殶閹圭氨閿涘瞼鍔ч崥搴″晙娴ｈ法鏁ら垾娓刡2mtrk -i -d -v閳ユ繃鐓￠惇瀣敶鐎涙ü濞囬悽銊﹀剰閸愮绱濈亸鍗炲絺閻滄澘鍞寸涙ê姘ㄦ导姘箒閺勫孩妯夐惃鍕瑓闂勫秲鍌滄暏top閺屻儳婀呯紒鎾寸亯娑旂喓琚导绗

閸︺劎婀＄圭偟娈慏B2娴ｈ法鏁ら幆鍛枌娑撳绱濇穱鏁兼潻娆庨嚋閸婂吋妲搁棁鐟曚焦鍘ч柌宥囨畱閿涘苯褰叉禒銉ュ棘閼板啩绗呴棃銏犲灙閸戣櫣娈戦崣鍌濆啳绁弬娆


select basi.ID,basi.RULE_ID,basi.ALERT_DATE,basi.CUSTOM_ID,basi.OPER_TIME,rule.DISPLAY_NAME,1 as operStatus
from ALERT_BASICINFO basi join XT_RULE_MAIN rule on basi.RULE_ID = rule.id and send_type='1'
where basi.alert_date >='2016-10-27' and basi.alert_date <='2016-10-27'
and   exists ( select * from ALERT_GL_BASIC_DETAIL detail left join ALERT_FLOW_INFO flow on detail.DETAIL_ID = flow.DETAIL_ID
where detail.BASICINFO_ID = basi.id and flow.PERUSE_STATE = 0 );

select * from ALERT_FLOW_INFO flow where exists(select * from ALERT_GL_BASIC_DETAIL detail join ALERT_BASICINFO basi on detail.BASICINFO_ID = basi.id
where detail.DETAIL_ID = flow.DETAIL_ID and basi.id='20071102009800124306320161026165435');
1.1   濡弻銉ч悶鍡欐祲閸忚櫕婀囬崝

RHCS閻ㄥ嫬瀵橀幏4娑撴箛閸斺槄绱濋幐澶屽弾閸氬З妞ゅ搫绨笟婵囬弰绱癱csd閵嗕恭man閵嗕公enced閵嗕购gmanager閵嗗倸褰叉禒銉ゅ▏閻⑩暞ervice閸涙垝鎶ら崥浠犳潻娆庣昂閺堝秴濮熼幋鏍ㄧ叀閻濮搁幀浣靛偊绱檚ervice service_name start/stop/status閿
闂嗗棛鍏㈡稉婀佹稉銈勯嚋閺堝秴濮熼敍灞炬殶閹圭氨閸滃瓗TP閵嗗倹鏆熼幑绨遍張宥呭閸栧懏瀚璙IP閵 閺傚洣娆㈢化鑽ょ埠閵 db2run閼存碍婀版稉澶夐嚋鐠у嫭绨妴鍌濈箹娴滄稑褰叉禒銉︾叀閻娉︾紘銈夊帳缂冩瀮娴 /etc/cluster/cluster.conf閵
閸︺劌娴樿ぐ銏㈡櫕闂堢瑓閿涘奔濞囬悽 system-config-cluster 閸氬З闂嗗棛鍏㈢粻锛勬倞瀹搞儱鍙 閵嗗倸婀崨鎴掓姢鐞涘奔绗呴敍灞煎▏閻⑩暉lustat閸涙垝鎶ら崣浜掗弻銉ф箙闂嗗棛鍏㈤悩鑸典緤绱辨担璺ㄦ暏clusvcadm閸涙垝鎶ら崣浜掗崥濮╅妴浣稿瀼閹广垺婀囬崝掳

list command options
db2 update command options using c off

閸氭垼銆冩稉閸旂姳绔存稉 VARCHAR 閸掓绱
ALTER TABLE distributors ADD COLUMN address VARCHAR(30);

閻⑩暚s閸涙垝鎶ら弻銉ф箙閺勬儊閺堝—b2sysc閸氬骸褰存潻娑氣柤

 閿涘兎s -ef | db2sysc

?  濡弻銉︽殶閹圭氨閺堝秴濮熼崳銊︽Ц閸氾箑褰叉禒銉╂俺绻冪純鎴犵捕鐠佸潡妫
閻╃鍙ч崨鎴掓姢閿涙ing 10.7.63.202
                  telnet 10.7.63.202 60000
                  db2 connect to ddn user db2inst 閿涘牅濞囬悽鈺燽2inst閻劍鍩涢敍



?  楠炲啿褰撮張宥呭閸ｃ劑鍣搁崥鎮楅棁鐟曚礁鎯庨崝銊ф畱閺堝秴濮熷Ч鍥ㄨ娑撳绱
web1閵2閺堝秴濮熼崳:

service tomcat start  閸氬Зtomcat閺堝秴濮

service turbomq start  閸氬Зturbomq閺堝秴濮

/usr/local/GETGPSMaile/run.sh  閸氬З閼惧嘲褰囬柌宀鈻奸弫鐗堟箛閸

閸欐暏ps -ef  | grep java鏉╂稖閺屻儳婀呴弰鎯佽ぐ璇茬俺閸忔娊妫

lvs閺堝秴濮熼崳銊︽￥闂囬崡鏇犲閸氭箛閸斺槄绱濋梾蹇撶磻閺堝搫宓嗛崣鎯庨崝銊ф祲閸忚櫕婀囬崝

?  閹靛濮╅幐鍌濇祰閻╃鍙х挧鍕爱閹垮秳缍
婵″倹鐏塕HCS闂嗗棛鍏㈤崙铏瑰箛瀵倸鐖堕敍灞炬￥濞夋洖鎯庨崝銊﹀灗閸掑洦宕查弫鐗堝祦鎼存挻婀囬崝鈽呯礉閸欎簰闁俺绻冮幍瀣紣閺傜懓绱￠幐鍌濇祰閻╃鍙х挧鍕爱閵嗗倷绲惧銈嗘鏉╂瑤绨虹挧鍕爱瀹歌尙绮￠懘杈╅梿鍡欏參鏉炴閻ㄥ嫮閻炲棴绱濋梿鍡欏參閻樿埖浣逛划婢跺秵鐢鎮楅敍灞界安閸氬本鐗遍柅姘崇箖閹靛浼愰弬鐟扮础閸楁瓕娴囨潻娆庣昂鐠у嫭绨敍灞藉晙娴ｈ法鏁ら梿鍡欏參缁狅紕鎮婂銉ュ徔閸氬З閺堝秴濮熼妴

 littleNoPwdContract

(1) 閸楁瓕娴囨径杈Е閼哄倻鍋ｆ稉濠勬畱鐠у嫭绨



閻у妾伴崙铏瑰箛閺佸懘娈伴惃鍕箛閸斺虫珤閿涘本閺屻儵娉︾紘銈堢カ濠ф劗濮搁幀浣



濡弻銉︽殶閹圭氨鐎圭偘绶ラ弰鎯佸鑼病閸嬫粍閿涘潷s -ef | grep db2sysc閿涘绱濇俊鍌涙弓閸嬫粍娴燽2inst閻劍鍩涢幍褑db2stop閸涙垝鎶ら敍

濡弻銉︽瀮娴犲墎閮寸紒鐔告Ц閸氾箑鍑＄紒蹇撳祻鏉炴枻绱檇f -h閿涘绱濇俊鍌涙弓閸楁瓕娴囨禒oot閻劍鍩涢幍褑 umount 閸涙垝鎶ら敍

濡弻IP閺勬儊瀹歌尙绮＄憴锝夋珟缂佹垵鐣鹃敍鍧昮config閿涘绱濇俊鍌涙弓鐟欙絿绮︽禒oot閻劍鍩涢幍褑 ifconfig eth0:1 down 閸涙垝鎶ら妴



婵″倹鐏夐柈銊ュ瀻鐠у嫭绨弮鐘崇《閸楁瓕娴囬敍宀冨啳妾婚崷銊╁倸缍嬮弮璺烘瑩鍣搁崥鏅犻梾婊勬箛閸斺虫珤閵



(2) 閸︺劌褰查悽銊ㄥΝ閻愰涚瑐閹稿倽娴囩挧鍕爱



閻у妾伴悩鑸典焦鐢摜娈戦張宥呭閸ｇ礉娴爋ot閻劍鍩涢幍褑婵″倷绗呴崨鎴掓姢閿



缂佹垵鐣綱IP閿涙fconfig eth0:1 10.7.63.202 netmask 255.255.255.128 up

閹稿倽娴囬弬鍥︽缁崵绮洪敍姝畂unt /dev/sdb1 /mnt/data

閸氬З閺佺増宓佹惔鎿勭窗su - db2inst

            db2start



(3) 濡弻銉︽殶閹圭氨閻樿埖



閸︹晸EB閺堝秴濮熼崳銊ょ瑐娴燽2inst閻劍鍩涢幍褑婵″倷绗呴崨鎴掓姢閿



鏉╃偞甯撮弫鐗堝祦鎼存搫绱癲b2 connect to ddn user db2inst 閸涙垝鎶

閺屻儴鐞涖劋鑵戦惃鍕殶閹圭窗db2 閳ユ笩elect * from mbl_device fetch first 1 rows only閳


1.2   濡弻B2鐎圭偘绶ラ弰鎯佸鑼病閸氬З

閻⑩暚s閸涙垝鎶ら弻銉ф箙閺勬儊閺堝—b2sysc閸氬骸褰存潻娑氣柤

閿涘兎s -ef | db2sysc


..
娑旂喎褰叉禒銉や簰DB2鐎圭偘绶ラ幍閺堝鍛瑜版洩绱濋柅姘崇箖閸欐垵鍤璬b2start閸涙垝鎶ら弶銉р樻穱婵嗘儙閸斻劋绨＄圭偘绶ラ敍鍫濋弸婊冪杽娓氬鍑＄紒蹇撴儙閸旂礉閸掓瑤绱伴崨濠勭叀SQL1026N  閺佺増宓佹惔鎾堕悶鍡楁珤瀹稿弶绺哄ú浼欑幢閸氾箑鍨敍灞界殺閹跺﹤鐤勬笟瀣儙閸斻劏鎹ｉ弶銉礆



1.3   閺屻儳婀呯悰銊р敄闂傚濮搁幀浣规Ц閸氾附鐢

娴燽2鐎圭偘绶ラ幍閺堝鍛瑜
#db2 conn to ddn
#db2 list tablespaces show detail        //閸︺劌宕熼崚鍡楀隘娑撳﹥鐓￠惇瀣冪粚娲？閻ㄥ嫮濮搁幀,濮濓絽鐖舵潻鏂挎礀0x0000
# db2_all list tablespaces show detail    //閸︺劍澧嶉張澶婂瀻閸栬桨绗傞弻銉ф箙鐞涖劎鈹栭梻瀵告畱閻樿埖

閸欎簰娴ｈ法鏁IST TABLESPACES 閸涙垝鎶ょ涵鐣炬潻鐐村复閺佺増宓佹惔鎾茶厬鐞涖劎鈹栭梻瀵告畱瑜版挸澧犻悩鑸典緤绱濋崣浜掓担璺ㄦ暏SHOW DETAIL闁銆嶉弻銉ф箙鐞涖劎鈹栭梻瀵告畱鐠囷妇绮忔穱鈩冧紖閵嗗倹鐦俊鍌︾礉閹存垳婊戞潻鐐扮瑐SAMPLE閺佺増宓佹惔鎿勭礉閹笛唋ist tablespaces show detail 閿涘苯褰叉禒銉ф箙閸掓壆濮搁幀浣界箲閸ョ偛鍏兼Ц0x0000閿涘本閺冭绱濇担璺ㄦ暏db2tbst閸欎簰閺屻儳婀呴悩鑸典胶绱崣宄版禍搴ｆ畱閻樿埖浣告儓娑斿绱濋崗铚傜秼鐠囩《婵″倷绗呴敍

db2tbst   閸欎簰閺屻儳婀呯紓鏍у娇閹垫禒锝堛冮惃鍕Ц閹

db2tbst 閸涙垝鎶ら幒銉︽暪閸椾礁鍙氭潻娑樺煑閻ㄥ嫮濮搁幀浣哥》绱濋獮鎯扮箲閸ョ偟娴夋惔鏃傛畱鐞涖劎鈹栭梻瀵稿Ц閹降鍌欑伐婵″偊绱濋崨鎴掓姢 db2tbst 0x0008 鏉╂柨娲 State = Load Pending 閵嗗倽宀冮崡浣稿彋鏉╂稑鍩楅惃鍕Ц閹礁鐓庡冀鏉╁洦娼甸崣鍫熸Ц LIST TABLESPACES 閸涙垝鎶ゆ潏鎾冲毉閻ㄥ嫮绮嶉幋鎰板劥閸掑棎鍌濄冪粚娲？閻ㄥ嫬闁劌褰茬憴浣哄Ц閹焦妲搁悽鍗炲礋娑撳Ц閹礁鑲╂畱閸椾礁鍙氭潻娑樺煑閹鎷伴弸鍕灇閻ㄥ嫨鍌欑伐婵″偊绱濇俊鍌涚亯鐞涖劎鈹栭梻瀵告畱閻樿埖浣规Ц Backup Pending閸 Load in Progress閿涘矂鍋呮稊鍫熷鏉╂柨娲栭惃鍕磩閸忕箻閸掕泛鐓庢皑閺 0x20020閿0x00020 + 0x20000閿

1.4   娑撳氦銆冮張澶婂彠閹垮秳缍

?  閺勫墽銇氭稉宥瓸L_ME閸栧綊鍘ら惃鍕閺堝銆冮敍
#db2 list tables | grep MBL_ME
?  閺屻儳婀匨BL_MESSAGE鐞涖劎绮ㄩ弸鍕剁窗
#db2 discribe table MBL_MESSAGE
?  閺勫墽銇氱悰銊よ厬閹甸張澶嬫殶閹圭窗
#db2 "select * from MBL_MESSAGE"
?  閺勫墽銇歁BL_MESSAGELOG鐞涖劋鑵戦崜宄悰灞炬殶閹瑰敶鐎圭櫢绱
#db2 "select * from MBL_MESSAGELOG fetch first n rows only"
?  鐎电厧鍤悰銊ユ嫲閸掔娀娅庣悰銊︽惙娴ｆ粣绱
娓氬閿涙艾鐨bl_messagelog_1127鐞涖劋鑵戦惃鍕殶閹归崙杞拌礋.del閺嶇厧绱￠惃鍕瀮娴
      db2 export to mbl_messagelog_1127.del of del select * from mbl_messagelog_1127"
      閸掔娀娅巑bl_messagelog_1127鐞涖劌寮烽崠鍛儓閻ㄥ嫭鏆熼幑
      db2 drop table mbl_messagelog_1127
1.5   閺屻儳婀呯壕浣烘磸缁屾椽妫

#df -h

1.6   濡弻銉╁帳缂冩瀮娴犳湹淇婇幁

su 閳 db2inst
db2 connect to ddn

閺勫墽銇欴B2闁板秶鐤嗛弬鍥︽娑撶瑢閺佺増宓佹惔鎻筪n閺堝鍙ч幍閺堝淇婇幁绱

閵嗘亯b2inst@db1 ~閵嗘吀b2 get db cfg for ddn show detail|more

閺屻儳婀匘B2闁板秶鐤嗛弬鍥︽閿涘矁绻冨銈呭毉log閻ㄥ嫰鍘ょ純淇婇幁绱

閵嗘亯b2inst@db1 ~閵嗘吀b2 get db cfg for ddn show detail | grep -i log

1.7   閺佺増宓佹惔鎾虫禒鎴掔瑢閹垹閹垮秳缍

1.婢跺洣鍞ら弬鐟扮础

闂嗗棗娲熸稉姘閹恒儱鍙嗛獮鍐插酱娑撴艾濮熺化鑽ょ埠瀹歌尙绮℃稉濠勫殠鏉╂劘娑撱倕鍕炬径姘剧礉閺佺増宓侀柌12GB瀹革箑褰搁敍灞炬殶閹圭氨鐎圭懓娅掗幀璇层亣鐏15GB閿涘本鏆熼幑绨辨担璺ㄦ暏濡楋絾閺冦儱绻旂拋鏉跨秿閿涘苯褰叉禒銉ㄧ箻鐞涘苯婀痪鍨禒濮
閻╁闁插洨鏁ら崷銊у殠閸忋劑鍣烘径鍥﹀敜閻ㄥ嫭鏌熷蹇旀降婢跺洣鍞ら弫缈犻嚋閺佺増宓佹惔鎿勭礉閸︺劌褰傞悽鐔轰绩闂呯偓褎鏅犻梾婊勬閿涘奔濞囬悽銊ユ禒鑺ユ瀮娴犺泛鎷伴弮銉ョ箶閺傚洣娆㈤崣浜掓潻娑滈弮鍫曟？閻愯浠径宥忕礉鐏忓棙鏆熼幑绨遍幁銏犻崚鐗堟櫊闂呮粌褰傞悽鐔烘畱閸撳秳绔撮崚姹

2.婢跺洣鍞ょ粵鏍殣

閻╁閿涘本鏆熼幑绨卞В蹇撱亯閸戝本娅掓稉銈囧仯鏉╂稖娑撳▎鈥冲弿闁插繐娴犳枻绱濇径鍥﹀敜閺傚洣娆㈢涙ɑ鏂侀崷銊︽拱閸︽壆鈥栭惄姗堢礉娣囨繄鏆閺堟潻鎴滆⒈婢垛晝娈戞径鍥﹀敜閵嗗倸娴犺棄鐣幋鎰倵閿涘苯鐨㈡径鍥﹀敜閺傚洣娆㈡导鐘讳礁鍩岀壕浣哥敨閺堢尨绱濇穱婵堟殌閺堟潻50婢垛晝娈戞径鍥﹀敜閵嗗倽绻栭弽閿嬫＆娣囨繆鐦夐弫鐗堝祦鎼存挸娴犺姤鏋冩禒璺虹磽閸︽澘鐡ㄩ弨鎾呯礉閸欏牆鐤勯悳棰佺啊閸忓懎鍨庨崘妞剧稇閵

3.婢跺洣鍞ら惃鍕杽閻

閺佺増宓佹惔鎾舵畱鐎规碍婀￠懛濮╂径鍥﹀敜閺勬俺绻冮幙宥勭稊缁崵绮篶ron缁嬪绨规碍婀￠幍褑婢跺洣鍞ら懘姘拱db2mbk-master閺夈儱鐤勯悳鎵畱閵嗗倽閼存碍婀伴崠鍛婵″倷绗呴崝鐔诲厴閿

(1) 閸︺劎鍤庨崗銊dn閺佺増宓佹惔鎾
(2) 鐏忓棗娴犺姤鏋冩禒绉歛r閸掓壆鐢缚鑵戦妴
(3) 閸掔娀娅庢稉銈呫亯娴犮儰绗傞惃鍕＋婢跺洣鍞ら弬鍥︽閵
(4) 鐏忓棙鐦℃い瑙勬惙娴ｆ粎娈戦弮鍫曟？閵嗕胶绮ㄩ弸婊嗚ぐ鏇炲煂婢跺洣鍞ら弮銉ョ箶娑
(5) 閼峰З濞撳懐鎮婃径鍥﹀敜閺冦儱绻旈妴

4.婢跺洣鍞ら惃鍕弻

濡弻銉︽殶閹圭氨閻ㄥ嫬娴犺姤鍎忛崘鐢告付鐟曚礁婀張宥呭閸ｂ暊b1.db2.com娑撳﹨绻樼悰宀嬬礉閸栧懏瀚禒銉ょ瑓閸愬懎閿

(1) 濡弻銉ユ禒鑺ユ瀮娴犺埖妲搁崥锔炬晸閹

婢跺洣鍞ら弬鍥︽鐎涙ɑ鏂侀崷 /home/db2inst/db2backup/backup 閻╃秿娑撳绱濋弬鍥︽閸氬秶袨缁鎶DDN.0.db2inst.NODE0000.CATN0000.20091109164735.001閿涘本鐢憡鍎忛崘鍏哥瑓鐠囥儳娲拌ぐ鏇氱瑓鎼存棁閺堝娓舵潻鎴滆⒈婢垛晝鏁撻幋鎰畱娑撱倓閲滄径鍥﹀敜閺傚洣娆㈤妴

(2) 濡弻銉ユ禒鍊熺箖缁嬪妲搁崥锔界敮

婢跺洣鍞ら弮銉ョ箶鐎涙ɑ鏂侀崷 /home/db2inst/db2exec/log 閻╃秿娑撳绱濋弮銉ョ箶閺傚洣娆㈤崥宥勮礋backup.log閵嗗倹鐦℃径鈺佹禒鍊熷壖閺堝⒔鐞涘矁绻冪粙瀣╄厬娴兼艾婀径鍥﹀敜閺冦儱绻旀稉瑜版洖娴犺姤鏆熼幑绨遍妴涔糰r婢跺洣鍞ら弬鍥︽閸掓壆鐢负浣稿灩闂勩倖妫径鍥﹀敜閺傚洣娆㈢粵澶嬫惙娴ｆ粎娈戠挧閿嬮弮鍫曟？娑撳海绮ㄩ弸婊愮礉閸欎簰闁俺绻冩潻娆庣昂鐠佹澘缍嶇涵鐣炬径鍥﹀敜閺勬儊濮濓絽鐖舵潻娑滈妴

(3) 濡弻銉︽拱閸︽壆閻╂鈹栭梻

婢跺洣鍞ら惄缍嶆担宥勭艾閺堟勾绾句胶娲忛惃鍕壌閸掑棗灏敍灞戒海鐠佹儳娴犺姤鏋冩禒鍓佹畱婢堆冪毈娑撶皠 GB閿涘矂鍋呮稊鍫ｉ崚鍡楀隘閻ㄥ嫬澧挎担娆戔敄闂傚瓨娓舵總钘夈亣娴2n GB閿涘本娓剁亸鎴滅瘍鐟曚礁銇囨禍宸+2 GB閵

(4) 濡弻銉ユ禒鑺ユ瀮娴犺埖妲搁崥ar閸掓壆鐢
闁俺绻 tar -tvf /dev/st0 閸涙垝鎶ら弻銉ф箙绾句礁鐢惃鍕敶鐎圭櫢绱濈涵閺勫墽銇氱紒鎾寸亯娑撴箒閺堥弬鎵畱婢跺洣鍞ら弬鍥︽閵嗗倸缍嬬壕浣哥敨娑撴畱婢跺洣鍞ら弬鍥︽鏉堝啫閺冭绱濇潻娆庨嚋閹垮秳缍旈崣鍏橀懞杈瀭瀵板牓鏆遍弮鍫曟？閵
濡弻銉ユ禒浠嬪帳缂冩瀮娴犺埖鍎忛崘纰夌窗
閵嗘亯b2inst@db1 ~閵$ crontab -l
婢跺洣鍞ら弬鍥︽鐎涙ɑ鏂侀惄缍嶉敍
閵嗘亯b2inst@db1 ~閵$ cd db2exec/bin
濡弻銉ラ悽銊︽殶閹圭氨閺堝秴濮熼崳銊︽殶閹圭氨鏉╂劘閺勬儊濮濓絽鐖堕敍
 婢跺洨鏁ら張宥呭閸ｇ窗db2 connnect to db2
             Db2 list tables
             Db2 閳ユ笩elect count(*) from mb1_device閳
閻劑娉︾紘銈囬悶鍡椾紣閸忓嘲鐨㈤弫鐗堝祦鎼存挻婀囬崝鈥冲瀼閹广垹鍩屾径鍥╂暏DB閺堝秴濮熼崳绱
Clusvcadm 閳ユ悜 <閺堝秴濮熼崥>  -m <閹存劕鎲抽崥>
鏉╂稖閺佺増宓佹惔鎾舵畱RESTORE閹垹閿涘牆閺嬫粌鍤悳鐧漄L0322N闁挎瑨閿涘苯鍨穱鏁糄B2CODEPAGE閸欏倹鏆熼敍宀鍔ч崥搴ㄥ櫢閺傜増澧界悰瀹篹store閸涙垝鎶ら敍澶涚窗
娑撶粯婀囬崝鈥虫珤db1:  db2 restore db ddn from /home/db2inst/ddnback taken at <婢跺洣鍞ら弬鍥︽閺冨爼妫块幋> to /mnt/data     娓氬閿涙瓰b2set db2codepage=819
鏉╂稖閺佺増宓佹惔鎾舵畱ROLLFORWARD閹垹閿
娑撶粯婀囬崝鈥虫珤db1:    db2  rollforward db ddn to end of logs and stop
濞村鐦弫鐗堝祦鎼存挾濮搁幀渚婄窗
娑撶粯婀囬崝鈥虫珤閿 db2 connect to db2
           閻掕泛鎮 db2 list tables
           閻掕泛鎮 db2閳ユ嫉elect count(*) from mb1_device閳
           閻掕泛鎮 db2set db2codepage=1386
1.8   濡弻銉ョ秺濡楋絾妫╄箛妤冩祲閸忚櫕鎼锋担

鐠囬鈥樻穱婵囨た閸斻劍妫╄箛妤冩窗瑜版洑绗呭▽鈩冩箒閻ㄥ嫭妫╄箛妤佹瀮娴犲爼鍏樺鑼病濮濓絿鈥樿ぐ鎺撱傞崚棰佺啊鐢附婧娑(閺屻儳婀匱SM閹存牜娑撳鏌熺涙ê鍋嶇粻锛勬倞鏉炴)閵



瑜版帗銆傞弮銉ョ箶闁板秶鐤嗛弬鍥︽閸欏倹鏆熼崣濠呴弰搴窗

閵嗘亯b2inst@db1 SQLOGDIR閵

su 閳 db2inst

db2 connect to ddn

db2 get db cfg for ddn show detail | grep 閳ユ悆 log

LOGRETAIN             RECOVERY

USEREXIT               ON

LOGARCHMETH1    RECOVERY

婵″倹鐏塽serexit娑撶瘺N閿涘奔绲鹃弰鐤濷GARCHMETH1閻╃鎮撻敍灞剧叀閻娲拌ぐ鏇炴嫲闁剧偓甯 /home/db2inst/db2exec/bindb2mbk-master



婵″倹鐏塋OGARCHMETH1娑撶瘚ISK:/archlog閿涘苯鍨疍B2娴兼俺鍤滈崝銊ョ殺瑜版帗銆傞弮銉ョ箶瑜版帗銆傞崚鎵窗瑜/archlog娑

db2 閳ユ甫pdate db cfg for ddn using logarchmeth1 DISK:/archlog閳



婵″倹鐏夐棁鐟曚焦娲块弨鐟板棘閺佸府绱濋幍褑閺囧瓨鏌婇崨鎴掓姢閿

db2 update db cfg for ddn using 閸欏倹鏆熼崥     閸欏倹鏆熼崐

婵″倹鐏夐弴瀛樻暭閸欏倹鏆熼悽鐔告櫏閿涘矂娓剁憰渚鍣搁弬鏉挎儙閸斺旴2鏉╃偞甯

db2 force application all

db2 list applications



婵″倹鐏夋惔鏃傛暏閺冪姵纭堕崑婊勯敍宀勫櫢閺傛澘鎯庨崝鈥旴2

db2 force application all

db2stop

db2start

1.9   閹碘晛鐞涖劎鈹栭梻

DB2閻滅増婀佺悰銊р敄闂傚瓨澧跨硅鏌熷▔
db2 list tablespaces show detail

1閿涘娲块幒銉﹀潑閸旂姳绔存稉閸ｃ劎娈戞笟瀣摍閿
db2 " ALTER TABLESPACE PAYROLL ADD (DEVICE '/dev/rhdisk9' 10000) "
閸旂姴閸ｃ劋绠ｉ崥宥2娴兼碍婀佹稉娑撳殰閸斺暈alance閻ㄥ嫯绻冪粙,閸欏厴娴兼碍瀵旂紒鍤戞稉鐨弮!!!
2閿涘鏁奸崣妯煎箛閺堝閸ｃ劎娈戞径褍鐨(鐠囥儲鏌熷▔鏇氱瑝娴兼俺袝閸欐叴alance,娴ｅ棗閺嬫粏銆冪粚娲？瀵よ櫣鐝涢崷銊紭鐠佹儳娑,閸掓瑨閹碘晛鍟跨憗姝屾径鍥┾敄闂):
db2 " ALTER TABLESPACE TS1 RESIZE (FILE '/conts/cont0' 2000, DEVICE '/dev/rcont1' 2000, FILE 'cont2' 2000) "
濞夈劍鍓版潻娆戦弬鐟扮础鐏忚鲸妲哥亸鍡楀斧閺堝娈戦惄绋跨安鐎圭懓娅掗柈鑺ユ暭閹存劕銇囩亸蹇旀Ц2000妞
db2 "ALTER TABLESPACE TS1 RESIZE (ALL 2000)"
鏉╂瑧閺傜懓绱＄亸杈ㄦЦ閹跺﹨銆冪粚娲？娑撳閺堝娈戠圭懓娅掓径褍鐨柈鑺ユ暭閹2000妞
db2 " ALTER TABLESPACE TS1 EXTEND (FILE '/conts/cont0' 1000, DEVICE '/dev/rcont1' 1000, FILE 'cont2' 1000) "
鏉╂瑧閺傜懓绱＄亸杈ㄦЦ鐏忓棛娴夋惔鏃傛畱鐎圭懓娅掗柈鑺ュ⒖婢1000妞ょ绱濇稊鐔锋皑閺勯崝1000妞ょ偣
db2 " ALTER TABLESPACE DATA_TS EXTEND (ALL 1000)"
鏉╂瑧閺傜懓绱＄亸杈ㄦЦ鐏忓棙澧嶉張澶屾畱鐎圭懓娅掗柈钘夐崝1000妞ょ偣
db2 " ALTER TABLESPACE USERSPACE1 EXTEND (ALL 100)"
DB2閺冦儱鐖剁紒瀛樺Б閺堝牊鎼锋担
1閵        閺冦儱绻斿〒鍛倞閻╃鍙ч幙宥勭稊

濡弻銉ф稉濞茶濮╅弮銉ョ箶閿
[db2inst@db1 SQLOGDIR]$db2 get db cfg | grep 閳ユ窋irst active閳
    濞撳懐鎮婇弮銉ョ箶閺傚洣娆㈤弮璺哄涧閼宠姤绔婚悶鍡欐稉濞茶濮╅弮銉ョ箶娑斿澧犻惃鍕）韫囨绱
鐠囩柉鍤︾亸鎴炵槨閺堝牊鐓￠惇瀣╃濞哹2diag.log閺傚洣娆㈤敍宀婀呴崗鏈佃厬閺勬儊閺堝绱撶敮鎼

閻╃鍙ч弮銉ョ箶濞撳懐鎮婇幙宥勭稊

閺冪姾闁插洨鏁ら崫閹烘煢閿涘矂鍏樼憰浣稿帥绾暰閻╁閻ㄥ嫭妞块崝銊︽）韫囨ぜ鍌欏▏閻⑩暊b2inst閻劍鍩涢幍褑娴犮儰绗呴幙宥勭稊閿

(1) 鏉╃偞甯撮弫鐗堝祦鎼存搫绱癲b2 connect to ddn
(2) 閺屻儳婀呴弮銉ョ箶閺傚洣娆㈤惄缍嶉敍姝瀊2 get db cfg | grep "Path"
(3) 閺屻儳婀呯粭绔村ú璇插З閺冦儱绻旈敍姝瀊2 get db cfg | grep "First active"

濞夈劍鍓伴敍姘辨稉濞茶濮╅弮銉ョ箶閸欏﹤鍙炬禒銉ユ倵閻ㄥ嫭妫╄箛妤嬬礄鎼村繐褰块弴鎾彯閻ㄥ嫸绱氭稉鐑樻殶閹圭氨閻ㄥ嫭妞块崝銊︽）韫囨绱濇稉宥堝厴鏉╂稖缁夎濮╅妴浣稿竾缂傗斂浣稿灩闂勩倗鐡戦幙宥勭稊閿涘苯鎯侀崚娆忕殺闁姵鍨氶弫鐗堝祦鎼存挻鏅犻梾婧

    閻掕泛鎮楅敍宀冮弽瑙勫祦閺佺増宓佹惔鎾存）韫囨鏋冩禒鏈电箽閻ｆ瑦妞傞梻瀵告畱閻╃鍙х憴鍕暰绾暰鐟曚浇绻樼悰灞介悶鍡欐畱閺冦儱绻旈弬鍥︽閼煎啫娲块妴鍌氱紦鐠佸殾鐏忔垳绻氶悾60婢垛晙浜掗崘鍛畱閺冦儱绻旈弬鍥︽閿涘苯鑻熸稉鏂剧瑝鐟曚浇绻樼悰灞藉竾缂傗晜鎼锋担婊愮礉娴犮儱鍘ら幑鐔锋綎閺冦儱绻旈弬鍥︽閵


    娑撳娼版禒瀣矝鐎佃妫╄箛妤佹瀮娴犳儼绻樼悰灞藉竾缂傗晛鎷伴崚鐘绘珟閻ㄥ嫭鏌熷▔鏇樺倹澧界悰灞炬惙娴ｆ粌澧犵拠宄板帥閻劌娑撳鎳℃禒銈団樼拋銈嗘惙娴ｆ粎娈戦弮銉ョ箶閺傚洣娆㈤敍

    find -name '*.LOG' ! -newer | more

    閸忔湹鑵戦敍-newer 閹稿洤鐣緁ind閸涙垝鎶ら弻銉﹀閺堥崥搴濇叏閺瑙勬闂傚瓨鐦弻鎰嚋閺冦儱绻旈弬鍥︽閺傛壆娈戦幍閺堝妫╄箛妤佹瀮娴犺绱濋懓灞芥躬閸撳秹娼伴崝鐘辩瑐 ! 閸欐牕寮介敍灞藉灟鏉╂柨娲栧В鏃囬弮銉ョ箶閺傚洣娆㈤弮褏娈戦幍閺堝妫╄箛妤佹瀮娴犺泛寮烽崗鑸垫拱闊
    閸欎簰娴ｈ法鏁ゆ俊鍌欑瑓閸涙垝鎶ょ涵鐣剧粭锕鎮庨弶鈥叉閻ㄥ嫭妫╄箛妤佹瀮娴犲墎娈戦弫浼村櫤閿

    find -name '*.LOG' ! -newer | wc -l


    婵″倹鐏夐懓鍐閸樺缂夐梽鍫熸＋閻ㄥ嫭妫╄箛妤佹瀮娴犺绱濋崣寮懓鍐ㄦ稉瀣煙濞夋洩绱

  a.閻╁瓨甯撮崢瀣級閺冦儱绻旈弬鍥︽

    閸︺劍妫╄箛妤佹瀮娴犲墎娲拌ぐ鏇氱瑓閹笛嗛崨鎴掓姢閿涙瓲ind -name '*.LOG' ! -newer -exec gzip {} \;

  b.鐏忓棙妫╄箛妤佹瀮娴犺埖澧﹂崠鍛倵閸樺缂夐敍姘辨窗閸撳秴鐡ㄩ崷/mnt/data/db2logbak/

    閸︺劍妫╄箛妤佹瀮娴犲墎娲拌ぐ鏇氱瑓閹笛嗛崨鎴掓姢閿涙瓲ind -name '*.LOG' ! -newer | xargs tar -zcvf log_bak_20100402_1.tar.gz
    閻掕泛鎮楅敍灞藉晙鐏忓棜绻栨禍娑欐）韫囨鏋冩禒璺哄灩闂勩倧绱濋弬瑙勭《缁嬪秴鎮楃拠瀛樻閵


    婵″倹鐏夐懓鍐閸掔娀娅庨梽鍫熸＋閻ㄥ嫭妫╄箛妤佹瀮娴犺绱濋崣寮懓鍐ㄦ稉瀣煙濞夋洩绱

  a.娴ｈ法鏁ら幙宥勭稊缁崵绮洪崨鎴掓姢閻╁瓨甯撮崚鐘绘珟

    閸︺劍妫╄箛妤佹瀮娴犲墎娲拌ぐ鏇氱瑓閹笛嗛崨鎴掓姢閿涙瓲ind -name '*.LOG' ! -newer -exec rm {} \;

  b.娴ｈ法鏁ら弫鐗堝祦鎼存挸鎳℃禒銈堢箻鐞涘本绔婚梽

    閹笛嗛崨鎴掓姢閿涙瓰b2 prune logfile prior to S0003270.LOG
    鐠囥儱鎳℃禒銈勭窗濞撳懘娅嶴0003270.LOG娑斿澧犻幍閺堝娈戦崷銊у殠濡楋絾閺冦儱绻旈弬鍥︽閿涘牅绗夐崠鍛S0003270.LOG閺堥煩閿涘


2閵        濡弻銉ユ禒钘夋嫲閺冦儱绻旈弰鎯侀柈鎴掔箽鐎涙ê銈芥禍

闁俺绻 tar -tvf /dev/st0 閸涙垝鎶ら弻銉ф箙绾句礁鐢惃鍕敶鐎圭櫢绱濈涵閺勫墽銇氱紒鎾寸亯娑撴箒閺堥弬鎵畱婢跺洣鍞ら弬鍥︽閵嗗倸缍嬬壕浣哥敨娑撴畱婢跺洣鍞ら弬鍥︽鏉堝啫閺冭绱濇潻娆庨嚋閹垮秳缍旈崣鍏橀懞杈瀭瀵板牓鏆遍弮鍫曟？閵

DB2閺冦儱鐖剁紒瀛樺Б鐎涳絽瀹抽幙宥勭稊
1閵        闁俺绻冭箛鍙庨惄鎴炲付閸ｇ礉閺屻儳婀呯化鑽ょ埠閹嗗厴婵″倷缍

闁俺绻冭箛鍙庨惄鎴炲付閸ｇ礉閹舵挸褰囬弫鐗堝祦鎼存挾娈戞穱鈩冧紖閿涘苯鍨庨弸鎰殶閹圭氨閹嗗厴閺勬儊閸氬牏鎮婇敍

# db2 get snapshot for all on 閺佺増宓佹惔鎾虫倳 > log.txt

2閵        閺佺増宓佹惔鎾顾夋稉浣洪獓閸

# db2level

濞夈劍鍓版禍瀣
1閵        娑撳秷閸掔娀娅庡ú璇插З閺冦儱绻旈弬鍥︽0

DB2 閻ㄥ嫭妞块崝銊︽）韫囨鏋冩禒鏈电瑝閼冲熼崚鐘绘珟閵嗗倷绔撮弮 DB2 閻ㄥ嫭妞块崝銊︽）韫囨鏋冩禒鎯伴崚鐘绘珟閿涘本鍨ㄩ懓鍛閸︺劎娈戠涙ê鍋嶇拋鎯ч崙铏瑰箛闂傞敍灞藉灟娑撳秴褰查柆鍨帳閸︿即鐘冲灇 DB2 閺佺増宓佹惔鎾堕兇缂佺喎鐣烽張鎭

2閵        濞夈劍鍓版禍銈嗘閺冦儱绻旂涙ê鍋嶇粚娲？

閸︺劌缍婂锝嗘）韫囨膩瀵繋绗呴敍灞介弸婊勭梾閺堝濞囬悽銊ㄥ殰閸斻劌缍婂锝嗘煙瀵骏绱濋崚娆忕摠閸屻劎娈戦弮銉ョ箶閺傚洣娆㈡导姘瑝閺傛径姘剧礉閺堝褰查懗浠嬬姵鍨氶弮銉ョ箶閹甸崷銊ф畱閺傚洣娆㈢化鑽ょ埠缁屾椽妫垮掳 瑜版捁绻栫粔宥嗗剰閸愰潧褰傞悽鐔告閿涘奔绱伴弽瑙勫祦閸欏倹鏆 BLK_LOG_DSK_FUL 閻ㄥ嫰鍘ょ純灞炬箒娑撳秴鎮撻惃鍕箛鐠炩槄绱

1閿涘閺嬫粏閸欏倹鏆熼崥鏁ら敍灞藉灟 DB2 閺佺増宓佹惔鎾冲讲缂佈呯敾鐠囩粯鎼锋担婊愮礉娴ｅ棙妲搁崘娆愭惙娴ｆ粈绱伴幐鍌濇崳

2閿涘閺嬫粏閸欏倹鏆熷▽鈩冩箒閸氭暏閿涘苯鍨 DB2 閺佺増宓佹惔鎾茬窗閸嬫粍瀹搞儰缍



娑撱倗閹懎鍠屾稉瀣剁礉闁粙娓剁憰浣稿煂閺冦儱绻旈幍閸︺劎娈戦弬鍥︽缁崵绮哄ǎ璇插娴滃棛鈹栭梻瀛樺閹垹濮濓絽鐖堕妴



3閵        閹稿鍙庣化鑽ょ埠閻ㄥ嫬鐤勯梽鍛紣娴ｆ粓鍣洪柊宥囩枂閺冦儱绻旂粚娲？

DB2閺佺増宓佹惔鎾绘俺绻冮弮銉ョ箶閺傚洣娆㈢紒瀛樺Б閺佺増宓侀惃鍕暚閺佸瓨褍鎷版稉閼峰瓨褋渚盉2 閺佺増宓佹惔鎾舵畱閺冦儱绻旂粚娲？閸欐俺绻冩俊鍌欑瑓閸忕础鐠侊紕鐣婚敍
閺冦儱绻旂粚娲？ = 閿涘牅瀵岄弮銉ョ箶閺傚洣娆 + 娴滃瞼楠囬弮銉ョ箶閺傚洣娆㈤敍 * 閺冦儱绻旈弬鍥︽鐏忓搫

閸忔湹鑵戦敍
1閿 娑撶粯妫╄箛妤佹瀮娴犲墎鏁遍崣鍌涙殶 LOGPRIMARY 閹貉冨煑閿
2閿 娴滃瞼楠囬弮銉ョ箶閺傚洣娆㈤悽鍗炲棘閺 LOGSECOND 閹貉冨煑
3閿 閺冦儱绻旈弬鍥︽鐏忓搫閻㈠崬寮弫 LOGFILSIZ 閹貉冨煑
4閿 LOGPRIMARY + LOGSECOND < 256 閿涘牅绗夐崥宀娈 DB2 閻楀牊婀伴悾銉︽箒娑撳秴鎮撻敍宀冮崣鍌滄箙閻╃鎮撻悧鍫熸拱閻 DB2 閹靛鍞界涵閿
4閵        濡弻銉ㄩ崣鐦夐敍鍦爄cense閿涘鐣ㄧ憗鍛剰閸

鐠佺褰茬拠浣界箖閺堢喍绱伴柅鐘冲灇娑撳秴绻鐟曚胶娈戦張宥呭娑撴焽閿涘本澧嶆禒銉ユ躬 DB2 鐎瑰鐎瑰本鐦崥搴礉瀵ら缚濡电喕閸欐畱鐎瑰閹懎鍠
5閵        閸掓稑缂撻弫鐗堝祦鎼存挸澧犵拫鍐╂殻婵傜晫閮寸紒鐔告闂

閸︺劍鏆熼幑绨遍崚娑樼紦婵傛垝绠ｉ崥搴礉鐠嬪啯鏆ｇ化鑽ょ埠閺冨爼妫挎导姘剁姵鍨氶弫鐗堝祦鎼存挸鍞撮柈銊︽闂傚瓨鍩戦惃鍕磽鐢悶鍌涙殶閹圭氨娑撶娴滄稑鐠炩虫嫲閺冨爼妫块惄绋垮彠閿涘奔绔撮弮锔芥闂傜繝绗夐崙鍡欌樼憰浣界殶閺佹挳娓剁憰浣哥发鐏忓繐绺鹃妴鍌炴晩鐠囨畱閺冨爼妫跨拫鍐╂殻閸欏厴娴兼岸鐘冲灇瀵板牆闂傞敍灞介敍
1閿涘鐓囨禍娑樼挒鈥炽亼閺佸牞绱濇笟瀣 閿
SQL0440N閿涘本澹樻稉宥呭煂閸忛攱婀侀崗鐓庨懛褰夐柌蹇曟畱缁鐎锋稉 閳<娓氬鈻肩猾璇茬>閳 閻ㄥ嫬鎮曟稉  閳<娓氬鈻奸崥>閳 閻ㄥ嫬鍑￠幒鍫熸綀娓氬鈻
2閿涘鏆熼幑绨遍弮銉ョ箶闁槒绶柨娆 -> 鐎规洘婧
3閿涘鐖剁憴渚鏁婄拠 閳 閸欑殶閺佸瓨妞傞梻杈剧礉閺堢殶閺佸瓨妞傞崠
6閵        娑撳秷闂呭繋绌堕幍褑 chown (chmod) 閳ユ彍 閿涘湶NIX/Linux閿

閸︺劌鐤勬笟瀣窗瑜版洑绗卌hown (chmod) -R 娴兼岸鐘冲灇

1閿  閸︺劍鏆熼幑绨遍張宥呭閸ｃ劋绗 db2 connect to 閼冲熺箾閹恒儰绗傞弫鐗堝祦鎼

2閿  db2 connect to user ... using ...鏉╃偞甯存稉宥勭瑐

闂勫嫸绱扮敮鍝ユ暏鐞涖劎鈹栭梻瀛樺⒖鐎硅鏌熷▔
DB2閻滅増婀佺悰銊р敄闂傚瓨澧跨硅鏌熷▔
db2 list tablespaces show detail

1閿涘娲块幒銉﹀潑閸旂姳绔存稉閸ｃ劎娈戞笟瀣摍閿
db2 " ALTER TABLESPACE PAYROLL ADD (DEVICE '/dev/rhdisk9' 10000) "
閸旂姴閸ｃ劋绠ｉ崥宥2娴兼碍婀佹稉娑撳殰閸斺暈alance閻ㄥ嫯绻冪粙,閸欏厴娴兼碍瀵旂紒鍤戞稉鐨弮!!!
2閿涘鏁奸崣妯煎箛閺堝閸ｃ劎娈戞径褍鐨(鐠囥儲鏌熷▔鏇氱瑝娴兼俺袝閸欐叴alance,娴ｅ棗閺嬫粏銆冪粚娲？瀵よ櫣鐝涢崷銊紭鐠佹儳娑,閸掓瑨閹碘晛鍟跨憗姝屾径鍥┾敄闂):
db2 " ALTER TABLESPACE TS1 RESIZE (FILE '/conts/cont0' 2000, DEVICE '/dev/rcont1' 2000, FILE 'cont2' 2000) "
濞夈劍鍓版潻娆戦弬鐟扮础鐏忚鲸妲哥亸鍡楀斧閺堝娈戦惄绋跨安鐎圭懓娅掗柈鑺ユ暭閹存劕銇囩亸蹇旀Ц2000妞
db2 "ALTER TABLESPACE TS1 RESIZE (ALL 2000)"
鏉╂瑧閺傜懓绱＄亸杈ㄦЦ閹跺﹨銆冪粚娲？娑撳閺堝娈戠圭懓娅掓径褍鐨柈鑺ユ暭閹2000妞
db2 " ALTER TABLESPACE TS1 EXTEND (FILE '/conts/cont0' 1000, DEVICE '/dev/rcont1' 1000, FILE 'cont2' 1000) "
鏉╂瑧閺傜懓绱＄亸杈ㄦЦ鐏忓棛娴夋惔鏃傛畱鐎圭懓娅掗柈鑺ュ⒖婢1000妞ょ绱濇稊鐔锋皑閺勯崝1000妞ょ偣
db2 " ALTER TABLESPACE DATA_TS EXTEND (ALL 1000)"
鏉╂瑧閺傜懓绱＄亸杈ㄦЦ鐏忓棙澧嶉張澶屾畱鐎圭懓娅掗柈钘夐崝1000妞ょ偣
db2 " ALTER TABLESPACE USERSPACE1 EXTEND (ALL 100)"
闂勫嫸绱拌ぐ鎺撱傞弮銉ョ箶閻╃鍙ч惌銉ㄧ槕
db2閺冦儱绻旀穱婵嗙摠閻ㄥ嫪琚辩粔宥嗘煙瀵骏绱板骞嗛弮銉ョ箶閸滃苯缍婂锝嗘）韫
瀵板箚閺冦儱绻旈敍
閸︺劋鎹㈡担鏇熷剰閸愬吀绗呴柈鎴掔瑝閼宠棄鍨归梽銈呮儕閻滄）韫囨绱濇俊鍌涚亯閸掔娀娅庨弫鐗堝祦鎼存挸姘ㄦ导姘毉闁挎瑣
婵″倹鐏夐崙娲晩娴滃棴绱濋崣鍏橀悽銊ユ禒钘変粵閹垹閿涘苯閺嬫粍鐥呴張澶婁粵婢跺洣鍞ら敍宀勫亝娑斿牆褰ч張澶嬪IBM鐎规ɑ鏌熼弶銉ュ簻閸嬫矮绔存稉绻涢幒
閻掕泛鎮楁担鐖xport閸戠儤鏆熼幑绱濋悞璺烘倵閸愬秹鍣稿鐑樻殶閹圭氨閵嗗倹宓佺拠纾嬬箹娑撶箷閺勯崷銊ょ稑娑旈绨PA閻ㄥ嫭鍎忛崘鍏哥瑓閹靛秵褰佹笟
閻ㄥ嫭婀囬崝鈥冲敶鐎瑰箍
瑜版帗銆傞弮銉ョ箶閿
瑜版帗銆傞弮銉ョ箶娑撴畱濞茶濮╅弮銉ョ箶闁劋鍞ら弰绗夐懗钘夊灩闂勩倗娈戦敍灞介弸婊冨灩闂勩倗绮ㄩ弸婊冩倱瀵板箚閺冦儱绻旂悮鍨归梽銈囨畱閹懎鍠岄妴
瑜版帗銆傞弮銉ョ箶娑撴畱瀹告彃缍婂锝嗘）韫囨妲搁崣浜掗崚鐘绘珟閻ㄥ嫸绱濇担鍡楀灩闂勩倓绨℃禒銉ユ倵娴ｇ姴褰查懗钘夋皑濞屸剝纭堕崑姘娴滄稑澧犲姘惙娴ｆ粈绨￠妴鍌涙殶閹圭氨婢跺洣鍞ら惃鍕划婢跺秵绉归崣濠傛禒鑺ユ瀮娴犺泛鎷伴弮銉ョ箶
瑜版帗銆傞弮銉ョ箶閻╃鍙ч惌銉ㄧ槕閿
鐏忓搩OGRETAIN鐠佸墽鐤嗘稉绡汵閸氬函绱濋弫鐗堝祦鎼存挸鐨㈤弨瀵旈崜宥嗙泊閹垹閵嗗倹閺冭绱濈化鑽ょ埠娑撶殺娴兼艾鐡ㄩ崷銊ょ瑏缁夊秶琚崹瀣畱閺冦儱绻旈弬鍥︽:
濞茶濮╅弮銉ョ箶:鐠囥儲妫╄箛妤瀵橀崥鐨婚張褰佹禍銈嗗灗閸ョ偞绮撮惃鍕皑閸斺冲礋閸忓啰娈戦惄绋垮彠娣団剝浼呴敍灞间簰閸欏﹤鍑￠幓鎰唉娴ｅ棗鐨婚張鍟撻崗銉︽殶閹圭氨閺傚洣娆㈤惃鍕皑閸旓紕娈戞穱鈩冧紖閵
閼辨梹婧鐎涙ɑ銆傞弮銉ョ箶:濞茶濮╅弮銉ョ箶娑撳閺堝鏁奸崝銊ュ锝呯埗婢跺嫮鎮婂韫瑝闂囩憰渚婄礉閸楀疇閺冦儱绻旀稉澧嶇拋鏉跨秿閻ㄥ嫪绨ㄩ崝锟犲厴瀹稿弶褰佹禍銈呰嫙閸愭瑥鍙嗛弫鐗堝祦鎼存挻鏋冩禒鑸垫閿涘矁濞茶濮╅弮銉ョ箶鏉炲床娑撻缚浠堥張鍝勭摠濡楋絾妫╄箛妞煎倻袨娑斿璐熼懕鏃婧閿涘本妲搁悽鍙樼艾鐎瑰啩婊戞稉搴㈡た閸斻劍妫╄箛妤鐡ㄩ弨鎯ф躬閸氬奔绔存稉娲拌ぐ鏇氱瑓閵
閼磋鲸婧鐎涙ɑ銆傞弮銉ョ箶:鐏忓棜浠堥張鍝勭摠濡楋絾妫╄箛妞剧矤濞茶濮╅弮銉ョ箶閻╃秿娑撳━opy閸掓澘褰熸径鏍畱閸︾増鏌熺涙ɑ銆傞敍灞芥皑缁夐璐熼懘杈ㄦ簚鐎涙ɑ銆傞弮銉ョ箶閵嗗倽绻栨禍娑欐）韫囨褰查懗钘夋躬閺佺増宓佹惔鎾冲濠婃碍浠径宥囨畱閺冭泛娆庣矝閻掑爼娓剁憰浣
缁狅紕鎮婇弫鐗堝祦鎼存挻妫╄箛妤冩畱瀹搞儰缍旈崣浜掗幍瀣紣鐎瑰本鍨(閸楀啿鐨㈤懕鏃婧鐎涙ɑ銆傞弮銉ョ箶閹靛浼愰幏鐤閸掔増鐓囨稉鐚榬chive閻╃秿)閿涘奔绡冮崣鏁辩紓鏍у晸USEREXIT缁嬪绨懛濮╃紒瀛樺Б閵
閻㈠彉绨珼B2鐎佃澧嶉張澶婇挬閸欎即鍏橀幓鎰返娴滃棛娴夋惔鏃傛畱USEREXIT缁杞扮伐缁嬪绨敍宀冨奔绗栭棃鐐茬埗閺勬挷绨穱鏁奸崪灞煎▏閻㈢礉閹垫禒BM瀵ら缚閻劍鍩涙担璺ㄦ暏USEREXIT缁嬪绨弶銉ч悶鍡樻）韫囨鏋冩禒韬
娴ｈ法鏁SEREXIT缁嬪绨惃鍕煙濞
鐟曚椒濞囬悽鈺憇er exit program閼峰З閸栨潝og閺傚洣娆㈤惃鍒焤chiving閸滃etrieval鏉╁洨鈻:
1.  鐠佸墽鐤哾atabase cfg閸欏倹鏆焞ogarchmeth1 娑撶SEREXIT閵
connect to ddn
update db cfg using logarchmeth1 USEREXIT
闂呭繐鎮楅幙宥勭稊閸欏棘閼>>1.8 濡弻銉ョ秺濡楋絾妫╄箛妤冩祲閸忚櫕鎼锋担


闂勫嫸绱版担璺ㄦ暏 CLP 閹规洝骞忛弫鐗堝祦鎼存捁绻嶇悰宀濮搁崘闈涙彥閻
閸欑矤 CLP 娴ｈ法鏁 GET HEALTH SNAPSHOT 閸涙垝鎶ら弶銉﹀礋閼剧柉绻嶇悰宀濮搁崘闈涙彥閻撗佸倽閸涙垝鎶ょ拠纭堕弨瀵斿Λ缁便垼绻嶇悰宀濮搁崘鐢垫磧鐟欏棗娅掗惄鎴ｉ惃鍕瑝閸氬苯鐠烇紕琚崹瀣畱鏉╂劘閻樿泛鍠岃箛鍙庢穱鈩冧紖閵
閸忓牆鍠呴弶鈥叉
韫囧懘銆忛崗閿嬫箒鐎圭偘绶ユ潻鐐村复閹靛秷鍏橀幑鏇″箯鏉╂劘閻樿泛鍠岃箛鍙庨妴鍌氶弸婊勭梾閺堝鐤勬笟瀣箾閹恒儻绱濋崚娆忓灡瀵よ櫣宸遍惇浣哥杽娓氬绻涢幒銉ｅ倽閼惧嘲褰囨潻婊呪柤鐎圭偘绶ラ惃鍕彥閻撗嶇礉韫囧懘銆忛崗鍫ｇ箾閹恒儴鍤︾拠銉ョ杽娓氬
鏉╁洨鈻
鐟曚椒濞囬悽 CLP 閹规洝骞忛弫鐗堝祦鎼存捁绻嶇悰宀濮搁崘闈涙彥閻
娴 CLP 閸欐垵鍤敮锔芥箒閺堢喐婀滈崣鍌涙殶閻 GET HEALTH SNAPSHOT 閸涙垝鎶ら妴
閸︺劋浜掓稉瀣仛娓氬鑵戦敍灞界殺閸︺劌鎯庨崝銊︽殶閹圭氨缁狅紕鎮婇崳銊ょ閸氬海鐝涢崡铏礋閼鹃攱鏆熼幑绨辩粻锛勬倞閸ｃ劎楠囬崚绻嶇悰宀濮搁崘闈涙彥閻撗
db2 get health snapshot for dbm

鐎甸涚艾閸掑棗灏弫鐗堝祦鎼存挾閮寸紒鐕傜礉閸欒礋閻楃懓鐣鹃崚鍡楀隘閹规洝骞忔稉鎾绘，閻ㄥ嫭鏆熼幑绨辫箛鍙庨敍灞惧灗閼板懍璐熼幍閺堝鍨庨崠鐑樺礋閼惧嘲鍙忕仦閻ㄥ嫭鏆熼幑绨辫箛鍙庨妴鍌濈靛湱澹掔规艾鍨庨崠鐚寸礄婵″倸鍨庨崠鍝勫娇 2閿涘绗傞惃鍕殶閹圭氨閹规洝骞忔潻鎰悩璺哄枌韫囧弾閿涘矁閸欐垵鍤禒銉ょ瑓閸涙垝鎶ら敍
db2 get health snapshot for db on sample at dbpartitionnum 2
鐟曚礁閹甸張澶婂瀻閸栬桨绗傞惃鍕閺堝绨查悽銊р柤鎼村繑宕熼懢閿嬫殶閹圭氨韫囧弾閿涘矁閸欐垵鍤禒銉ょ瑓閸涙垝鎶ら敍
db2 get health snapshot for db on sample global
娴犮儰绗呴崨鎴掓姢閹规洝骞忛惃鍕箥鐞涘瞼濮搁崘闈涙彥閻撗冪敨閺堝妾崝鐘虹紒鍡曚繆閹礉閸栧懏瀚崗绱￠妴渚妾崝鐘变繆閹嫲鏉╂劘閻樿泛鍠岄幐鍥┿仛閸ｃ劌宸婚崣鑼惰ぐ鏇窗
db2 get health snapshot for db on sample show detail

鐎甸涚艾閸╄桨绨梿鍡楁値閻樿埖浣烘畱鏉╂劘閻樿泛鍠岄幐鍥┿仛閸ｇ礉閸欓幍閺堝娉﹂崥鍫濈挒鈩冨礋閼鹃攱鏆熼幑绨辫箛鍙庨敍宀冨奔绗夐懓鍐鏉╂瑤绨虹电钖勯惃鍕Ц閹降鍌氱埗鐟 GET HEALTH SNAPSHOT FOR DB 閸涙垝鎶ゆ潻鏂挎礀閹甸張澶愭肠閸氬牆鐠炩槄绱濇潻娆庣昂鐎电钖勯棁鐟曚線鎷＄佃澧嶉張澶婄唨娴滃酣娉﹂崥鍫㈠Ц閹胶娈戞潻鎰悩璺哄枌閹稿洨銇氶崳銊ф畱鐠锔藉Г閵
鐟曚礁閸掓銇氭禍鍡樺閺堝娉﹂崥鍫濈挒锛勬畱閺佺増宓佹惔鎾村礋閼剧柉绻嶇悰宀濮搁崘闈涙彥閻撗嶇礉鐠囧嘲褰傞崙杞颁簰娑撳鎳℃禒銈忕窗
db2 get health snapshot for db on sample with full collection

閺屻儳婀呯粩褰沶etstat -aon|findstr "111"
tasklist|findstr "111"

du -m * 閺屻儳婀呰ぐ鎾冲閻╃秿閺傚洣娆㈡径褍鐨琺b
find . -size 10000k 閺屻儲澹樿ぐ鎾冲閻╃秿婢堆傜艾10mb閻
閺傛澘娑撳鏁
alter table trade_flow_info add constraint  PK_FXJK PRIMARY KEY (TRADE_ON_UUID);
 alter table table_name drop primary key (col)

閸掓稑缂揹b2 鐎圭偘绶ラ崪灞藉灡瀵ゅ搫绨遍惃鍕煙濞夋洖銇囬懛鏉戝瀻娑撹桨琚辩猾浼欑磼娑撶猾缁樻Ц閸ユ儳鑸伴悾宀勬桨db2setup 閸掓稑缂撴稉缁夊秵妲窩LI閸掓稑缂撻敍浣规径鍕涧閹诲繗鍫稉娑撳━LI閺傜懓绱￠懛鍏呯艾閸ユ儳鑸伴悾宀勬桨鐠囧嘲銇囩硅埖鎮崇槐绔存稉瀣儌閿
db2 閸掓稑缂撶圭偘绶 閸掓稑缂撻弫鐗堝祦鎼
1.閸掓稑缂撶圭偘绶ラ悽銊﹀煕
mkdir /db2/db2test 閸掓稑缂撶圭偘绶ラ悽銊﹀煕閻╃秿
smitty user
闁瀚ˋdd a User
* User NAME                                          [db2test]
User ID                                                   []
ADMINISTRATIVE USER?                       false
Primary GROUP                                     [db2iadm1]
Group SET                                           [staff]
ADMINISTRATIVE GROUPS                   []
ROLES                                                         []
Another user can SU TO USER?            true
SU GROUPS                                          [ALL]
HOME directory                                     [/db2/db2test]
Initial PROGRAM                                    [/usr/bin/ksh]

2.閸掓稑缂撶圭偘绶 DB2_install=/usr/opt/db2_08_01/instance
./db2icrt -u db2test db2test

3.閸掓稑缂撻弫鐗堝祦鎼
su - db2test
db2start     #濮濄倕娑撳秵澧界悰灞芥儙閸斻劌鐤勬笟瀣殺閹:SQL1032N No start database manager command was issued. SQLSTATE=57019
db2 create db db2test

4.閸掔娀娅庨弫鐗堝祦鎼
db2 drop db db2test
db2stop

5.閸掔娀娅庣圭偘绶
cd DB2_install
./db2idrop -f db2test # -f閸欏倹鏆熸稉鐎规俺濞ｈ濮為崥锕鍨崚鐘绘珟鐎瑰奔绨℃导姘Г闁挎瑱绱

6.閸掔娀娅庨悽銊﹀煕
smitty user
闁瀚≧emove a User
* User NAME                                          [db2test]                                                           +
Remove AUTHENTICATION information?                  yes
閸掔娀娅庨悽銊﹀煕閻╃秿
rm -rf db2test


df -B 1g
1閵嗕焦鐓￠惇瀣殶閹圭氨妞ら潧銇囩亸
db2 get db cfg
2閵嗕焦鏁归梿鍡氥冮悩鑸典椒淇婇幁
db2 runstats on table schema.table_name
3閵嗕焦鐓＄拠銏℃殶閹广冮崡鐘垫暏妞ょ數娈戦弫浼村櫤
select tabname, npages from syscat.tables where tabname = 'table_name'
4閵嗕浇缁犳銆冮崡鐘垫暏绾句胶娲忕粚娲？婢堆冪毈
鐞涖劌宕伴悽銊ч惄妯尖敄闂傛潙銇囩亸 = 閺佺増宓佹い闈涖亣鐏 * 妞ゅ灚鏆熼柌
閺屻儳婀呯悰銊ュ窗绾句胶娲忕粚娲？婢堆冪毈閿涙elect tabname, npages*32768/(1024*1024) from syscat.tables where tabname = 'XXXXXX'

db2 v9娴犮儰绗傞弻銉ф箙鐞涖劌宕扮壕浣烘磸闁槒绶粚娲？婢堆冪毈閿涙elect sum(x.DATA_OBJECT_P_SIZE+x.INDEX_OBJECT_P_SIZE+x.LOB_OBJECT_P_SIZE+x.LONG_OBJECT_P_SIZE+x.XML_OBJECT_P_SIZE) from SYSIBMADM.ADMINTABINFO x where TABNAME='XXXXXXX';
select TABNAME,sum(x.DATA_OBJECT_P_SIZE+x.INDEX_OBJECT_P_SIZE+x.LOB_OBJECT_P_SIZE+x.LONG_OBJECT_P_SIZE+x.XML_OBJECT_P_SIZE) from SYSIBMADM.ADMINTABINFO x group by TABNAME;
db2 v9娴犮儰绗傞弻銉ф箙閺佺増宓佹惔鎾冲窗閻劎鈹栭梻鏉戙亣鐏忓骏绱癲b2 "call SYSPROC.GET_DBSIZE_INFO(?,?,?,10)"


-- db2 delete 婢堆嗐冩稉宥呭晸閺冦儱绻旈幙宥勭稊
1.update command options using c off  -- //閸忔娊妫撮懛濮╅幓鎰唉
2.alter table fxjkusr.run_rule_info  activate not logged initially //鐠佸墽鐤嗘稉宥堥弮銉ョ箶
3.delete from MARPT.RPT_DIM_U_ORG_INX_M_CURR_CUS_PRO_TBK -- 閸掔娀娅庨弫鐗堝祦
4.commit//閹靛濮╅幓鎰唉
5.update command options using c on//閹垫挸绱戦懛濮╅幓鎰唉

閵嗕焦鐓￠惇瀣殶閹圭氨妞ら潧銇囩亸
db2 get db cfg
2閵嗕焦鏁归梿鍡氥冮悩鑸典椒淇婇幁
db2 runstats on table schema.table_name
3閵嗕焦鐓＄拠銏℃殶閹广冮崡鐘垫暏妞ょ數娈戦弫浼村櫤
select tabname, npages from syscat.tables where tabname = 'table_name'
4閵嗕浇缁犳銆冮崡鐘垫暏绾句胶娲忕粚娲？婢堆冪毈
鐞涖劌宕伴悽銊ч惄妯尖敄闂傛潙銇囩亸 = 閺佺増宓佹い闈涖亣鐏 * 妞ゅ灚鏆熼柌
閺屻儳婀呯悰銊ュ窗绾句胶娲忕粚娲？婢堆冪毈閿涙elect tabname, npages*16384/(1024*1024) from syscat.tables where tabname = 'XXXXXX'

db2 v9娴犮儰绗傞弻銉ф箙鐞涖劌宕扮壕浣烘磸闁槒绶粚娲？婢堆冪毈閿涙elect sum(x.DATA_OBJECT_P_SIZE+x.INDEX_OBJECT_P_SIZE+x.LOB_OBJECT_P_SIZE+x.LONG_OBJECT_P_SIZE+x.XML_OBJECT_P_SIZE) from SYSIBMADM.ADMINTABINFO x where TABNAME='XXXXXXX';
select TABNAME,sum(x.DATA_OBJECT_P_SIZE+x.INDEX_OBJECT_P_SIZE+x.LOB_OBJECT_P_SIZE+x.LONG_OBJECT_P_SIZE+x.XML_OBJECT_P_SIZE) from SYSIBMADM.ADMINTABINFO x group by TABNAME;
db2 v9娴犮儰绗傞弻銉ф箙閺佺増宓佹惔鎾冲窗閻劎鈹栭梻鏉戙亣鐏忓骏绱癲b2 "call SYSPROC.GET_DBSIZE_INFO(?,?,?,10)"
閺屻儳婀呭濠氭敚
db2 get snapshot for locks on fxjkdb
閺夐幒澶嬮柨浣界箻缁
db2 force application (鏉╂稓鈻糷ander)
鐎电厧鍤弻鎰炊鐞涖劎娈戦弫鐗堝祦
db2 "export to pub_bizinfo.ixf of ixf select * from pub_bizinfo"
鐎电厧鍙嗛弻鎰炊鐞涖劎娈戦弫鐗堝祦
鐞涖劌鐡ㄩ崷
db2 "import from pub_bizinfo.ixf of ixf insert into pub_bizinfo"
娑撳秶鏁撻幋鎰）韫
db2 "load from pub_bizinfo.ixf of ixf insert into pub_bizinfo"
鐞涖劋绗夌涙ê婀
db2 "import from pub_bizinfo.ixf of ixf create into pub_bizinfo"
0 6 * * * $HOME/for_crontab/createTomorrowTables >> $HOME/for_crontab/mylog.log 2>&1
0 6 * * * /root/zwk/test.sh >> /root/zwk/operate_`date +"\%Y\%m\%d"`.log 2>&1
backup
db2 connect to rams
db2 quiesce db immediate
db2 terminate
db2 deactivate db fxjkdb
db2 force application all
db2 backup db fxjkdb to /home/fxjkusr/test/test

select TABNAME,SUM(CARD) OVER(PARTITION BY TABNAME) from syscat.tables where tabschema='FXJKUSR';

select TABNAME,sum(card) from syscat.tables where tabschema='FXJKUSR'group by TABNAME
閸︹暔inux娑撳绱濇稉宥呭讲闁灝鍘ら惃鍕窗閻⑩晵IM閹垫挸绱戞稉娴滄硤indows娑撳绱潏鎴ｇ箖閻ㄥ嫭鏋冮張鏋冩禒韬插倹鍨滄禒绱伴崣鎴犲箛閺傚洣娆㈤惃鍕槨鐞涘瞼绮ㄧ亸楣冨厴娴兼碍婀佹稉娑撶寫M缁楋箑褰块敍宀冪箹閺勬礈娑 DOS娑撳娈戠紓鏍帆閸ｃ劌鎷癓inux缂傛牞绶崳銊ラ弬鍥︽鐞涘本婀惃鍕礀鏉烇妇婢跺嫮鎮婃稉宥勭閼疯揪绱

濞撳懐鎮婇弮銉ョ箶閼存碍婀
46 15 * * *  find /home/rams/domains/log/* -mtime +7 |xargs rm -rf  >/dev/null 2>&1
12 19 * * *  >/home/rams/domains/rams_domain/bin/start_rams_s1.log  >/dev/null 2>&1

CMD="db2 -t "
count=`${CMD} <<EOF | grep 'labstr' | awk '{print $1}'
connect to srcdb;
select count(*), 'labstr' from tbl1 where NAME='鐏忓繑妲';
EOF`
echo $count\
閸掓鍤规碍妞傛禒璇插
crontab -l

鐎甸涚艾閸ョ偠婧呯粭锔炬畱鐎规矮绠熼敍
windows閿   0D0A
unixlinux:     0A
MAC: 0D

濮ｆ棁绶濊箛宓庨惃鍕箵闂勩倛绻栨禍娑氶崣椋庢畱閺傝纭堕張澶庣箹娑斿牆鍤戠粔宥忕窗

閿1閿涘妲搁悽鈺扞閻ㄥ嫬鎳℃禒銈忕窗
    娴ｈ法鏁i閹垫挸绱戦弬鍥ㄦ拱閺傚洣娆
    vi dos.txt
    閸涙垝鎶ゅΟ鈥崇础娑撳绶崗
    :set fileformat=unix
    :w

(2) VI娑撳濞囬悽銊﹂崚娆掋冩潏鎯х础閺囨寧宕
   g/^M/s/^M//
    閹存牞
   %s/^M//g
   ctrl + v 閻掕泛鎮 ctrl + m

閿3閿涘濞囬悽鈺痚d 瀹搞儱鍙
    sed 閳ユ獨/^M//閳 filename > tmp_filename

閿4閿涘妫﹂悞绉漣ndow娑撳娈戦崶鐐舵簠缁楋箑娴滃棌 閳ユ瑱绱濋柇锝勭疄瑜版挾鍔ч柅姘崇箖閸掔娀娅庨垾 閳 閿涘奔绡冮崣浜掔圭偟骞囬敍
    tr -d " "

閿5閿涘娓堕崥搴濈娑撴煙濞夋洘妲搁張姹夐張鐢摜鏁ら惃鍕煙濞夋洩绱濇稉姹夌憴澶婄繁閺堥弬閫涚┒
    閸︺劎绮撶粩绗呴弫鎻掓嚒娴犮倧绱
    $ dos2unix filename
    閻╁瓨甯存潪宕查幋鎭ix閺嶇厧绱￠敍灞芥皑OK娴滃棴绱掗敐



java -Xms128m -Xmx256m -jar /home/.jar
alter table FX_PRIVATE_CUST alter ID_TYPE set data type varchar(20)

DB2閸掔娀娅庨柌宥呯拋鏉跨秿瀵版鏌熷▔鏇炴嫲閸忔湹绮弫鐗堝祦鎼存挾閮寸紒鐔告箒娴ｆ洑绗夐崥灞芥喛閿涚喍绗呴弬鍥﹁礋閹劌鍨稉鍙ョ啊娴滄梻DB2閸掔娀娅庨柌宥呯拋鏉跨秿閻ㄥ嫭鍎忛崘纰夌礉鐢本婀滅佃鍋嶉張澶嬪閸氬紑閵
鐠佸墽鐤嗛懕鏂挎値娑撳鏁
alter table table_a add constraint  PK_FA PRIMARY KEY (ID_A , ID_B );

select * from TRADE_FLOW_INFO where TRADE_ON_UUID in (select TRADE_ON_UUID
from TRADE_FLOW_INFO group by TRADE_ON_UUID having count(TRADE_ON_UUID) > 1);

delete from (select TRADE_ON_UUID,row_number() over(partition by TRADE_ON_UUID order by TRADE_ON_UUID) as row_num
from TRADE_FLOW_INFO)  where row_num >1;


delete from TRADE_FLOW_INFO_STATUS;

select * from TRADE_FLOW_INFO_STATUS;
1閵嗕焦鐓￠幍鎹愩冩稉娴ｆ瑧娈戦柌宥呯拋鏉跨秿閿涘矂鍣告径宥堣ぐ鏇熸Ц閺嶈宓侀崡鏇氶嚋鐎涙閿涘潷eopleId閿涘娼甸崚銈嗘焽

select * from TRADE_FLOW_INFO where TRADE_ON_UUID in (select TRADE_ON_UUID
from TRADE_FLOW_INFO group by TRADE_ON_UUID having count(TRADE_ON_UUID) > 1);


2閵嗕笍B2閸掔娀娅庨柌宥呯拋鏉跨秿閿涘矂鍣告径宥堣ぐ鏇熸Ц閺嶈宓侀崡鏇氶嚋鐎涙閿涘潷eopleId閿涘娼甸崚銈嗘焽閿涘苯褰ч悾娆愭箒rowid閺堢亸蹇曟畱鐠佹澘缍
delete from (select TRADE_ON_UUID,row_number() over(partition by TRADE_ON_UUID order by TRADE_ON_UUID) as row_num
from TRADE_FLOW_INFO_STATUS)  where row_num >1
3閵嗕焦鐓￠幍鎹愩冩稉娴ｆ瑧娈戦柌宥呯拋鏉跨秿閿涘牆娑撶摟濞堢绱

select * from vitae a where (a.peopleId,a.seq) in (select peopleId,seq from vitae group by peopleId,seq having count(*) > 1)

4閵嗕笍B2閸掔娀娅庨柌宥呯拋鏉跨秿閿涘牆娑撶摟濞堢绱氶敍灞藉涧閻ｆ瑦婀乺owid閺堢亸蹇曟畱鐠佹澘缍

delete from vitae a where (a.peopleId,a.seq) in (select peopleId,seq from vitae group by peopleId,seq having count(*) > 1) and rowid not in (select min(rowid) from vitae group by peopleId,seq having count(*)>1)

5閵嗕焦鐓￠幍鎹愩冩稉娴ｆ瑧娈戦柌宥呯拋鏉跨秿閿涘牆娑撶摟濞堢绱氶敍灞肩瑝閸栧懎鎯坮owid閺堢亸蹇曟畱鐠佹澘缍

select * from vitae a where (a.peopleId,a.seq) in (select peopleId,seq from vitae group by peopleId,seq having count(*) > 1) and rowid not in (select min(rowid) from vitae group by peopleId,seq having count(*)>1)
娴ｇ姾閻ㄥ嫭妲竕vm閻ㄥ嫬鍞寸涙鈹栭梻鏉戞儌閵
閸︺劍鏌熷▔鏇礄娴狅絿鐖滈崸妤嬬礆娑撶暰娑斿绔存稉褰夐柌蹇旀閿涘ava鐏忓崬婀弽鍫滆厬娑撻缚绻栨稉褰夐柌蹇撳瀻闁板布VM閸愬懎鐡ㄧ粚娲？閿涘苯缍嬬搾鍛扮箖閸欐﹢鍣洪惃鍕稊閻劌鐓欓崥搴礉java娴兼俺鍤滈崝銊╁櫞閺鐐竴娑撻缚閸欐﹢鍣洪幍閸掑棝鍘ら惃鍑M閸愬懎鐡ㄧ粚娲？閿涙稖灞芥躬閸棔鑵戦崚鍡涘帳閻ㄥ嚙VM閸愬懎鐡ㄩ悽鐪廰va閾忔碍瀚欓張铏规畱閼峰З閸ㄥ啫婧囬崶鐐存暪閸ｃ劍娼电粻锛勬倞閵

JVM閸愬懎鐡ㄩ崠鍝勭厵缂佸嫭鍨

JVM閸愬懎鐡ㄩ崚鍡楁磽缁夊稄绱

1閵嗕焦鐖ら崠鐚寸礄stacksegment閿涘鏃傛暠缂傛牞鐦ч崳銊ㄥ殰閸斻劌鍨庨柊宥夊櫞閺,鐎涙ɑ鏂侀崙鑺ユ殶閻ㄥ嫬寮弫鏉跨》绱濈仦闁劌褰夐柌蹇曟畱閸婅偐鐡戦敍灞藉徔娴ｆ挻鏌熷▔鏇熷⒔鐞涘瞼绮ㄩ弶鐔剁閸氬函绱濈化鑽ょ埠閼峰З闁插﹥鏂丣VM閸愬懎鐡ㄧ挧鍕爱

2閵嗕礁鐖㈤崠鐚寸礄heapsegment閿涘鏂剧閼告暠缁嬪绨崨妯哄瀻闁板秹鍣撮弨鎾呯礉鐎涙ɑ鏂侀悽鐪揺w閸掓稑缂撻惃鍕挒鈥虫嫲閺佹壆绮嶉敍瀹﹙m娑撳秴鐣鹃弮鑸电叀閻绻栨稉鐠炩槄绱濇俊鍌涚亯濞屸剝婀佸鏇犳暏閹稿洤鎮滄潻娆庨嚋鐎电钖勭亸鍗炴礀閺

3閵嗕線娼ら幀浣稿隘閿涘潐atasegment閿涘鏂跨摠閺鎯у弿鐏為崣姗鍣洪敍宀勬饯閹礁褰夐柌蹇撴嫲鐎涙娑撴彃鐖堕柌蹇ョ礉娑撳秹鍣撮弨

4閵嗕椒鍞惍浣稿隘閿涘潏odesegment閿涘鏂跨摠閺鍓р柤鎼村繋鑵戦弬瑙勭《閻ㄥ嫪绨╂潻娑樺煑娴狅絿鐖滈敍宀冨奔绗栭弰娑撶挒鈥冲彙娴滅娑撳敩閻胶鈹栭梻鏉戝隘閸

閸︺劍鏌熷▔鏇礄娴狅絿鐖滈崸妤嬬礆娑撶暰娑斿绔存稉褰夐柌蹇旀閿涘ava鐏忓崬婀弽鍫滆厬娑撻缚绻栨稉褰夐柌蹇撳瀻闁板布VM閸愬懎鐡ㄧ粚娲？閿涘苯缍嬬搾鍛扮箖閸欐﹢鍣洪惃鍕稊閻劌鐓欓崥搴礉java娴兼俺鍤滈崝銊╁櫞閺鐐竴娑撻缚閸欐﹢鍣洪幍閸掑棝鍘ら惃鍑M閸愬懎鐡ㄧ粚娲？閿涙稑婀崼鍡曡厬閸掑棝鍘ら惃鍑M閸愬懎鐡ㄩ悽鐪廰va閾忔碍瀚欓張铏规畱閼峰З閸ㄥ啫婧囬崶鐐存暪閸ｃ劍娼电粻锛勬倞閿涘苯鐖㈤惃鍕喘閸旀寧妲搁崣浜掗崝銊︿礁鍨庨柊宀糣M閸愬懎鐡ㄦ径褍鐨敍宀鏁撶涙ɑ婀℃稊鐔剁瑝韫囧懍绨ㄩ崗鍫濇啞鐠囧绱拠鎴濇珤閿涘苯娲滄稉鍝勭暊閺勬躬鏉╂劘閺冭泛濮╅幀浣稿瀻闁板布VM閸愬懎鐡ㄩ惃鍕╁倻宸遍悙鐟版皑閺勯崷銊ㄧ箥鐞涘本妞傞崝銊︿礁鍨庨柊宀糣M閸愬懎鐡ㄩ敍灞界摠閸欐牠鐔峰鏉堝啯鍙冮敍娑欑垽閻ㄥ嫪绱崝鎸庢Ц鐎涙ê褰囬柅鐔峰濮ｆ柨鐖㈢憰浣告彥閿涘瞼宸遍悙瑙勬Ц鐎涙ê婀弽鍫滆厬閻ㄥ嫭鏆熼幑銇囩亸蹇庣瑢閻㈢喎鐡ㄩ張鐔风箑妞ょ粯妲哥涵鐣鹃惃鍕￥閻忓灚妞块幀褋

閳煎攬ava閸棛鏁盤erm閸栧搫鎷癏eap閸栬櫣绮嶉幋鎰剁礉Heap閸栧搫鍨悽鐩d閸栧搫鎷癗ew閸栬櫣绮嶉幋鎰剁礉閼板ew閸栧搫寮甸崚鍡曡礋Eden閸,From閸,To閸栫尨绱滺eap={Old+NEW={Eden,From,To}}閿涘矁閸1閹电粈鎭

Heap閸栧搫鍨庢稉銈呫亣閸ф绱濇稉閸ф妲窷EWGeneration,閸欙缚绔撮崸妤佹ЦOldGeneration.閸︹垷ewGeneration娑撶礉閺堝绔存稉褰‥den閻ㄥ嫮鈹栭梻杈剧礉娑撴槒閺勬暏閺夈儱鐡ㄩ弨鐐煀閻㈢喓娈戠电钖勯敍宀冪箷閺堝琚辨稉鐚剈rvivorSpaces閿涘潚rom,to閿,鐎瑰啩婊戦悽銊︽降鐎涙ɑ鏂佸В蹇旈崹鍐ㄦ簢閸ョ偞鏁归崥搴＄摠濞茶绗呴弶銉ф畱鐎电钖勯妴鍌氭躬OldGeneration娑撶礉娑撴槒鐎涙ɑ鏂佹惔鏃傛暏缁嬪绨稉鏁撻崨钘夋噯閺堢喖鏆遍惃鍑M閸愬懎鐡ㄧ电钖勯敍宀冪箷閺堝閲淧ermanentGeneration閿涘奔瀵岀憰浣烘暏閺夈儲鏂丣VM閼风箒閻ㄥ嫬寮界亸鍕挒鈽呯礉濮ｆ柨缁鐠炩虫嫲閺傝纭剁电钖勭粵澶

閸︹垷ewGeneration閸фぞ鑵戦敍灞界崷鎯ф礀閺鏈电閼告暏Copying閻ㄥ嫮鐣诲▔鏇礉闁喎瀹宠箛鍌涚槨濞咰閻ㄥ嫭妞傞崐娆欑礉鐎涙ɑ妞挎稉瀣降閻ㄥ嫬鐠烇繝閸忓牏鏁盓den閹风柉绀夐崚鐗堢厙娑撶寗urvivorSpace,瑜版彎urvivorSpace缁屾椽妫垮鈥茬啊閸,閸撯晙绗呴惃鍒瞚ve鐎电钖勭亸杈惄瀛樺复閹风柉绀夐崚鐧榣dGeneration娑撳箵閵嗗倸娲滃銈忕礉濮ｅ繑GC閸氬函绱滶denJVM閸愬懎鐡ㄩ崸妞剧窗鐞氱缁屾亽鍌氭躬OldGeneration閸фぞ鑵戦敍灞界崷鎯ф礀閺鏈电閼告暏mark-compact閻ㄥ嫮鐣诲▔鏇礉闁喎瀹抽幈绨洪敍灞肩稻閸戝繐鐨疛VM閸愬懎鐡ㄧ憰浣圭湴.

閸ㄥ啫婧囬崶鐐存暪閸掑棗缁狙嶇礉0缁狙傝礋閸忋劑鍎(Full)閻ㄥ嫬鐎	閸︽儳娲栭弨璁圭礉娴兼艾娲栭弨绂D濞堝吀鑵戦惃鍕崷鎾呯幢1缁狙勫灗娴犮儰绗傛稉娲劥閸掑棗鐎崷鎯ф礀閺璁圭礉閸欑窗閸ョ偞鏁筃EW娑撴畱閸ㄥ啫婧囬敍瀛濾M閸愬懎鐡ㄥ┃銏犲毉闁艾鐖堕崣鎴犳晸娴滃栋LD濞堝灚鍨≒erm濞堥潧鐎崷鎯ф礀閺璺烘倵閿涘奔绮涢悞鑸垫￥JVM閸愬懎鐡ㄧ粚娲？鐎瑰湱鎾奸弬鎵畱Java鐎电钖勯惃鍕剰閸愮偣

JVM鐠嬪啰鏁C閻ㄥ嫰鎼达箒绻曢弰绶㈡妯兼畱閿涘奔瀵岀憰浣疯⒈缁夊秵鍎忛崘鍏哥瑓鏉╂稖閸ㄥ啫婧囬崶鐐存暪閿涙艾缍嬫惔鏃傛暏缁嬪绨痪璺ㄢ柤缁屾椽妫介敍娑樺綗娑撴稉妲窲VM閸愬懎鐡ㄩ崼鍡曠瑝鐡掕櫕妞傞敍灞肩窗娑撳秵鏌囩拫鍐暏GC閿涘矁瀚㈡潻鐐电敾閸ョ偞鏁归柈鍊熜掗崘鍏呯瑝娴滃捈VM閸愬懎鐡ㄩ崼鍡曠瑝鐡掑磭娈戦梻閺冭绱濈亸鍙樼窗閹秛tofmemory闁挎瑨閵嗗倸娲滄稉楦跨箹娑撶磽鐢憡鐗撮幑閮寸紒鐔荤箥鐞涘瞼骞嗘晶鍐ㄥ枀鐎规熬绱濋幍娴犮儲妫ゅ▔鏇㈤張鐔风暊娴ｆ洘妞傞崙铏瑰箛閵

閺嶈宓丟C閻ㄥ嫭婧閸掕绱濈粙瀣碍閻ㄥ嫯绻嶇悰灞肩窗瀵洝鎹ｇ化鑽ょ埠鏉╂劘閻滈惃鍕綁閸栨牭绱濇晶鐐插GC閻ㄥ嫯袝閸欐垶婧娴兼哎鍌欒礋娴滃棝浼╅崗宥堢箹娴滄盯妫舵０姗堢礉缁嬪绨惃鍕拋鈥虫嫲缂傛牕鍟撶亸鍗炵安闁灝鍘ら崹鍐ㄦ簢鐎电钖勯惃鍑M閸愬懎鐡ㄩ崡鐘垫暏閸滃瓘C閻ㄥ嫬绱戦柨閵嗗倹妯夌粈楦跨殶閻⑩娍ystem.GC()閸欏厴瀵ら缚JVM闂囩憰浣告躬JVM閸愬懎鐡ㄦ稉閸ㄥ啫婧囩电钖勬潻娑滈崶鐐存暪閿涘奔绲炬稉宥嗘Ц韫囧懘銆忔す绗傞崶鐐存暪閿涘奔绔存稉妲搁獮鏈电瑝閼冲熜掗崘鐭筕M閸愬懎鐡ㄧ挧鍕爱閼版鈹栭惃鍕湰闂堢礉閸欙箑娑旂喍绱版晶鐐插GC閻ㄥ嫭绉烽懓妞

閳煎棗缍嬫稉娑撶寙RL鐞氶梻妞傞敍瀛濾M閸愬懎鐡ㄩ崠鍝勭厵閻㈠疇鏉╁洨鈻兼俊鍌欑瑓閿

A.JVM娴兼俺鐦崶鍙ヨ礋閻╃鍙ava鐎电钖勯崷鈥en娑撳灥婵瀵叉稉閸ф”VM閸愬懎鐡ㄩ崠鍝勭厵

B.瑜版張den缁屾椽妫跨搾鍐查弮璁圭礉JVM閸愬懎鐡ㄩ悽瀹犵紒鎾存将閵嗗倸鎯侀崚娆忓煂娑撳绔村

C.JVM鐠囨洖娴橀柌濠冩杹閸︹en娑撳閺堝绗夊ú鏄忕┈閻ㄥ嫬鐠炩槄绱欐潻娆忕潣娴1閹存牗娲挎妯奸獓閻ㄥ嫬鐎崷鎯ф礀閺璁圭礆,闁插﹥鏂侀崥搴ゅEden缁屾椽妫挎禒宥囧姧娑撳秷鍐绘禒銉︽杹閸忋儲鏌婄电钖勯敍灞藉灟鐠囨洖娴樼亸鍡涘劥閸掑挼den娑撴た鐠哄啫鐠炩剝鏂侀崗urvivor閸

D.Survivor閸栭缚閻劍娼垫担婊璐烢den閸欏LD閻ㄥ嫪鑵戦梻缈犳唉閹广垹灏崺鐕傜礉瑜版彊LD閸栬櫣鈹栭梻纾嬪喕婢剁喐妞傞敍瀛瞮rvivor閸栬櫣娈戠电钖勬导姘崇粔璇插煂Old閸栫尨绱濋崥锕鍨导姘虫穱婵堟殌閸︹娍urvivor閸

E.瑜版彊LD閸栬櫣鈹栭梻缈犵瑝婢剁喐妞傞敍瀛濾M娴兼艾婀狾LD閸栭缚绻樼悰灞界暚閸忋劎娈戦崹鍐ㄦ簢閺鍫曟肠閿0缁狙嶇礆

F.鐎瑰苯鍙忛崹鍐ㄦ簢閺鍫曟肠閸氬函绱濋懟urvivor閸欏LD閸栬桨绮涢悞鑸垫￥濞夋洖鐡ㄩ弨鍙ョ矤Eden婢跺秴鍩楁潻鍥ㄦ降閻ㄥ嫰鍎撮崚鍡楃挒鈽呯礉鐎佃壈鍤VM閺冪姵纭堕崷鈥en閸栬桨璐熼弬鏉跨挒鈥冲灡瀵ょ瘮VM閸愬懎鐡ㄩ崠鍝勭厵閿涘苯鍨崙铏瑰箛"outofmemory闁挎瑨"

 娴ｈ法鏁vmstat 娑斿澧犻棁鐟曚線鍘ょ純娴夋惔鏃傚箚婢у啫褰夐柌蹇ョ礉閻滈崣姗鍣洪柊宥囩枂婵″倷绗呴敍

JVMSTAT_HOME閿涙vmstat鐎瑰閻╃秿
JVMSTAT_JAVA_HOME閿涙DK閹甸崷銊ф窗瑜版洩绱濇稉宥獳VA_HOME閸婅偐娴夐崥


        闁板秶鐤嗘總鎴掕⒈娑撳箚婢у啫褰夐柌蹇庣閸氬骸姘ㄩ崣浜掓潻鎰痡vmstat 娴滃棴绱濇潻鎰崨鎴掓姢娑撶尨绱

visualgc pid
#windows 缁崵绮烘潻娑樺弳bat 閻╃秿閸氬氦绻嶇悰宀冮崨鎴掓姢
#linux 缁崵绮烘潻娑樺弳bin 閻╃秿閸氬氦绻嶇悰宀冮崨鎴掓姢




 閸氬Зmysq閺佺増宓佹惔鎿勭礉net start mysql;
 mysql-hlocalhost -uroot -p;


 typeperf -si 5 "\Memory\Available Mbytes" "\Memory\Pages/sec"

 鐟曚焦妯夌粈鍝勯悶鍡楁珤閸滃苯鍞寸涙閺佹澘娅掗敍宀冮柨鍙嗛敍
typeperf "\Memory\Available bytes" "\processor(_total)\% processor time"

鐟曚椒浜 CSV 鏉堟挸鍤弽鐓庣础濮ｅ繋绗佺粔鎺楁寭閺勫墽銇氭稉濞 Explorer 鏉╂稓鈻奸敍宀冮柨鍙嗛敍
typeperf "\Process(Explorer)\Thread Count" -si 3 -o typeperf.csv

鐟曚礁婀拋锛勭暬閺 Server_name 娑撳﹥妯夌粈 50 娑 RAS 鐠佲剝鏆熼崳銊ф畱閼煎啩绶ラ敍宀冮柨鍙嗛敍
typeperf "\RAS port(LPT1)\Bytes Transmitted" -sc 50 -s Server_name




婵″倹鐏夋担鐘冲厒閸忎浇閻劍鍩沵yuser娴犲穼p娑192.168.1.6閻ㄥ嫪瀵岄張楦跨箾閹恒儱鍩宮ysql閺堝秴濮熼崳銊ф畱dk閺佺増宓佹惔鎿勭礉楠炴湹濞囬悽鈺﹜password娴ｆ粈璐熺靛棛鐖

GRANT ALL PRIVILEGES ON dk.* TO 'myuser'@'192.168.1.3' IDENTIFIED BY 'mypassword' WITH GRANT OPTION;

FLUSH   PRIVILEGES;


# /etc/init.d/mysql stop
# mysqld_safe --user=mysql --skip-grant-tables --skip-networking &
# mysql -u root mysql
mysql> UPDATE user SET Password=PASSWORD('newpassword') where USER='root';
mysql> FLUSH PRIVILEGES;
mysql> quit
# /etc/init.d/mysql restart
# mysql -uroot -p
Enter password: <鏉堟挸鍙嗛弬鎷岄惃鍕槕閻苟ewpassword>



tps(濮ｅ繒娴滃濮熸径鍕倞闁(TransactionPerSecond))
1. 缂佺喕閹甸張澶庡Ν閻愮銆冪粚娲？娴ｈ法鏁ら悳
閵嗛妴select substr(TABLESPACE_NAME,1,20) as TBSPC_NAME,bigint(TOTAL_PAGES * PAGE_SIZE)/1024/1024 as "TOTAL(MB)",used_pages*PAGE_SIZE/1024/1024 as "USED(MB)", free_pages*PAGE_SIZE/1024/1024 as "FREE(MB)" from table(snapshot_tbs_cfg('DB_NAME', -2)) as snapshot_tbs_cfg

閼惧嘲褰囬崚鏉跨秼閸撳秵妞傞梻缈犺礋濮濈礉閺佺増宓佹惔鎾磋崵娈慣PS閸欏esponse Time閿
select current time as current_time, total_app_commits,total_act_time,total_app_commitamp - db_conn_time)as tps,total_act_time/total_app_commits as response_time from table (mon_get_database(-2))


閵嗛妴閺屻儳婀呯悰銊р敄闂傜繝濞囬悽銊у芳
閵嗛妴select substr(tbsp_name,1,20) as TABLESPACE_NAME,substr(tbsp_content_type,1,10) as TABLESPACE_TYPE,sum(tbsp_total_size_kb)/1024 as TOTAL_MB,sum(tbsp_used_size_kb)/1024 as USED_MB,sum(tbsp_free_size_kb)/1024 as FREE_MB,tbsp_page_size AS PAGE_SIZE from SYSIBMADM.TBSP_UTILIZATION group by tbsp_name,tbsp_content_type,tbsp_page_size
閵嗛妴order by 1

asc閸楀洤绨   desc闂勫秴绨
閸掓鍤獮鍐叉綆閹笛嗛弮鍫曟？閹烘帒澧犻崡浣烘畱SQL鐠囧綖
db2 "select total_act_time/num_exec_with_metrics as a_exe_time ,substr(stmt_text,1,100) as sql from table(mon_get_pkg_cache_stmt(null,null,null,-2))where num_exec_with_metrics>=1 order by 1 desc fetch first 10 rows only"

閹稿鍑￠幍褑閺冨爼妫块崪宀冩鏁PU閺冨爼妫块悽鍗炪亣閸掓澘鐨崚妤鍤锝呮躬鏉╂劘閻ㄥ嚪QL
db2 "select application_handle,elapsed_time_sec,total_cpu_time,rows_read,substr(stmt_text,1,40)as sql from sysibmadm.mon_current_sql order by 2 desc,3 desc"
閵嗛妴db2 call GET_DBSIZE_INFO (?,?,?,0)

閵嗛妴  鏉堟挸鍤崣鍌涙殶閻ㄥ嫬
閵嗛妴  --------------------------
閵嗛妴  閸欏倹鏆熼崥宥忕窗 SNAPSHOTTIMESTAMP
閵嗛妴  閸欏倹鏆熼崐纭风窗 2008-05-26-10.53.06.421000

閵嗛妴  閸欏倹鏆熼崥宥忕窗 DATABASESIZE
閵嗛妴  閸欏倹鏆熼崐纭风窗 1203863552

閵嗛妴  閸欏倹鏆熼崥宥忕窗 DATABASECAPACITY
閵嗛妴  閸欏倹鏆熼崐纭风窗 4281493504

閵嗛妴unit=byte, byte/1024/1024=m

閵嗛妴db2 call GET_DBSIZE_INFO (?,?,?,0)



=========DB2鐢摜鏁ら惃鍕嚒娴======================================
閸氬З閺佺増宓佹惔
  db2start
閸嬫粍閺佺増宓佹惔
  db2stop
鏉╃偞甯撮弫鐗堝祦鎼
  db2 connect to bgj0 user db2inst using password
鐠囩粯鏆熼幑绨辩粻锛勬倞缁嬪绨柊宥囩枂
  db2 get dbm cfg
閸愭瑦鏆熼幑绨辩粻锛勬倞缁嬪绨柊宥囩枂
  db2 update dbm cfg using 閸欏倹鏆熼崥 閸欏倹鏆熼崐
鐠囩粯鏆熼幑绨遍惃鍕帳缂
  db2 connect to bgj0user db2 using pwd
  db2 get db cfg for bgj0
閸愭瑦鏆熼幑绨遍惃鍕帳缂
  db2 connect to  user db2 using pwd
  db2 update db cfg for bgj0 using 閸欏倹鏆熼崥 閸欏倹鏆熼崐
=====================================================================
閸忔娊妫撮幍閺堝绨查悽銊ㄧ箾閹
  db2 force application all
  db2 "force application(8)"
=====================================================================
婢跺洣鍞ら弫鐗堝祦鎼
  db2 force application all
  db2 backup db bgj0 to d:
  (db2 initialize tape on [url=file://\\.\tape0]\\.\tape0)
  (db2 rewind tape on [url=file://\\.\tape0]\\.\tape0)
  db2 backup db bgj0 to [url=file://\\.\tape0]\\.\tape0
閹垹閺佺増宓佹惔
  db2 restore db bgj0 from d: to d:
  db2 restore db bgj0 from [url=file://\\.\tape0]\\.\tape0 to d:
閸撳秵绮撮弫鐗堝祦鎼
  db2 rollforward db db3test to end of logs and complete
  db2 rollforward db db3test to [timestamp] and complete
  db2 rollforward db db3test to [timestamp] using local time and complete
========================================================================
婵″倷缍嶉弻銉ф箙閺佺増宓佹惔鎾舵畱鐎涙ê鍋嶆潻鍥┾柤?
    SELECT * FROM SYSCAT.PROCEDURES
缂佹垵鐣剧涙ê鍋嶆潻鍥┾柤
    db2 connect to bgj0 user db2 using pwd
    db2 bind c:\dfplus.bnd
閹风柉绀夌涙ê鍋嶆潻鍥┾柤閸掔増婀囬崝鈥虫珤娑撳﹦娈慍:\sqllib\function閻╃秿娑
=======================================================================

select current date from sysibm.sysdummy1;
values current date;

--閼惧嘲褰囪ぐ鎾冲閺冦儲婀
select current time from sysibm.sysdummy1;
values current time;
--閼惧嘲褰囪ぐ鎾冲閺冨爼妫块幋
select current timestamp from sysibm.sysdummy1;
values current timestamp;

--鐟曚椒濞囪ぐ鎾冲閺冨爼妫块幋鏍х秼閸撳秵妞傞梻瀛樺煈鐠佹媽鐨熼弫鏉戝煂 GMT/CUT閿涘苯鍨幎濠傜秼閸撳秶娈戦弮鍫曟？閹存牗妞傞梻瀛樺煈鐠佹澘鍣洪崢璇茬秼閸撳秵妞傞崠鍝勭槑鐎涙ê娅掗敍

values current time -current timezone;
values current timestamp -current timezone;

--閼惧嘲褰囪ぐ鎾冲楠炵繝鍞

values year(current timestamp);

--閼惧嘲褰囪ぐ鎾冲閺
values month(current timestamp);

--閼惧嘲褰囪ぐ鎾冲閺
values day(current timestamp);

--閼惧嘲褰囪ぐ鎾冲閺
values hour(current timestamp);

--閼惧嘲褰囬崚鍡涙寭
values minute(current timestamp);

--閼惧嘲褰囩粔
values second(current timestamp);

--閼惧嘲褰囧В
values microsecond(current timestamp);

--娴犲孩妞傞梻瀛樺煈鐠佹澘宕熼悪濞婇崣鏍у毉閺冦儲婀￠崪灞炬闂

values date(current timestamp);
values VARCHAR_FORMAT(current TIMESTAMP,'yyyy-mm-dd');
values char(current date);
values time(current timestamp);

--閹笛嗛弮銉︽埂閸滃本妞傞梻瀵告畱鐠侊紕鐣

values current date+1 year;
values current date+3 years+2 months +15 days;
values current time +5 hours -3 minutes +10 seconds;

--鐠侊紕鐣绘稉銈勯嚋閺冦儲婀℃稊瀣？閻ㄥ嫬銇夐弫

values days(current date)- days(date('2010-02-20'));

--閺冨爼妫块崪灞炬）閺堢喐宕查幋鎰摟缁楋缚瑕

values char(current date);
values char(current time);

--鐟曚礁鐨㈢涙娑撹尪娴嗛幑銏″灇閺冦儲婀￠幋鏍ㄦ闂傛潙

values timestamp('2010-03-09-22.43.00.000000');
values timestamp('2010-03-09 22:44:36');
values date('2010-03-09');
values date('03/09/2010');
values time('22:45:27');
values time('22.45.27');

--鐠侊紕鐣绘稉銈勯嚋閺冨爼妫块幋瀹犳稊瀣？閻ㄥ嫭妞傚绱

--缁夋帞娈戠亸蹇旀殶闁劌鍨庢稉鍝勫礋娴
values timestampdiff(1,char(current timestamp - timestamp('2010-01-01-00.00.00')));
--缁夋帊璐熼崡鏇氱秴
values timestampdiff(2,char(current timestamp - timestamp('2010-01-01-00.00.00')));
--閸掑棔璐熼崡鏇氱秴
values timestampdiff(4,char(current timestamp - timestamp('2010-01-01-00.00.00')));
--鐏忓繑妞傛稉鍝勫礋娴
values timestampdiff(8,char(current timestamp - timestamp('2010-01-01-00.00.00')));
--婢垛晙璐熼崡鏇氱秴
values timestampdiff(16,char(current timestamp - timestamp('2010-01-01-00.00.00')));
--閸涖劋璐熼崡鏇氱秴
values timestampdiff(32,char(current timestamp - timestamp('2010-01-01-00.00.00')));
--閺堝牅璐熼崡鏇氱秴
values timestampdiff(64,char(current timestamp - timestamp('2010-01-01-00.00.00')));
--鐎涳絽瀹虫稉鍝勫礋娴
values timestampdiff(128,char(current timestamp - timestamp('2010-01-01-00.00.00')));
--楠炵繝璐熼崡鏇氱秴
values timestampdiff(256,char(current timestamp - timestamp('2010-01-01-00.00.00')));
娑撻妴浣规殻鎼存挸娴犳枻绱欐径鍥﹀敜閺佺増宓佹稉杞扮娑撴瀮娴犺绱

1閿涘娴犳垝绠ｉ崜宥嗘焽瀵幍閺堝绻涢幒

db2 force application all

2閿涘娴

db2 backup db dbname user db2admin using db2admin to d:/

3閿涘浠径

db2 restore db dbname user db2admin using db2admin from d:/

娴滃被浣瑰瘻濡崇础婢跺洣鍞ら敍鍫濇禒鑺ユ殶閹硅礋婢舵矮閲滈弬鍥︽閿

1閿涘娴犲熴冪紒鎾寸

db2look -d dbname -e -a -x -i db2admin -w db2admin -o d:\createdb.sql

2閿涘閸戠儤鏆熼幑绱欐潻娑樺弳閸掔増瀵氱规氨娲拌ぐ鏇炴倵閹笛嗛敍

db2move dbname export -u db2admin -p db2admin

3閿涘閸忋儴銆冪紒鎾寸

db2 -tvf createdb.sql

4閿涘閸忋儲鏆熼幑绱欐潻娑樺弳閸掔増瀵氱规氨娲拌ぐ鏇炴倵閹笛嗛敍

db2move dbname import -u db2admin -p db2admin

娑撳浣蜂簰閺傚洦婀伴弬鐟扮础鐎电厧鍙嗙电厧鍤弻鎰嚋鐞涚礄閺佺増宓侀柌蹇氱窛鐏忓繒娈戠悰绱

1閿涘閸

export to d:\dbtable.txt of del select * from dbtable;

2閿涘閸

import from d:\dbtable.txt  of del insert into dbtable;

3閿涘閸忋儰璐￠惍

import from d:\dbtable.txt of del modified by codepage=1208 insert into dbtable;

codepage=1208 娑撶TF-8
codepage=1386 娑撶瘡BK
婢跺秴鍩楁禒锝囩垳
鐎电厧鍤弫鐗堝祦閿
export to "/qdzh_db/test/201507.del" of del lobs to /qdzh_db/test select * from  pub_bizinfo where PBI_TRANTIMESTART like '201507%'
鐠囧瓨妲戦敍
閿1閿涘銆冮崥宄礶st閸撳秹娼伴棁鐟曚礁鐢玸chema閸
閿2閿涘娑撳秶鈥樼拋銈堛冪紒鎾寸敍灞藉讲閻劌鎳℃禒 db2 describe table test閺屻儴
3
DB2閸︺劍澧界悰灞肩娑撱亣閻ㄥ埇nsert/update閹垮秳缍旈惃鍕閸婃瑦濮ら垾娣環e transaction log for the database is full.. 閳ユ繈鏁婄拠绱濋弻銉ょ啊娑撴稉瀣瀮濡楋絾妲窪B2閻ㄥ嫭妫╄箛妤佹瀮娴犺埖寮ф禍鍡欐畱缂傛ɑ鏅犻妴

妫ｆ牕鍘涙潻鎰稉瀣桨閸涙垝鎶ら弶銉︾叀閻│B2閻ㄥ嫭妫╄箛妤呭帳缂冧繆閹

?
1
$ db2 get db cfg | grep LOG
濞夈劍鍓伴崗鏈佃厬閻ㄥ嫪绗呴棃銏ゅ帳缂冦
Log file size (4KB) (LOGFILSIZ) = 1024 Number of primary log files (LOGPRIMARY) = 45 Number of secondary log files (LOGSECOND) = 20濮濄倖妞傞崣浜掗柅姘崇箖娑撳娼伴惃鍕嚒娴犮倖娼垫穱鏁糂2閻ㄥ嫭妫╄箛妤呭帳缂冧繆閹
$ db2 update db cfg using LOGFILSIZ 10240 $ db2 update db cfg using LOGPRIMARY 100 $ db2 update db cfg using LOGSECOND 100娣囨暭闁板秶鐤嗘禒銉ユ倵闂囩憰渚鍣搁弬鏉挎儙閸斻劍鏆熼幑绨辩圭偘绶
$ db2stop force $ db2start閺堥崥搴″晙濞嗏剝鐓￠惇瀣╂叏閺鐟版倵閻ㄥ嫬寮弫甯礉閻掕泛鎮楅柌宥嗘煀鏉╂劘insert/update閹垮秳缍旈妴
鐎电厧鍙嗛弫鐗堝祦閿
绾悳娣団剝浼呭▽鈩冩箒闂傞幍褑鐎电厧鍙嗛崨鎴掓姢
import from "/home/qdzhusr/test/201507/test.del" of del lobs from /home/qdzhusr/test/201507/ insert into pub_bizinfo

load from "/home/qdzhusr/test/201507/test.del" of del lobs from /home/qdzhusr/test/201507/ insert into pub_bizinfo

For2ear@

COPY NO/COPY YES/NONRECOVERABLE

load from "/qdzh_db/test/201508.del" of del lobs from /qdzh_db/test/ insert into pub_bizinfo NONRECOVERABLE without prompting

load from aa1.ixf of ixf replace into table1 COPY NO without prompting

閻掕泛鎮梔b2 load from /qdzh_db/test/test.del of del terminate into pub_bizinfo
閻掕泛鎮 reorg table <鐞>
閻掕泛鎮楃亸鍗炲讲娴犮儰绨￠敍

閹笛嗛崨鎴掓姢閿涙eorg table XXX閿涙稑宓嗛崣

db2 force all application
db2 quiesce db immediate
db2 "backup db qdzhdb tablespace(userspace1)"


鐎电厧鍤悰銊︽殶閹
  db2 export to c:\dftz.txt of del select * from dftz
  db2 export to c:\dftz.ixf of ixf select * from dftz
鐎电厧鍙嗙悰銊︽殶閹
import from c:\123.txt of del insert into ylbx.czyxx閿涘牊濡123閺傚洣娆㈡稉娈戦崘鍛禒EL閺嶇厧绱￠幓鎺戝弳閸掔殧lbx濡崇础娑撳娈慶zyxx鐞涖劋鑵戦敍灞藉閼风牚zyxx鐞涖劋鑵戦弫鐗堝祦閻ㄥ嫬鎮楅棃绱

db2 import from c:\dftz.txt of del commitcount 5000 messages c:\dftz.msg insert into dftz閿涘牆鐨閻╂ü绗卍ftz閺傚洣娆㈡稉娈戦崘鍛拋鏉跨秿娴爀l閺嶇厧绱＄佃壈鍤ftz鐞涖劋鑵戦敍灞剧槨5000閺夆剝褰佹禍銈勭濞嗏槄绱濋獮璺烘躬dftz.msg閺傚洣娆㈡稉瑜版洝绻冪粙瀣╄厬閻ㄥ嫭濮ょ拃锔夸繆閹礆

db2 import from c:\dftz.ixf of ixf commitcount 5000 messages c:\dftz.msg insert into dftz閿涘牆鐨閻╂ü绗卍ftz閺傚洣娆㈡稉娈戦崘鍛拋鏉跨秿娴爔f閺嶇厧绱＄佃壈鍤ftz鐞涖劋鑵戦敍灞剧槨5000閺夆剝褰佹禍銈勭濞嗏槄绱濋獮璺烘躬dftz.msg閺傚洣娆㈡稉瑜版洝绻冪粙瀣╄厬閻ㄥ嫭濮ょ拃锔夸繆閹礆

db2 import from c:\dftz.ixf of ixf commitcount 5000 insert into dftz閿涘牆鐨閻╂ü绗卍ftz閺傚洣娆㈡稉娈戦崘鍛拋鏉跨秿娴爔f閺嶇厧绱＄佃壈鍤ftz鐞涖劋鑵戦敍灞剧槨5000閺夆剝褰佹禍銈勭濞嗏槄绱

db2 import from c:\dftz.ixf of ixf commitcount 5000 insert_update into dftz閿涘牆鐨閻╂ü绗卍ftz閺傚洣娆㈡稉娈戦崘鍛拋鏉跨秿娴爔f閺嶇厧绱￠弴瀛樻煀楠炶泛閸廸tz鐞涖劋鑵戦敍

db2 Import from c:\dftz.ixf of ixf restartcount 55 rowcount 10000 replace_create into dftz閿涘牅绮巌xf閿涘绱欑亸鍝緁tz.ixf娑撴畱閸愬懎娴爔f閺嶇厧绱℃禒搴55閺壜ゅ殾缁10000閺夛紕娈戠拋鏉跨秿鐎佃壈鍤﹂弬鏉跨紦缁斿娈慸ftz鐞涖劋鑵戦敍

db2 Import from c:\dftz.ixf of ixf rowcount 10000 create into dftz閿涘牅绮巌xf閿涘绱欑亸鍝緁tz.ixf娑撴畱閸愬懎娴爔f閺嶇厧绱￠崜10000閺夛紕娈戠拋鏉跨秿鐎佃壈鍤﹂弬鏉跨紦缁斿娈慸ftz鐞涖劋鑵戦敍

db2 import from c:\dftz.ixf of ixf commitcount 5000 replace into dftz  閿涘牆鐨ftz鐞涖劋鑵戦惃鍕敶鐎圭懓閸廸tz鐞涖劋鑵戦獮鑸垫禌閹广垹鍙鹃幍閺堝鍞寸圭櫢绱濆В5000閺夆剝褰佹禍銈勭濞嗏槄绱
======================================================================
閹笛嗘稉娑撳婢跺嫮鎮婇弬鍥︽
    db2 閳ユ悤f 閹电懓閻炲棙鏋冩禒璺烘倳
  閿涘牊鏋冩禒鏈佃厬濮ｅ繋绔撮弶鈥虫嚒娴犮倗鏁 閿涙稓绮ㄩ弶鐕傜礆
閼峰З閻㈢喐鍨氶幍鐟伴悶鍡樻瀮娴
======================================================================
  瀵ょ儤鏋冮張鏋冩禒璁圭窗temp.sql
select 'runstats on table DB2.' || tabname || ' with distribution and detailed indexes all;' from syscat.tables where tabschema='DB2' and type='T';
db2 閳ユ悤f temp.sql>runstats.sql
===============================================================
閼峰З閻㈢喐鍨氬楦裤冮敍鍫ｉ崶鎾呯礆鐠囧綖
閸︺劍婀囬崝鈥虫珤娑撳绱癈:\sqllib\misc閻╃秿娑
db2 connect to bgj0 user db2 using pwd
db2look -d bgj0 -u db2inst -e -p -c c:\bgj0.txt
============================================================================
閹哄牊娼堢紒娆愮厙閻劍鍩涢弶鍐
grant dbadm on database to user bb
============================================================================

select * from czyxx fetch first 1 rows only
============================================================================

db2expln -d 閺佺増宓佹惔鎾虫倳 -u 閻劍鍩涢崥 鐎靛棛鐖 -o 閺傚洣娆㈤崥宄-t  -c 閻㈢喐鍨氶崠鍛畱濡崇础閸 -p 閸栧懎鎮

=======================================================================================
鐟曚椒濞囬悽鈯縌L鐠嬪啰鏁ょ拠褰為柌宥囩矋鐞涚礉娴ｈ法鏁dmin_cmd鏉╁洨鈻奸崣鎴濆毉閹笛嗛崨鎴掓姢閿
call sysproc.admin_cmd('reorg table tablename index indexname')

===========================================================================
閺屻儳婀呴弻鎰閹稿洤鐣剧悰銊ф畱閻樿埖
db2 load query table 鐞涖劌鎮
============================================================================

閺勫墽銇氳ぐ鎾冲閻劍鍩涢幍閺堝銆

閵嗛妴list tables

閸掓鍤幍閺堝娈戠化鑽ょ埠鐞

閵嗛妴list tables for system
======================閸嬫碍鏆熼幑绨遍惃鍕椽閻╃瑢閸欏秶绱惄绱欓崡鍐插灩闂勩倗绱惄绱================
缂傛牜娲
1.db2 catalog tcpip node node1 remote 172.16.170.100(閺堟簚IP閸︽澘娼) server 50004(閸欑矤 get dbm cfg show detail 娑撴箙閸戠尨绱
2.db2 catalog db sample(鐟曚焦妲х亸鍕煂閻ㄥ嫭鏆熼幑绨遍崷銊︽拱閺堣櫣娈戦崚鎮) at node node1

閸欏秶绱惄
1.db2 uncatalog node node1
2.db2 uncatalog db sample
================閺屻儳婀呯悰銊х波閺==============================

閵嗛妴db2 describe select * from tmmsm01 (db2 describe table tmmsm01)

================娑撻缚銆冮弨鐟版倳========================================


db2 rename table 閸樼喎鐞涖劌鎮 to 閻╂畱鐞涖劌鎮

==================娣囨暭閺屾劒閲滈幙宥勭稊閻劍鍩涢惃鍕綀闂================


閿涘牓娓剁憰浣洪兇缂佺兒OOT閻劍鍩涢崣鍌欑瑢閿
閹跺﹦鏁ら幋閿嬪閸︺劎绮嶉柅姘崇箖smitty group娣囨暭閹电仦鐐电矋閻ㄥ嫭鎼锋担婊勬綀闂勬劕寮弫甯礉閻掕泛鎮楅崷鈺燽2 get dbm cfg show detail娑撴俺绻僤b2 update dbm cfg for bgj0 using  SYSMON group name   DB2MON閸涙垝鎶ら弶銉ゆ叏閺


=========================================================


濡弻銉ㄣ冮惃鍕亣鐏



db2 select tabname閿涘pages閿涘畺pages from syscat.tables where tabname='tabname'

閺屻儳婀呴張鏉╂垳绔村▎鈩冩殶閹瑰櫢缂佸嫮娈戦弮鍫曟？閻ㄥ嫭妞傞梻杈剧窗
db2 閳ユΞelect stats_time,tabname from syscat.tables where stats_time is not null Order by stats_time閳ユmore

濡弻銉︽Ц閸氾箑鍑￠崑姘崇箖runstats閿
db2 -v "select tbname,nleaf,nlevels,stats_time from sysibm.sysindexes"

娑撶儤鏆熼幑绨遍崑姘冲殰閸斻劎绮虹拋鈥蹭繆閹暪闂嗗棴绱
db2 update db cfg for bgj0 using auto_maint on
db2 update db cfg for bgj0 using auto_tbl_maint on
db2 update db cfg for bgj0 using auto_runstats on

閺鍫曟肠閺屾劘銆冩稉澧嶉張澶婂灙娑撳﹦娈戠紒鐔绘穱鈩冧紖閿

 runstats on table 閺屾劒閲滃Ο鈥崇础娑撳娈戠悰銊ㄣ冮崥 on all columns

娑撳﹤褰炵粵澶婃倱娴滃函绱      runstats on table 鐞涖劌鎮


閺鍫曟肠鐞涖劌鎷扮槐銏犵穿娑撳﹦娈戦弫鐗堝祦鎼存挾绮虹拋鈥蹭繆閹礉娑撳秴瀵橀崥鍨庣敮鍐埠鐠佲蹭繆閹窗
runstats on table 濡崇础娑撳娈戠悰 and indexes all

閺鍫曟肠鐞涖劌鎷扮槐銏犵穿娑撳﹦娈戦弫鐗堝祦鎼存挾绮虹拋鈥蹭繆閹礉閸栧懎鎯堥崚鍡楃缂佺喕娣団剝浼呴敍
runstats on table pub_bizinfo with distribution and indexes all


閺鍫曟肠鐞涖劋绗傞惃鍕殶閹圭氨缂佺喕娣団剝浼呮禒銉ュ挤缁便垹绱╂稉濠勬畱鐠囷妇绮忕紒鐔绘穱鈩冧紖閿涘奔绗夐崠鍛儓閸掑棗绔风紒鐔绘穱鈩冧紖閿
runstats on table 濡崇础娑撳娈戠悰 and detailed indexes all

閺鍫曟肠鐞涖劋绗傞惃鍕殶閹圭氨缂佺喕娣団剝浼呮禒銉ュ挤缁便垹绱╂稉濠勬畱鐠囷妇绮忕紒鐔绘穱鈩冧紖閿涘苯瀵橀崥鍨庣敮鍐埠鐠佲蹭繆閹窗
runstats on table 濡崇础娑撳娈戠悰 with distribution and detailed indexes all


閺鍫曟肠閸忔娊鏁崚妞剧瑐閻ㄥ嫭鏆熼幑绨辩紒鐔绘穱鈩冧紖閿
runstats on table 濡崇础娑撳娈戠悰 on key columns


==============================================================

濡弻銉ユ憿娑撱冮張澶婁粵鏉╁檺eorg
db2 select tabname閿涘pages閿涘畺pages from syscat.tables



濡弻銉ユ禒鎴掔瑢闁插秵鐎崨鎴掓姢閻ㄥ嫬宸婚崣鑼惰ぐ鏇窗
db2 list history backup/reorg  all for bgj0


=======================================================================


閹笛嗙悰銊ｄ胶鍌ㄥ鏇熼弻銉︽Ц閸氾箓娓剁憰浣镐粵reorg閿涘苯鍘涢幍褑reorgchk閸涙垝鎶ゅΛ閿涘苯鎳℃禒銈呮稉瀣剁窗
db2 reorgchk update statistics on table bgj0.bgj0logevent

(閺屻儳婀呴悽銊ょ艾缁便垹绱╅惃鍑4閿涘瓗5閿涘瓗6閿涘瓗7閿涘瓗8鏉╂瑥鍤戦崚妤嬬礉婵″倹鐏夋潻娆忓殤閸掓ぞ鑵戦惃鍕崲娴ｆ洑绔撮崚妤佹箒閺勭喎褰*閿涘苯鍨拠瀛樻瑜版挸澧犻惃鍕冮崪/閹存牜鍌ㄥ鏇炵安鐠囥儵鍣哥紒鍕)

reorgchk on table all 绾暰閺勬儊闂囩憰浣哥悰銊ㄧ箻鐞涘矂鍣哥紒鍕╁倽绻栫甸涚艾鐎佃澧嶉張澶庛冮懛濮╅幍褑 runstats 瀵板牊婀侀悽銊

===============================================================

閼磋鲸婧閺傜懓绱￠柌宥囩矋鐞涖劍妲搁弫瀵告倞鐞涖劎閻楀洦娓惰箛鏌熷▔鏇樺倷濞囬悽鈥揕P闁插秶绮嶇悰绱濋幍褑閿
db2 reorg table bgj0.bgj0logevent

鐟曚椒濞囬悽銊ゅ閺冩儼銆冪粚娲？闁插秶绮嶇悰绱濋幍褑閿
db2 reorg table dbname.tablename use 娑撳瓨妞傜悰銊р敄闂傛潙鎮


闁插秶绮嶇悰銊ヨ嫙閺嶈宓佺槐銏犵穿鐎电鏉╂稖闁插秵鏌婇幒鎺戠碍閿涘本澧界悰宀嬬窗
db2 reorg table bgj0.bgj0logevent index IDX_LOG_01

db2 reorg indexes all for table bgj0.bgj0logevent allow read access


=====閺屻儲闁=======================================================
cd /db2data/db2user/db2inst/db2inst/NODE0000/SQL00001/db2event/db2detaildeadlock
du -a|sort -rn

db2evmon -path /db2data/db2user/db2inst/db2inst/NODE0000/SQL00001/db2event/db2detaildeadlock>/tmp/lock1.txt


============閻╂垶甯堕崳================================================



           缁楃濮濄儻绱伴幍鎾崇磻閻╂垶甯跺閸忕绱欓崣鎷癵et snapshot閻╃鍙)
           db2 "update monitor switches using lock ON sort ON bufferpool ON uow ON table ON statement ON"
           db2 "update monitor switches using lock off sort off bufferpool off uow off table off statement ON"
           db2 update dbm cfg using DFT_MON_BUFPOOL on DFT_MON_LOCK on DFT_MON_SORT on DFT_MON_STMT on  DFT_MON_TABLE on  DFT_MON_TIMESTAMP on  DFT_MON_UOW on  HEALTH_MON on
           db2 get monitor switches

           缁楃癌濮濄儻绱伴崚娑樼紦娴滃娆㈤惄鎴炲付閸
           db2 "create event monitor monitor_all for statement,database,tables,tablespaces,deadlocks,transactions write to file '/db2data/event'"

           缁楃瑏濮濄儻绱板┑濞茶绨ㄦ禒鍓佹磧閹貉冩珤
           db2 "set event monitor db2detaildeadlock state=1"
           ps -ef|grep db2event
           [bgrzl0m0][db2inst][/db2data/event]>ls
           00000000.evt  db2event.ctl

           缁楁磽濮濄儻绱伴弽鐓庣础閸栨牔绨ㄦ禒鍓佹磧閹貉勬瀮娴
           db2evmon -db bgj0 -evm db2detaildeadlock > db2detaildeadlock.txt




============濞撳懐鈹栭惄鎴炲付閸ｇ窗===========================================

閺屻儳婀呴惄鎴炲付閸ｃ劌鎮曠粔甯窗ps -ef |grep db2event     (db2detaildeadlock)

db2 "set event monitor db2detaildeadlock state=0"

閸掔娀娅庨垾  00000000.evt  db2event.ctl閳ユ繃鏋冩禒


db2 "set event monitor db2detaildeadlock state=1"



===============韫囧弾閻╂垶甯堕崳===================================================
 db2 update dbm cfg using DFT_MON_BUFPOOL on DFT_MON_LOCK on DFT_MON_SORT on DFT_MON_STMT on  DFT_MON_TABLE on  DFT_MON_TIMESTAMP on  DFT_MON_UOW on  HEALTH_MON on

 Default database monitor switches
   Buffer pool                         (DFT_MON_BUFPOOL) = ON                         ON
   Lock                                   (DFT_MON_LOCK) = OFF                        ON
   Sort                                   (DFT_MON_SORT) = ON                         ON
   Statement                              (DFT_MON_STMT) = ON                         ON
   Table                                 (DFT_MON_TABLE) = ON                         ON
   Timestamp                         (DFT_MON_TIMESTAMP) = ON                         ON
   Unit of work                            (DFT_MON_UOW) = ON                         ON
 Monitor health of instance and databases   (HEALTH_MON) = ON                         ON


 db2 get snapshot for all on bgj0 > all_snap.out

閸斻劍涔籷l鐠囧綖snapshot
閻╂垶甯堕弰鎯佺涙ê婀濠氭敚
grep -n "Deadlocks" all_snap.out|grep -v "= 0"|more

閹笛嗘０鎴犵畳閻ㄥ嫯閸
grep -n "Number of execution" all_snap.out|grep -v "= 0"|sort -krn|more


閹笛嗛弮鍫曟？瀵板牓鏆遍惃鍕崣
grep -E "Total execution time" all_snap.out| sort -rn|more
grep -E "Rows read" all_snap.out| sort -rn|more


==========================================================================




缁狅紕鎮

export 鐏忓棙鏆熼幑绨遍弫鐗堝祦閹惰棄褰囬崚棰佺娑撻挬闂堛垺鏋冩禒鏈佃厬閵
import 闁俺绻冩担璺ㄦ暏 IMPORT 鐎圭偟鏁ょ粙瀣碍閿涘苯鐨㈤弫鐗堝祦鐎电厧鍙嗛崚鐗堟殶閹圭氨閵
load query table <tbname>
[to local-message-file][nosummary | summaryonly] [showdelta]  鏉╂柨娲 LOAD 鐎圭偟鏁ょ粙瀣碍閻ㄥ嫯绻樻惔锔
backup database <dbname> [to <path>] 閹笛嗛弫鐗堝祦鎼存挸娴犲
restore database <dbname> [from <path>] 閹笛嗛弫鐗堝祦鎼存挻浠径宥
get health snapshot for dbm 鏉╂柨娲栫圭偘绶ラ惃鍕敮绋挎彥閻撗備繆閹礄娴犲懘鍌滄暏娴 V8閿涘
get health snapshot for all on <dbname> 鏉╂柨娲栭弫鐗堝祦鎼 <dbname> 閻ㄥ嫭澧嶉張澶嬬敮绋挎彥閻撗嶇礄娴犲懘鍌滄暏娴 V8閿涘

缁狅紕鎮婇張宥呭閸

get admin cfg 鏉╂柨娲栫粻锛勬倞閺堝秴濮熼崳銊ф畱闁板秶鐤嗙拋鍓х枂閵
update admin cfg using <p> <v> 鐏忓棛閻炲棙婀囬崝鈥虫珤闁板秶鐤嗛崣鍌涙殶 <p> 閺囧瓨鏌婃稉鍝 <v>閵


===============================================================



 db2pd -v
 db2pd -osinfo
 [bgrz1d0][db2inst][/db2data/db2user/db2inst]>db2pd -help

Usage:
   -h | -help [file=<filename>]
      Help
   -v | -version [file=<filename>]
      Version
   -osinfo [disk] [file=<filename>]
      Operating System Information
   -dbpartitionnum <num>[,<num>]
      Database Partition Number(s)
   -alldbpartitionnums
      All partition numbers
   -database | -db <database>[,<database>]
      Database(s)
   -alldatabases | -alldbs
      All Active Databases
   -inst
      Instance scope output
   -file <filename>
      All Output to Filename
   -command <filename>
      Read in predefined options
   -interactive
      Interactive
   -full
      Expand output to full length
   -repeat [num sec] [count]
      Repeat every num seconds (default 5) count times
   -everything
      All options on all database partitions

Instance scope options:

   -agents [db=<database>] [ [agent=<agentid>] | [application=<appid>] ] [file=<filename>]
      Agents
   -fcm [<numApps>] [file=<filename>]
      FCM Information
   -mempools [file=<filename>]
      Memory Pools
   -memsets [file=<filename>]
       Memory Sets
   -dbmcfg [file=<filename>]
      DBM Config
   -sysplex [db=<database>] [file=<filename>]
      Sysplex List
   -utilities [file=<filename>]
      Utilities
   *-fmp
      FMP Table

Database scope options:

   -applications [ [application=<appid>] | [agent=<agentid>] ] [file=<filename>]
      Applications
   -transactions [tran=<tranhdl>] [app=<apphdl>] [file=<filename>]
      Transactions
   -bufferpools [file=<filename>]
      Buffer Pools
   -logs [file=<filename>]
      Transaction Logs
   -locks [tran=<tranhdl>] [file=<filename>] [showlocks] [wait]
      Locks
   -tablespaces [file=<filename>] [group] [tablespace=<tablespace id>]
      Tablespaces/Containers
   -dynamic [file=<filename>]
      Dynamic Cache
   -static [file=<filename>]
      Static Cache
   -mempools [file=<filename>]
      Memory Pools
   -memsets [file=<filename>]
       Memory Sets
   -dbcfg [file=<filename>]
      Database Config
   -catalogcache [file=<filename>]
      Catalog Cache
   -tcbstats [all|index] [tbspaceid=<tbspaceid> [tableid=<tableid>]] [file=<filename>]
      Table Control Block Stats
   -reorgs [file=<filename>]
      Table Reorg Stats
   -recovery [file=<filename>]
      Recovery Status
   -reopt [file=<filename>]
      Reoptimized SQL Statements
   -storagepaths
      Storage Paths
   -hadr [file=<filename>]
      High Availability Disaster Recovery
   -activestatements [file=<filename>]
      Active Statement List

   Examples:
   db2pd -dbpartitionnum 0,1 -db sample -locks
   db2pd -dbp 0,1 -database bgj0 app=<50>
   db2pd -alldbp -alldbs


妤犲矁鐦夐弫鐗堝祦鎼存挻妲搁崥锔介崷銊ㄧ箻鐞涘本浠径宥囨畱鐠佲剝鏆熼崳绱濊ぐ鎾冲閺冦儱绻旈崪灞界秼閸撳硛SN閿涘牊妫╄箛妤绨崣鍑ょ礆閹绘劒绶垫禍鍡樻）韫囨ぞ缍呯純绱
db2pd -db sample -recovery

db2pd -logs


db2pd -db BGJ0 -applications
db2pd -db BGJ0 -transactions|more
db2pd -db bgj0 -locks wait

db2pd -db bgj0  -applications -dyn|more
db2pd -db BGJ0 -applications -transactions -dynamic|more
db2pd -db bgj0

db2pd -db bgj0 -applications -transactions -dynamic|grep locks


[bgrzl0m0][db2inst][/db2data/db2user/db2inst]>db2pd -db BGJ0 -logs

Database Partition 0 -- Database BGJ0 -- Active -- Up 0 days 00:38:39 -- Date 08/06/2009 15:46:23

Logs:
Current Log Number            0
Pages Written                 0
Method 1 Archive Status       n/a
Method 1 Next Log to Archive  n/a
Method 1 First Failure        n/a
Method 2 Archive Status       n/a
Method 2 Next Log to Archive  n/a
Method 2 First Failure        n/a

Address            StartLSN       State      Size       Pages      Filename
0x0780000020008118 0x0008F2488000 0x00000000 16000      16000      S0000000.LOG
0x07800000200081B8 0x0008F6308000 0x00000000 16000      16000      S0000001.LOG
0x0780000020008258 0x0008FA188000 0x00000000 16000      16000      S0000002.LOG
0x07800000200082F8 0x0008FE008000 0x00000000 16000      16000      S0000003.LOG
0x0780000020008398 0x000901E88000 0x00000000 16000      16000      S0000004.LOG
0x0780000020008438 0x000905D08000 0x00000000 16000      16000      S0000005.LOG

db2pd  -db BGJ0 -dbcfg
db2pd  -db BGJ0 -dbmcfg
db2pd  -db BGJ0 -bufferpools
db2pd  -db BGJ0 -tablespaces
db2 list tablespaces show detail|more
db2 list tablespace containers for 4 show detail
db2pd -db BGJ0 -reorg

绾暰閸濋嚋娴滃濮熼崠鍛儓闁夸礁鐣鹃敍
db2pd -db bgj0 -locks showlocks wait

鐠囧﹥鏌囬柅鐘冲灇闁夸礁鐣剧粵澶婄窡閻ㄥ嫯銆冮崝鐘绘敚閹懎鍠岄敍
db2pd -db bgj0 -applications 閿涘牊鐓￠惇濯爐atus娑撶皞ock_wait妞ょ懓鎼存梻娈慉ppHandl閸欏嚖绱
db2pd -db bgj0 -transactions 閿涘牊鐓￠惇濠pHandl閸欏嘲鎼存梻娈憈ranhdl閸欏嚖绱
db2pd -db bgj0 -locks閿涘牊鐓￠惇濯anhdl閸欏嘲鎼存梻娈戦柨浣鸿閸ㄥ绱檛ype閿涘绗岄柨浣瑰剰閸愮绱檓ode閿涘绱

==================================================================


db2mtrk
   -i閺勫墽銇氳ぐ鎾冲鐎圭偘绶ラ崘鍛摠娴ｈ法鏁ら敍
   -i -v閺勫墽銇氳ぐ鎾冲鐎圭偘绶ラ崘鍛摠娴ｈ法鏁ょ拠锔剧矎娣団剝浼呴敍
   -d閺佺増宓佹惔鎾冲敶鐎涙ü濞囬悽銊﹀剰閸愮绱
   -d -v閺佺増宓佹惔鎾冲敶鐎涙ü濞囬悽銊ㄧ紒鍡曚繆閹幢
   -p娴狅絿鎮婃潻娑氣柤娑撴挾鏁ら崘鍛摠娴ｈ法鏁ら悳
   -r(interval闁插秴娴ｈ法鏁ら梻鎾閺佸府绱漜ount閺勫櫢婢跺秶娈戝▎鈩冩殶

Memory for database: BGJ0

   Backup/Restore/Util Heap is of size 16384 bytes
   Package Cache is of size 540672 bytes
   Catalog Cache Heap is of size 131072 bytes
   Buffer Pool Heap is of size 395689984 bytes
   Buffer Pool Heap is of size 1254653952 bytes
   Buffer Pool Heap is of size 42713088 bytes
   Buffer Pool Heap is of size 704512 bytes
   Buffer Pool Heap is of size 442368 bytes
   Buffer Pool Heap is of size 311296 bytes
   Buffer Pool Heap is of size 245760 bytes
   Lock Manager Heap is of size 340508672 bytes
   Database Heap is of size 31637504 bytes
   Other Memory is of size 0 bytes
   Total: 2067595264 bytes


============================db2advis閸涙垝鎶===========================



db2 -tvf (鐠虹窞)explain.ddl


db2 update monitor switches using statement on


create event monitor for statements write

db2 set event monitor sql_trace state=1


(閹笛嗗锝呯埗閻ㄥ嫭鏆熼幑绨卞ú璇插З閿涘苯鑻熷婵骞忛崣鏍х安閻劋绗傞幍閺堝娈慡QL鐠囧綖閿涘瞼娲块崚鐗堝厒鐟曚胶娈戦惄鎴炲付閻ㄥ嫭妞傚▓鐢电波閺夌喆鍌︾礆


db2 event monitor sql_trace state=0




閹稿鍙庨幍褑閺冨爼妫块梽宥呯碍閹烘帒鍨幍褑閼版妞傞張闂璺ㄦ畱SQL鐠囧綖閿涘奔濞囬悽銊ょ瑓閸掓閸欍儻绱
db2 "select stmt_text,(stop_time-start_time) 'ExecutionTime(sec)' from stmt_sql_trace where stmt_operation not in(7,8,9,19) order by decimal(ExecutionTime) desc fetch first 10 rows only";


閹稿鍙庢０鎴犲芳闂勫秴绨幒鎺戝灙閹笛嗗▎鈩冩殶閺堟径姘辨畱SQL鐠囧綖閿涘奔濞囬悽銊ょ瑓閸掓閸欍儻绱
db2 select distinct(stmt_text),count(*) Count from stmt_sql_trace where stmt_operation not in(7,8,9,19) group by stmt_text order by count (*) desc fetch first 10 rows only;


閹稿鍙嶤PU閺冨爼妫块梽宥呯碍閹烘帒鍨張閼版PU閺冨爼妫块惃鍑稱L鐠囧綖閿涘奔濞囬悽銊ょ瑓閸掓閸欍儻绱
db2 "select stmt_text,user_cpu_time,UserCPU(sec) from stmt_sql_trace where stmt_operation not in(7,8,9,19) order by usrcpu desc fetch first 10 rows only"


閹稿鍙庨幀缁樺笓鎼村繑妞傞梻鎾鎼村繑甯撻崚妤佸笓鎼村繑妞傞梻瀛樻付闂璺ㄦ畱SQL鐠囧綖閿涘奔濞囬悽銊ょ瑓閸掓閸欍儻绱
db2 select stmt_text,total_sort_time,TotalSortTime(ms) from stmt_sql_trace where stmt_operation not in (7,8,9.19) order by decimal (total_sort_time) desc fetch first 10 rows only;




閹规洝骞忔稉濠呯様濮ｅ繋绔寸猾璁宠厬閻ㄥ嚪QL鐠囧綖閿涘苯鑻熺亸鍡楃暊娴犳杹缂冩躬tune.sql閺傚洣娆㈡稉鍌氳嫙鐏(--#set frequency <閹电憰浣瑰⒔鐞涘瞼娈慡QL鐠囧綖閻ㄥ嫭閺> )閸涙垝鎶ら幓鎺戝弳閸掔殞une.sql閺傚洣娆㈡稉绱濇潻娆愮壉閸欎簰閺囧瓨鏁煎銉ょ稊鐠愮喕娴囨稉鐦￠弶陇閸欍儳娈戦幍褑妫版垹宸奸妴

閹靛妤鍩岄惃鍓噓ne.sql缁鎶娴滃簼绗呴棃銏ｇ箹閺嶅嚖绱
--#set frequency 100
SELECT DISTINCT DIVISION FROM org;



娑撹桨绨＄涵鐣鹃崫绨虹槐銏犵穿閸欏厴閹绘劙鐝幀褑鍏橀敍灞惧瘻婵″倷绗呴幍褑缁便垹绱╂い楣冩６缁嬪绨敍
db2advis -d sample -i tune1.sql -t 0 -o tuneidx.sql
閸忔湹鑵戦幍閺堝閹恒劏宕橀崣鍏樻导姘絹妤傛ɑ褑鍏橀惃鍕偍瀵洖鐨㈤弨鍓х枂閸︺劍鏋冩禒绉歶neidx.sql娑撳倻绱潏鎴ｉ弬鍥︽閿涘苯婀弬鍥︽瀵慨瀣ǎ璇插娑撻弶陇绻涢幒銉︽殶閹圭氨閻ㄥ嫯绻涢幒銉ㄩ崣銉窗
db2 connect to sample user userid using password閿
楠炶泛婀弬鍥︽閺堢啲濞ｈ濮炴俊鍌欑瑓鐞涘苯鎳℃禒銈忕窗
terminate閿

閺堥崥搴ょ箥鐞涘矁閺傚洣娆㈡禒銉ュ灡瀵ょ儤甯归懡鎰畱缁便垹绱╅敍
db2 -tf tuneidx.sql -z tuneidx.log

閸忔湹鑵戦敍瀹紆neidx.log閹规洝骞弔uneidx.sql閻ㄥ嫭澧嶉張澶庣翻閸戞亽



===========濞村鐦張杞扮瑐濞村鐛欑悰銊р敄闂傚娈戠悰銊︽殶閹规箒閺鐟板綁閸氬海娈戠粚娲？婢堆冪毈婢х偛鍣============


BGJ0娑撳娈慏S_EP01闁插瓓GJ0LOGEVENT閺佺増宓乧ount閺佸府绱1150525


閸撳秴褰撮崚鐘绘珟BGJ0LOGEVENT閺佺増宓侀崥宸唎unt閺佸府绱欓悽鈺爀lete閸掔媴绱氶敍


more 55.log閺冩儼銆冪粚娲？閻绗夐崙鐑樻降婢堆冪毈婢х偛鍣洪敍

db2stop force
db2start

db2 connect to bgj0

闁插秵鐎Λ閺屻儻绱伴敍鍧塨2 reorgchk update statistics on table BGJ0.BGJ0LOGEVENT閿
闁插秵鐎敍 閿涘潐b2 reorg table on BGJ0.BGJ0LOGEVENT閿


more 55.log閺冭泛褰查惇瀣冪粚娲？閺堝銇囩亸蹇撳綁閸



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
delete娑斿鎮楅懗鎴掔瑝閼充粙鍣撮弨鎹愩冪粚娲？

閸樼喎鍘涚悰銊р敄闂傚鏁ゆ禍80%閿涘瞼鏁辨禍搴＄氨娑撴箒娑撳鐘恒冨銊ャ亣閺冪姵鐦敍灞惧娴犮儱鍩勯悽銊╂毐閸嬪洣缍旀禍鍝緀lete閹垮秳缍旈敍灞藉灩闂勩倓绨￠崗鏈佃厬4/5閻ㄥ嫭鏆熼幑绱濇担鍡樻Ц閻銆冪粚娲？鏉╂ɑ妲80%瀹革箑褰搁敍灞炬Ц娑撳秵妲告担婊冪暚delete閼风箒閺勭瑝閼充粙鍣撮弨鎹愩冪粚娲？閻ㄥ嫰妯嬮敍

婵″倹鐏夌憰渚鍣撮弨鎹愩冪粚娲？閻ㄥ嫯鐦介敍灞界安鐠囥儲搴濈疄閹垮秳缍旈崨绱电拫銏ｉ樋



(1)commit娴滃棙鐥呴張澶涚吹閻掕泛鎮梤eorg娑撴稉瀣剁礉閸欎簰閻⑩暜unstats閸忓牆鍨庨弸鎰娑撳娲伴弽鍥冮敍灞藉従缂佹挻鐏夐崣浜掓禒宸梱sstat.tables瀵版鍩


(2)娑撳秷閻ㄥ嫯鐦絜xport閸戠儤娼甸敍灞藉灩闂勩倛銆冮敍灞藉晙LOAD鏉╂稑骞撻妴



濞:DELETE娑斿鎮楅惃鍕殶閹硅ぐ鏇炲娇鏉╂ê鐡ㄩ崷绱濋幍娴犮儲鏆熼幑宕伴悽銊╁櫤閺勭瑝閸戝繐鐨惃鍕剁礉鏉╂瑦妲告稉杞扮啊閹垫儳娲朌ELETE閸氬氦灞藉嫉閹疇閻ㄥ嫭鏆熼幑




~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

=========閻㈢喐鍨氶弫鐗堝祦鎼存挾绮ㄩ弸鍕瀮娴=================================



db2look   -d   bgj0   -e   -c   -o   /db2bak/bgj0/structure.sql

=========瑜版挸澧犻惄缍嶆稉瀣晸閹存亯b2support閺傚洣娆============================

db2support . -d bgj0 -c

=========DB2鐎瑰=================================================

1.	瀵慨瀣暔鐟
a)	娴ｆ粈璐焤oot閻劍鍩涢惂璇茬秿閿涘矁绻橀崗銉ュ煂鐎瑰閺傚洣娆㈤惄缍嶆稉瀣箥鐞
         ./db2_install 閳ユ悕 DB2.ESE
2.	閸掓稑缂揹b2缁狅紕鎮婇張宥呭閸
a)	娴ｆ粈璐焤oot閻劍鍩涢惂璇茬秿閿涘矂姘崇箖娴犮儰绗呴崨鎴掓姢閸掓稑缂揹b2缁狅紕鎮婇張宥呭閸
                dascrt 閳ユ悥 dasuser
3.	閸氬Зdb2閺佺増宓佹惔鎾堕悶鍡楁珤
a)	娴ｆ粈璐焏b2閺佺増宓佹惔鎾堕悶鍡楁珤閻劍鍩涢敍鍧塧suser閿涘娅ヨぐ
b)	鏉╂劘. das/bin/db2admin start閸涙垝鎶ら崥濮╅弫鐗堝祦鎼存挾閻炲棗娅
4.	閸掓稑缂撶圭偘绶
a)	娴ｆ粈璐焤oot閻劍鍩涢惂璇茬秿閿涘矂姘崇箖娴犮儰绗呴崨鎴掓姢閸掓稑缂64娴ｅ秶娈慸b2鐎圭偘绶
               db2icrt 閳ユ悥 db2fenc 閳ユ悩 64 db2inst2
5.	閸掓稑缂揹b2閺傚洣娆㈤惃鍕懠閹
a)	鏉╂劘 db2ln閸涙垝鎶
6.	濞夈劌鍞絣icense
a)	娴ｆ粈璐熺圭偘绶ラ悽銊﹀煕閿涘潐b2inst閿涘娅ヨぐ,鏉╂劘閿涙瓰b2licm 閳ユ彸 db2ese.lic閸涙垝鎶
7.	閸氬З鐎圭偘绶
a)	娴ｆ粈璐熺圭偘绶ラ悽銊﹀煕閿涘潐b2inst閿涘娅ヨぐ鏇礉鏉╂劘db2start閸涙垝鎶
8.	閸掓稑缂撻弫鐗堝祦鎼
        鏉╂劘db2 create db test
閵嗛妴閵嗛妴閹绘劗銇氶幋鎰閸氬簺
閵嗛妴閵嗛妴Db2 connect to test鐏忓崬褰叉禒銉ㄧ箾娑撳﹥鏆熼幑绨辨禍




========DB2閸欏倹鏆熼柊宥囩枂=====================================

1.	娴ｆ粈璐熺圭偘绶ラ悽銊﹀煕閿涘潐b2inst閿涘娅ヨぐ
2.	鏉╂劘db2set DB2COMM=tcpip
3.	鏉╂劘db2 update dbm cfg using svcename 50002鐠佸墽鐤嗛張宥呭閻ㄥ嫯绻涢幒銉ч崣
4.	鐠佸墽鐤嗚ぐ鎺撱傞弮銉ョ箶
    Db2 connect to dbname
Db2 update db cfg using LOGRETAIN recovery
濞夌窗鐠佸墽鐤嗘禍鍡氶崣鍌涙殶閿涘苯婀潻鐐村复閺佺増宓佹惔鎾舵畱閺冭泛娆庣窗閹禷ckup pending
5.	娣囨暭閺冦儱绻旂捄绶, 鐏忓棙妫╄箛妤佹瀮娴犺泛缍婂锝堝殾濞茶濮╅弮銉ョ箶鐠虹窞娑斿閻ㄥ嫪缍呯純
db2 update db cfg for test using logarchmeth1 DISK:/db2log/db2archivelog




==============閺佺増宓佹惔鎾充淮鎼村嘲鎻╅悡褎閺==============================

db2 get health snapshot for all on bgj0 <show detail>



==============================================================

濡弻銉﹀閺堝鏆熼幑绨辨稉娈戠拠璇插晸鐞涘本鏆熺佃鐦妴浣稿絺閻㈢喓娈戠粵澶愭敚閺佽埇浣硅崵娈戦柨浣稿窗閻劍妞傞梻娣礁宕熸担宥嗘闂傛潙鍞撮惃鍕敚閸楃姷鏁ら弫浼村櫤閵嗕焦闁夸焦鍨ㄩ柨浣搁崝鐘虹Ъ閸旇￥浣稿絺閻㈢喍绨℃径姘毌濞嗏剝甯撴惔蹇旀惙娴ｆ粈浜掗崣濠勬祲閸忓磭娈戦弮鍫曟？闁插繒鐡戦弫鐗堝祦鎼存挷濞囬悽銊δ佸:


select db_name, SNAPSHOT_TIMESTAMP,rows_read, rows_selected, lock_waits, lock_wait_time, lock_wait_time/nullif(lock_waits,0) as avg_wt_time, deadlocks, lock_escals, total_sorts, total_sort_time, total_sort_time/nullif(total_sorts,0) as avg_sort_time, sort_overflows, sort_overflows/nullif(total_sorts,0) as pct_ovflow_sorts from table (snapshot_database ('',-1)) as snapshot_db



=============================================================


閼惧嘲褰囩悰銊р敄闂傛潙銇囩亸蹇庝簰閸欏﹤澧挎担娆忓讲閻劎鈹栭梻鏉戙亣鐏:

select substr(tablespace_name,1,120) as TBSPC_NAME,used_pages, free_pages from table (snapshot_tbs_cfg (' ', -1)) as snapshot_tbs_cfg



=============================================================

閺嶈宓佺悮閻ㄥ嫰閻滃洦娼电涵鐣鹃棁鐟曚焦澧界悰瀹篹org閹存潧unstats閸涙垝鎶ら惃鍕:

select substr(table_schema,1,10) as tbschema, substr(table_name,1,30) as tbname,rows_read,rows_written,overflow_accesses,page_reorgs from table (SNAPSHOT_TABLE(' ', -1)) as snapshot_table order by rows_read desc fetch first 10 rows only



=============================================================

閺嶈宓佺悮鍟撻惃鍕弫鐗堝閸10瀵姵娲块弬鐗堟付妫版垹绠掗惃鍕:

select substr(table_schema,1,10) as tbschema,substr(table_name,1,30) as tbname, rows_read, rows_written, overflow_accesses, page_reorgs from table (SNAPSHOT_TABLE(' ', -1)) as snapshot_table order by rows_written desc fetch first 10 rows only

=============================================================



鐎甸涚艾db2閺佺増宓佹惔鎿勭礉鐎电厧鍙嗛崪灞介崙楦裤冪紒鎾寸崪灞炬殶閹瑰従鐎圭偛绶㈢粻閸楁洩绱濋崣娓剁憰浣烘暏閸掔櫜b2look閸滃畳b2move娑撱倓閲滈崨鎴掓姢閸楀啿褰查妴鍌濈箹娑撱倓閲滈崨鎴掓姢闁粙娓剁憰浣告躬鐎广垺鍩涚粩娈戦崨鎴掓姢鐞涘苯閻炲棗娅掓稉澧界悰宀嬬礉娴ｅ棗娴滃孩鏆熼幑绨遍張宥呭閸ｃ劌鎷扮广垺鍩涚粩绗夐崷銊ユ倱娑撻張鍝勬珤娑撳﹦娈戦敍宀勬付鐟曚礁鐔峰Иcatalog閸涙垝鎶ら敍灞炬降閸忓牆鐣幋鎰箼缁嬪鏆熼幑绨遍崝鐘烘祰閸掔増婀伴崷甯礉閻掕泛鎮楅崘宥堢箻鐞涘苯閸戝搫閸忋儲鎼锋担婧

    婵″倹鐏夐弰绻欑粙瀣惙娴ｆ粣绱濋崚娆忓帥闂囩憰浣瑰Ω鏉╂粎鈻奸惃鍕殶閹圭氨娣団剝浼呴崝鐘烘祰閸掔増婀伴崷甯礉婵″倹鐏夐弰婀伴崷鏉垮灟鐠哄疇绻1閸2閿涘奔绮3瀵慨瀣剁礉閸忚渹缍嬫俊鍌欑瑓閿

       1閵 catalog server 缁旀畱 node 閿涘苯鎳℃禒銈呮稉瀣剁窗
       db2 catalog tcpip node node_name remote hostname server service_port
       db2 uncatalog node node_name   閿涘牆褰囧☉鍫ｅΝ閻愬湱娈戠紓鏍窗閿

   閸忔湹鑵 node_name 閺勬暠娴ｇ姳鎹㈤幇蹇氭崳閻ㄥ嫪绔存稉绮ㄩ悙鐟版倳閿涘瞼绮ㄩ悙鐟版倳娑撳秷鍏樼捄鐔峰嚒閺堝娈戠紒鎾跺仯閸氬秹鍣告径宥忕礄閸欐俺绻僤b2  list node directory 閺屻儳婀呴敍澶涚礉hostname娑旂喎褰叉稉绡扨 address閿涘ervice_port娑撹櫣閸欙絽褰挎稉閼哥帛鐠併倓璐50000閵嗗倽濡悙鍦窗瑜版洜鏁ゆ禍搴＄摠閸屻劏绻欑粙瀣殶閹圭氨閻ㄥ嫭澧嶉張澶庣箾闁碍褌淇婇幁

       2閵 catalog 鏉╂粎 DB2 閺佺増宓佹惔鎿勭礉閸涙垝鎶ゆ俊鍌欑瑓閿
       db2 catalog db db_name [as alias_name] at node node_name
     db2 uncatalog db db_name    閿涘牆褰囧☉鍫熸殶閹圭氨閻ㄥ嫮绱惄绱

      db_name 閺勫瘹鏉╂粎鈻奸弫鐗堝祦鎼存挾娈戦崥宥呯摟閿 alias_name 閺勯幋椋庣圭偘绶ラ崥宥忕礄閸欎簰韫囩晫鏆愰敍澶涚礉 db2node 閺勫瘹娑撳﹪娼版担鐘冲閹稿洤鐣鹃惃鍕Ν閻愮ode 閿

     3閵 鏉╃偞甯撮弫鐗堝祦鎼存搫绱濋崨鎴掓姢婵″倷绗呴敍
       db2 connect to db_name user user_name using password
     db_name 閺勫瘹閺佺増宓佹惔鎾舵畱閸氬秴鐡ч敍 user_name 閺勬殶閹圭氨閻劍鍩涢崥宥忕礉password閺勬殶閹圭氨鐎靛棛鐖

   4閵嗕胶鏁b2look閸涙垝鎶ら悽鐔稿灇鐞涖劎绮ㄩ弸鍕畱DLL閼存碍婀
   db2look -d db_name -i user_name -w password -a -e -o d:\script.sql

     db_name 閺勫瘹閺佺増宓佹惔鎾舵畱閸氬秴鐡ч敍 user_name 閺勬殶閹圭氨閻劍鍩涢崥宥忕礉password閺勬殶閹圭氨鐎靛棛鐖

   5閵嗕胶鏁b2move鐎电厧鍤幍閺堝銆冮惃鍕殶閹
     db2move db_name export -u user_name -p password

     db_name 閺勫瘹閺佺増宓佹惔鎾舵畱閸氬秴鐡ч敍瀵ser_name 閺勬殶閹圭氨閻劍鍩涢崥宥忕礉 password閺勬殶閹圭氨鐎靛棛鐖

   6閵嗕胶鏁xport鐎电厧鍤幐鍥х暰閻ㄥ嫯銆冮弫鐗堝祦
     db2 "export to d:\data\tab1.ixf of ixf lobs to d:\data\ lobfile lobs modified by lobsinsepfiles  messages d:\data\tab1.msg select * from schema_name.table_name"
   schema_name 閺勩冮幍鐏炵儑绱漷able_name閺勩冮崥宥忕礉 lobsinsepfiles 閹 lobsinfile 閺勬晸閹存仏ob閺傚洣娆 閸撳秳绔存稉妲搁悽鐔稿灇濮ｅ繋閲滈敍灞芥倵闂堛垺妲搁悽鐔稿灇閸掗绔存稉鏋冩禒鏈佃厬


   7閵嗕焦澧界悰瀹籷l閼存碍婀
    db2 -tvf d:\script.sql -z d:\script.log

    8閵嗕胶鏁b2move鐎电厧鍙嗛幍閺堝銆冮惃鍕殶閹
     db2move db_name import -io replace -u user_name -p password

    9閵嗕胶鏁mport鐎电厧鍙嗛幐鍥х暰閻ㄥ嫯銆冮弫鐗堝祦
      db2 "import from d:\data\tab1.ixf of ixf messages d:\data\tab1.msg insert into schema_name.table_name"

      DB2閿涙碍鐓￠惇瀣冮惃鍕偍瀵
select *  from SYSCAT.INDEXES  where TABNAME='鐞涖劌鎮'

db2 "select  tabname  from syscat.indexes"

      娴ｈ法鏁ょ拠褰瀌b2 describe indexes for  table MOBILE.TFCREGISTERINF閸欎簰閺屻儳婀呴崚鎷屻冪槐銏犵穿閹诲繗鍫
      閸掓稑缂撶槐銏犵穿
      CREATE INDEX JOB_BY_DPTON on EMPLOYEE (WORKDEPT, JOB)

      DB2缁便垹绱╅崚娑樼紦闁棄绨茬拠銉ユ憿娴滄稑甯崚娆忔喛閿涚喕绻栭弰绶㈡径姘眽闁姤褰侀崚鎵畱闂傞敍灞肩瑓闂堛垹姘ㄦ稉鐑樺亶鐠囷妇绮忔禒瀣矝DB2缁便垹绱╅崚娑樼紦閸樼喎鍨敍灞肩返閹劌寮懓鍐ㄦ稊鐘

DB2缁便垹绱╃圭偟骞囬弰绔存稉鐙+閺嶆埊绱濋柅姘崇箖缁便垹绱╅崣浜掔圭偟骞囪箛鐔哥叀鐠囩礉闁灝鍘ら崗銊ㄣ冮幍寮挎禒銉﹂弶銉ュ櫤鐏忔厲O閹垮秳缍旈妴

缁便垹绱╅弰鐞涖劍鏆熼幑娈戞稉缁夊秵濞婄挒鈽呯礉闁俺绻冮幎钘夊絿閺堝妾洪弫鐗堝祦閿涘苯閺佺増宓侀惃鍕瀻鐢啳绻樼悰宀冪粻妤嬬礉娴犮儲閺夈儱鐣幋鎰弫鐗堝祦閻ㄥ嫬鎻╅柅鐔哥槐

缁便垹绱╅崚娑樼紦鐠囧綖

CREATE INDEX <INDEX_NAME> ON <TABLE_NAME> (<COLNAME1,COLNAME2閳>)
閸掓稑缂撶槐銏犵穿闂囩憰浣规暈閹板繒娈戦崷鐗堟煙閿

缁便垹绱╂惔鏃囬悽銊︽降閹绘劙鐝弻銉ㄩ柅鐔峰閿涘奔绲鹃弰绱扮佃娲块弬鏉挎嫲閸掔娀娅庨幙宥勭稊鐢附娼电拹鐔兼桨瑜板崬鎼烽敍灞芥礈娑撻缚閸氬本閺囧瓨鏌婄槐銏犵穿閵嗗倹澧嶆禒銉у偍瀵洖绨茬拠銉ュ灡瀵ゅ搫鍩岄弴瀛樻煀閵嗕礁鍨归梽銈囨祲鐎佃鐦拠璇插絿鐏忔垹娈戠悰銊ょ瑐閵

缁便垹绱╅棁鐟曚胶瀚粩瀣畱缁屾椽妫挎潻娑滅涙ê鍋嶉崪宀閻炲棎鍌滃偍瀵洘妲搁棁鐟曚胶閻╂鈹栭梻瀛樻降鐎涙ê鍋嶉妴鍌涘娴犮儵浼╅崗宥夊櫢婢跺秴鍨卞鍝勫晳娴ｆ瑧鍌ㄥ鏇樺倸娑:

閳ユ窅REATE TABLE TEST_IDX (COL1 INT NOT NULL, COL2 INT NOT NULL, COL3 IN NOT NULL)閳ユ績娣怰EATE INDEX TEST_IDX_IDX1 ON TEST_IDX (COL1, COL2, COL3)閳
瀹歌尙绮￠張澶屽偍瀵槕EST_IDX_IDX1閸︺劋绗佹稉鍨稉濠忕礉閸︺劌鍨卞琛℃怀REATE INDEX TEST_IDX_IDX2 ON TEST_IDX (COL1, COL2)閳ユ繐绱濇潻娆愮壉閻ㄥ嫮鍌ㄥ鏇氱閼哥梾閺堝绮堟稊鍫滅稊閻劊

缁便垹绱╅悽銊︽降闁灝鍘ょ悰銊﹀閹诲繈鍌炴俺绻冪槐銏犵穿鐎电懓銇囬柌蹇旀殶閹瑰▕閸欐牗婀侀梽鎰板劥閸掑棴绱濊ぐ銏″灇娑撴稉娴夌电懓鐨柌蹇曟畱閺堝绨弫鐗堝祦缂佹挻鐎敍宀勬俺绻冪佃婀佹惔蹇旀殶閹圭波閺嬪嫮娈戦弻銉﹀閸欎簰韫囩喐鍏傜憰浣圭叀閹靛墽娈戦弫鐗堝祦閵嗗倹澧嶆禒銉у偍瀵洟鍌氭値瀵よ櫣鐝涢崷銊︽殶閹瑰櫤濮ｆ棁绶濇径褏娈戠悰銊ょ瑐閿涘矁灞肩瑬鐠囥儴銆冩稉濠勬畱閺屻儴缂佸繐鐖堕弰鐗撮幑娼禒鑸电叀鐠囥垽鍎撮崚鍡樻殶閹瑰倹鐦俊鍌欑娴滄稓閮寸紒鐔风唨绾悰绱濇俊淇俌STEM鐞涚礉鏉╂瑤绨虹悰銊︽殶閹瑰櫤鐏忓骏绱濋懓灞肩瑬缂佸繐鐖堕弰鐓＄拠銏犲弿闁劍鏆熼幑绱濋幍娴犮儴绻栨禍娑溿冩稉濠傜紦缁斿鍌ㄥ鏇為幀褑鍏橀惃鍕閸濆秳绗夐弰绶㈡径褝绱濈瑰苯鍙忛崣浜掗柆鍨帳閿涘奔浜掗崗宥呯粻锛勬倞闁姵鍨氳ぐ鍗炴惙閵

閸掓稑缂撶槐銏犵穿閻ㄥ嫮娲伴惃鍕箷閺堝绔存稉姘ㄩ弰绻氱拠浣规殶閹规暜娑撻幀褝绱濋崣浜掗崚鈺冩暏閳ユ怀REATE UNIQUE INDEX <INDEX_NAME> ON <TABLENAME> (<COLNAME>)閳ユ繐绱濋弶銉ョ暚閹存劑

娑撳鏁导姘舵瀵繐鍨卞铏瑰偍瀵洩绱濋幍娴犮儴娑撳秷閸︺劋瀵岄柨绗傞崚娑樼紦缁便垹绱╁ù鍨傜粚娲？閵

鐏忎粙鍣洪崙蹇撶毌缁便垹绱╅惃鍕灡瀵ゆ亽渚盉2鐠虹窞鐠佸潡妫舵导妯哄閸ｃ劋绱伴弽瑙勫祦鐞涖劋鑵戦幍閹绘劒绶甸惃鍕偍瀵洘娼电瑰本鍨氱亸钘夊讲閼宠棄閻ㄥ嫯闂傜熅瀵板嫮娈戦幋鎰拱娴兼媽閵嗗倸鍨卞楦跨箖婢舵氨娈戠槐銏犵穿閹板繐鎳楅惈DB2娴兼ê瀵查崳銊ф晸閹存劖娲挎径姘辨畱鐠佸潡妫剁捄绶為敍灞界暚閹存劖娲挎径姘辨畱鐠佸潡妫剁拋鈥冲灊閹存劖婀版导鎵暬閿涘矁绻栨导姘崝鐕琎L鐠囧綖缂傛牞鐦ч弮鍫曟？閵

閸掓稑缂撻崬绔寸槐銏犵穿閸欎簰闁灝鍘ら幒鎺戠碍閵嗗倸娲滄稉铏瑰偍瀵洘妲搁張澶婄碍閺佺増宓佺紒鎾寸敍灞芥躬鏉╂稖閹靛伎閺冭绱滵B2娴兼岸绮拋銈嗗瘻閻撗囥庢惔蹇氱翻閸戣櫣绮ㄩ弸婊愮礉閼板奔绗夐弰瀵滈悡褎褰冮崗銉ュ帥閸氬簺鍌炴俺绻冮崚娑樼紦閸炵缁便垹绱╅崣浜掗柆鍨帳閹烘帒绨敍灞惧絹妤傛ɑ鐓＄拠銏⊙嗗厴閵

閸忛攱婀佹径褔鍣洪柌宥呴弫鐗堝祦閻ㄥ嫬鍨稉濠佺瑝鐟曚礁鍨卞铏瑰偍瀵洏鍌氭躬婢堆囧櫤闁插秴閻ㄥ嫬鍨稉濠傚灡瀵よ櫣鍌ㄥ鏇熺梾閺堝鎹㈡担鏇熷壈娑斿鍌氭稉瀣殶閹圭波閺嬪嫸绱扮悰銊よ厬鐎涙col1閺堝銇囬柌蹇涘櫢婢跺秵鏆熼幑绱濋崗鏈佃厬閻ㄥ嫭鏆熼幑鍨庣敮鍐╂Ц閹稿鍙90%閻ㄥ垖閿涘苯鎷10%閻ㄥ嚞閺夈儱鍨庣敮鍐﹀倽绻栭弽椋庢畱閸掓ぞ绗傞崚娑樼紦缁便垹绱╁▽鈩冩箒娴犺缍嶉幇蹇庣疅閵嗗倸婀弻銉ㄩ弶鈥叉娑撶ol1=閳ユ閳ユ瑦妞傞敍宀冪悰銊ф畱缁便垹绱╅幍寮块崪宀冦冮幍寮垮▽鈩冩箒閻楃懓銇囧绱撻妴鍌涚壌閹圭杽鐠虹數绮℃宀嬬礉閸掓ぞ绗傞惃鍕殶閹瑰瀻鐢啫绨茬拠銉ユ綆閸栭敍灞借嫙娑撴梹濞婄靛棗瀹虫稉宥堝厴婢堆傜艾5 閳ヨ埇

閸掓稑缂撴俊鍌欑瑓鐞涚窗

閳ユ窅REATE TABLE TEST1 (NO INT NOT NULL, NAME CHAR(5))閳

閳ユ窅REATE INDEX TEST1_IDX_1 ON TEST1 (NO)閳

閳ユ窔NSERT INTO TEST1 SELECT ROW_NUMBER() OVER(), CHR(INT(RAND()*75+48))||CHR(INT(RAND()*75+48))||CHR(INT(RAND()*75+48)) FROM SYSCAT.COLUMNS T1 JOIN SYSCAT.COLUMNS T2 ON T1.COLNAME!=T2.COLNAME FETCH FIRST 100 ROWS ONLY閳

閳ユ藩ELECT * FROM TEST1 WHERE NO = 50閳



DB2缁便垹绱╂导妯哄
缁便垹绱╅搹鐣屽姧閼宠棄婢堆冦亣閹绘劕宕岄弻銉ㄩ弫鍫㈠芳閿涘奔绲鹃弰鑻熸稉宥嗘Ц鐎佃澧嶉張澶嬬叀鐠囥垽鍏橀柅鍌滄暏閻ㄥ嫨鍌涚槷婵″倸娴滃簶娣猠lect * From account where balance != 500閳ユ繆绻栭弽椋庢畱鐠囧綖閿涘異alance閸掓ぞ绗傞惃鍕偍瀵洖鐔閺堢瑐閺勬￥閺佸牏娈戦妴鍌︾礄鏉╂瑦妲稿鍫濄偨閻炲棜袙閻ㄥ嫸绱濋垾婊绗夌粵澶夌艾閳ユ繂婀狟+閺嶆垹鍌ㄥ鏇氳厬閹簼绠為懗鑺ョ叀閹垫儳鎲块敍鐕傜礆
閹存垳婊戦幎濠冪叀鐠囥垼閸欍儰鑵慦here閸氬酣娼伴惃鍕冩潏鎯х础缁夐璐熺拫鎾圭槤閵嗕颈B2娑撶毘鐠囧秷鍏橀崥锔垮▏閻劎鍌ㄥ鏇犳畱閹懎鍠岄崚妤勩冩俊鍌欑瑓閿


SELECT TABNAME FROM SYSCAT.TABLES WHERE TBSPACE='琛ㄧ┖闂村悕';

db2p鎼滅储d -d 鏁版嵁搴撳悕 -tablespace 鍦ㄧ幇瀹炵粨鏋滀腑濡備笅灏辨槸 AS鏄痑utomaitc storage鑷姩瀛樺偍鐨勭缉鍐欙紝AR鏄痑utoresize鐨勭缉鍐 AS鏄痽es璇佹槑琛ㄧ┖闂存槸鑷姩瀛樺偍鐨 AR鏄痽es璇佹槑琛ㄧ┖闂存槸鑷姩鎵╁睍鐨
statistics
AS AR
YES NO

绯荤粺绠＄悊鐨勭┖闂达紙SMS锛夊拰鏁版嵁搴撶鐞嗙殑绌洪棿锛圖MS锛夋槸DB2鏁版嵁搴撲腑涓ょ绫诲瀷鐨勫熀鏈〃绌洪棿銆
涓 SMS 琛ㄧ┖闂寸浉鍏宠仈鐨勫鍣ㄦ槸鏂囦欢绯荤粺鐩綍锛岃岃繖浜涚洰褰曚腑鐨勬枃浠朵細闅忕潃琛ㄧ┖闂翠腑瀵硅薄鐨勫闀胯屽闀裤傛枃浠朵細澧炲姞鑷宠揪鍒板叾涓竴涓鍣ㄤ笂鐨勬枃浠剁郴缁熼檺鍒舵垨杈惧埌鏁版嵁搴撶殑琛ㄧ┖闂村ぇ灏忛檺鍒躲
DMS 琛ㄧ┖闂寸敱鏂囦欢瀹瑰櫒鎴栧師濮嬭澶囧鍣ㄧ粍鎴愶紝瀹冧滑鐨勫ぇ灏忔槸鍦ㄥ皢瀹瑰櫒鎸囧畾缁欒〃绌洪棿鏃惰缃殑銆傚綋瀹瑰櫒涓殑鎵鏈夌┖闂撮兘宸茶浣跨敤鏃讹紝鍒欒涓鸿〃绌洪棿宸叉弧銆備絾鏄紝涓 SMS 涓嶅悓锛屾偍鍙互浣跨敤 ALTER TABLESPACE 璇彞鏉ユ坊鍔犳垨鎵╁睍瀹瑰櫒锛屼粠鑰屽厑璁稿皢鏇村鐨勫瓨鍌ㄥ櫒绌洪棿鎻愪緵缁欒〃绌洪棿銆侱MS 琛ㄧ┖闂磋繕鍏锋湁绉颁负鈥滆嚜鍔ㄨ皟鏁村ぇ灏忊濈殑鍔熻兘銆傚綋鍙互鑷姩璋冩暣澶у皬鐨 DMS 琛ㄧ┖闂翠腑鐨勭┖闂磋娑堣楁椂锛孌B2 鏁版嵁搴撶郴缁熷彲鑳藉洖鎵╁睍涓涓垨澶氫釜鏂囦欢瀹瑰櫒銆係MS 琛ㄧ┖闂村叿鏈夌被浼间簬鑷姩澧為暱鐨勫姛鑳戒絾鏈鈥滆嚜鍔ㄨ皟鏁村ぇ灏忊濅笓闂ㄧ敤浜 DMS銆
鍚敤鍜岀鐢ㄨ嚜鍔ㄨ皟鏁村ぇ灏忥紙AUTORESIZE锛
缂虹渷鎯呭喌涓嬶紝涓嶄細瀵 DMS 琛ㄧ┖闂村惎鐢ㄨ嚜鍔ㄨ皟鏁村ぇ灏忓姛鑳姐備笅鍒楄鍙ュ垱寤轰笉鍚敤鑷姩璋冩暣澶у皬鍔熻兘鐨 DMS 琛ㄧ┖闂达細
CREATE TABLESPACE DMS1 MANAGED BY DATABASE
     USING (FILE '/db2files/DMS1' 10 M)瑕佸惎鐢ㄨ嚜鍔ㄨ皟鏁村ぇ灏忓姛鑳斤紝灏 AUTORESIZE YES 瀛愬彞鎸囧畾涓 CREATE TABLESPACE 璇彞鐨勪竴閮ㄥ垎锛
CREATE TABLESPACE DMS1 MANAGED BY DATABASE
     USING (FILE '/db2files/DMS1' 10 M) AUTORESIZE YES鍦ㄥ凡鍒涘缓 DMS 琛ㄧ┖闂翠箣鍚庯紝杩樺彲浠ラ氳繃鍦 ALTER TABLESPACE 璇彞涓婁娇鐢 AUTORESIZE 瀛愬彞鏉ュ惎鐢ㄦ垨绂佺敤鑷姩璋冩暣澶у皬鍔熻兘锛
ALTER TABLESPACE DMS1 AUTORESIZE YES
   ALTER TABLESPACE DMS1 AUTORESIZE NO鏈変袱涓叾浠栧睘鎬э紙MAXSIZE 鍜 INCREASESIZE锛変笌鑷姩璋冩暣澶у皬鐨勮〃绌洪棿鐩稿叧鑱斻


瑕佺湅浣犵殑琛ㄧ┖闂存槸绯荤粺绠＄悊杩樻槸鏁版嵁搴撶鐞嗭紝绯荤粺绠＄悊鐨勬槸鑷姩澧為暱鐨勶紝鏁版嵁搴撶鐞嗙殑琛ㄧ┖闂存槸瑕佹寚瀹氬ぇ灏忕殑銆
绯荤粺绠＄悊锛歋MS
鏁版嵁搴撶鐞嗭細DMS

reorg 鍓嶆彁鍒犻櫎浜嗗ぇ閲忔暟鎹紝涓鑸儏鍐垫槸鑳介噴鏀惧嚭绌洪棿鍑烘潵鐨勶紝浣嗕篃鏈夊彲鑳界┖闂翠笉浣嗘病閲婃斁鍙嶈岃繕鏄澶х┖闂达紝鐢╠b2dart鐪嬬湅楂樻按浣嶅惂

reorg table schema.tablename;
runstats on table schema.tablename;


鏌ヤ簡涓涓嬭祫鏂欙紝鍙互閫氳繃淇敼database_memory绯荤粺鍙傛暟鏉ヨ缃暟鎹簱鍐呭瓨鐨勪娇鐢ㄣ傞粯璁ゆ儏鍐典笅database_memory鐨勮缃槸AUTOMATIC锛岃繖閲屽彲浠ラ氳繃涓嬮潰鐨勫懡浠ゆ潵淇敼鍙傛暟锛屼慨鏀瑰畬鍚庤閲嶆柊鍚姩db2


tar -czvf鍘
tar -zxvf 瑙
[plain] view plain copy 鍦–ODE涓婃煡鐪嬩唬鐮佺墖娲剧敓鍒版垜鐨勪唬鐮佺墖
$ db2 update db cfg for <db> using database_memory 8000000
$ db2stop force
$ db2start

# Linux 涓 鍙栬繘绋嬪崰鐢 cpu 鏈楂樼殑鍓10涓繘绋
ps aux|head -1;ps aux|grep -v PID|sort -rn -k +3|head


# linux 涓 鍙栬繘绋嬪崰鐢ㄥ唴瀛(MEM)鏈楂樼殑鍓10涓繘绋

ps aux|head -1;ps aux|grep -v PID|sort -rn -k +4|head
浣跨敤鍛戒护鐪嬬湅浣犵殑鏁版嵁搴撶敤浜嗗灏戝唴瀛橈細
$db2 get dbm cfg |grep -i memory

# db2mtrk -i -d -v
Tracking Memory on: 2014/06/22 at 21:50:19

Memory for instance

 Other Memory is of size 63111168 bytes
 FCMBP Heap is of size 851968 bytes
 Database Monitor Heap is of size 983040 bytes
 Total: 64946176 bytes

Memory for database: PA913

 Backup/Restore/Util Heap is of size 65536 bytes
 Package Cache is of size 262144 bytes
 Other Memory is of size 196608 bytes
 Catalog Cache Heap is of size 262144 bytes
 Buffer Pool Heap (1) is of size 24465047552 bytes
 Buffer Pool Heap (System 32k buffer pool) is of size 1835008 bytes
 Buffer Pool Heap (System 16k buffer pool) is of size 1572864 bytes
 Buffer Pool Heap (System 8k buffer pool) is of size 1441792 bytes
 Buffer Pool Heap (System 4k buffer pool) is of size 1376256 bytes
 Shared Sort Heap is of size 0 bytes
 Lock Manager Heap is of size 3881172992 bytes
 Database Heap is of size 94830592 bytes
 Application Heap (47) is of size 131072 bytes
 Application Heap (45) is of size 65536 bytes
 Application Heap (44) is of size 65536 bytes
 Application Heap (43) is of size 65536 bytes
 Application Heap (42) is of size 65536 bytes
 Application Heap (41) is of size 65536 bytes
 Application Heap (40) is of size 65536 bytes
 Application Heap (39) is of size 65536 bytes
 Application Heap (38) is of size 65536 bytes
 Application Heap (37) is of size 65536 bytes
 Application Heap (36) is of size 65536 bytes
 Application Heap (35) is of size 65536 bytes
 Application Heap (34) is of size 65536 bytes
 Application Heap (33) is of size 65536 bytes
 Application Heap (32) is of size 65536 bytes
 Application Heap (31) is of size 65536 bytes
 Application Heap (30) is of size 65536 bytes
 Application Heap (29) is of size 65536 bytes
 Application Heap (28) is of size 65536 bytes
 Application Heap (27) is of size 65536 bytes
 Application Heap (26) is of size 65536 bytes
 Application Heap (25) is of size 65536 bytes
 Application Heap (24) is of size 65536 bytes
 Application Heap (23) is of size 65536 bytes
 Application Heap (22) is of size 65536 bytes
 Application Heap (21) is of size 65536 bytes
 Application Heap (20) is of size 65536 bytes
 Application Heap (19) is of size 65536 bytes
 Application Heap (18) is of size 65536 bytes
 Application Heap (17) is of size 65536 bytes
 Application Heap (16) is of size 65536 bytes
 Application Heap (15) is of size 65536 bytes
 Application Heap (14) is of size 65536 bytes
 Application Heap (13) is of size 65536 bytes
 Application Heap (12) is of size 65536 bytes
 Application Heap (11) is of size 196608 bytes
 Application Heap (10) is of size 65536 bytes
 Application Heap (9) is of size 65536 bytes
 Application Heap (8) is of size 65536 bytes
 Application Heap (7) is of size 131072 bytes
 Applications Shared Heap is of size 393216 bytes
 Total: 28451340288 bytes

鍏朵腑閲嶇偣鏄淢emory for database: PA913鈥濅笅鐨勨淏uffer Pool Heap (1) is of size 24465047552 bytes鈥濓紝鐢ㄤ簡杩25G鐨勫唴瀛橈紝鐢变簬鎴戠‘瀹氭垜鐨勬暟鎹簱涓殑鏁版嵁閲忎笉鏄緢澶э紝鎵浠ュ噺灏戞暟鎹簱鍐呭瓨灏辨槸鎴戠殑棣栭変簡銆

鏌ヤ簡涓涓嬭祫鏂欙紝鍙互閫氳繃淇敼database_memory绯荤粺鍙傛暟鏉ヨ缃暟鎹簱鍐呭瓨鐨勪娇鐢ㄣ傞粯璁ゆ儏鍐典笅database_memory鐨勮缃槸AUTOMATIC锛岃繖閲屽彲浠ラ氳繃涓嬮潰鐨勫懡浠ゆ潵淇敼鍙傛暟锛屼慨鏀瑰畬鍚庤閲嶆柊鍚姩db2

$ db2 update db cfg for <db> using database_memory 8000000
$ db2stop force
$ db2start

鏁版嵁搴撻噸鍚悗锛屽厛鐢ㄥ鎴风杩炴帴涓涓嬫暟鎹簱锛岀劧鍚庡啀浣跨敤鈥渄b2mtrk -i -d -v鈥濇煡鐪嬪唴瀛樹娇鐢ㄦ儏鍐碉紝灏卞彂鐜板唴瀛樺氨浼氭湁鏄庢樉鐨勪笅闄嶃傜敤top鏌ョ湅缁撴灉涔熺被浼笺

鍦ㄧ湡瀹炵殑DB2浣跨敤鎯呭喌涓嬶紝淇敼杩欎釜鍊兼槸闇瑕佹厧閲嶇殑锛屽彲浠ュ弬鑰冧笅闈㈠垪鍑虹殑鍙傝冭祫鏂欍


select basi.ID,basi.RULE_ID,basi.ALERT_DATE,basi.CUSTOM_ID,basi.OPER_TIME,rule.DISPLAY_NAME,1 as operStatus
from ALERT_BASICINFO basi join XT_RULE_MAIN rule on basi.RULE_ID = rule.id and send_type='1'
where basi.alert_date >='2016-10-27' and basi.alert_date <='2016-10-27'
and   exists ( select * from ALERT_GL_BASIC_DETAIL detail left join ALERT_FLOW_INFO flow on detail.DETAIL_ID = flow.DETAIL_ID
where detail.BASICINFO_ID = basi.id and flow.PERUSE_STATE = 0 );

select * from ALERT_FLOW_INFO flow where exists(select * from ALERT_GL_BASIC_DETAIL detail join ALERT_BASICINFO basi on detail.BASICINFO_ID = basi.id
where detail.DETAIL_ID = flow.DETAIL_ID and basi.id='20071102009800124306320161026165435');
1.1   妫鏌ョ鐞嗙浉鍏虫湇鍔

RHCS鐨勫寘鎷4涓湇鍔★紝鎸夌収鍚姩椤哄簭渚濇鏄細ccsd銆乧man銆乫enced銆乺gmanager銆傚彲浠ヤ娇鐢╯ervice鍛戒护鍚仠杩欎簺鏈嶅姟鎴栨煡鐪嬬姸鎬併傦紙service service_name start/stop/status锛
闆嗙兢涓湁涓や釜鏈嶅姟锛屾暟鎹簱鍜孎TP銆傛暟鎹簱鏈嶅姟鍖呮嫭VIP銆 鏂囦欢绯荤粺銆 db2run鑴氭湰涓変釜璧勬簮銆傝繖浜涘彲浠ユ煡鐪嬮泦缇ら厤缃枃浠 /etc/cluster/cluster.conf銆
鍦ㄥ浘褰㈢晫闈笅锛屼娇鐢 system-config-cluster 鍚姩闆嗙兢绠＄悊宸ュ叿 銆傚湪鍛戒护琛屼笅锛屼娇鐢╟lustat鍛戒护鍙互鏌ョ湅闆嗙兢鐘舵侊紱浣跨敤clusvcadm鍛戒护鍙互鍚姩銆佸垏鎹㈡湇鍔°

list command options
db2 update command options using c off

鍚戣〃涓鍔犱竴涓 VARCHAR 鍒楋細
ALTER TABLE distributors ADD COLUMN address VARCHAR(30);

鐢╬s鍛戒护鏌ョ湅鏄惁鏈塪b2sysc鍚庡彴杩涚▼

 锛僷s -ef | db2sysc

?  妫鏌ユ暟鎹簱鏈嶅姟鍣ㄦ槸鍚﹀彲浠ラ氳繃缃戠粶璁块棶
鐩稿叧鍛戒护锛歱ing 10.7.63.202
                  telnet 10.7.63.202 60000
                  db2 connect to ddn user db2inst 锛堜娇鐢╠b2inst鐢ㄦ埛锛



?  骞冲彴鏈嶅姟鍣ㄩ噸鍚悗闇瑕佸惎鍔ㄧ殑鏈嶅姟姹囨诲涓嬶細
web1銆2鏈嶅姟鍣:

service tomcat start  鍚姩tomcat鏈嶅姟

service turbomq start  鍚姩turbomq鏈嶅姟

/usr/local/GETGPSMaile/run.sh  鍚姩鑾峰彇閲岀▼鏁版湇鍔

鍙敤ps -ef  | grep java杩涜鏌ョ湅鏄惁褰诲簳鍏抽棴

lvs鏈嶅姟鍣ㄦ棤闇鍗曠嫭鍚湇鍔★紝闅忓紑鏈哄嵆鍙惎鍔ㄧ浉鍏虫湇鍔

?  鎵嬪姩鎸傝浇鐩稿叧璧勬簮鎿嶄綔
濡傛灉RHCS闆嗙兢鍑虹幇寮傚父锛屾棤娉曞惎鍔ㄦ垨鍒囨崲鏁版嵁搴撴湇鍔★紝鍙互閫氳繃鎵嬪伐鏂瑰紡鎸傝浇鐩稿叧璧勬簮銆備絾姝ゆ椂杩欎簺璧勬簮宸茬粡鑴辩闆嗙兢杞欢鐨勭鐞嗭紝闆嗙兢鐘舵佹仮澶嶆甯稿悗锛屽簲鍚屾牱閫氳繃鎵嬪伐鏂瑰紡鍗歌浇杩欎簺璧勬簮锛屽啀浣跨敤闆嗙兢绠＄悊宸ュ叿鍚姩鏈嶅姟銆

 littleNoPwdContract

(1) 鍗歌浇澶辫触鑺傜偣涓婄殑璧勬簮



鐧婚檰鍑虹幇鏁呴殰鐨勬湇鍔″櫒锛屾鏌ラ泦缇よ祫婧愮姸鎬併



妫鏌ユ暟鎹簱瀹炰緥鏄惁宸茬粡鍋滄锛坧s -ef | grep db2sysc锛夛紝濡傛湭鍋滄浠b2inst鐢ㄦ埛鎵цdb2stop鍛戒护锛

妫鏌ユ枃浠剁郴缁熸槸鍚﹀凡缁忓嵏杞斤紙df -h锛夛紝濡傛湭鍗歌浇浠oot鐢ㄦ埛鎵ц umount 鍛戒护锛

妫鏌IP鏄惁宸茬粡瑙ｉ櫎缁戝畾锛坕fconfig锛夛紝濡傛湭瑙ｇ粦浠oot鐢ㄦ埛鎵ц ifconfig eth0:1 down 鍛戒护銆



濡傛灉閮ㄥ垎璧勬簮鏃犳硶鍗歌浇锛岃冭檻鍦ㄩ傚綋鏃跺欓噸鍚晠闅滄湇鍔″櫒銆



(2) 鍦ㄥ彲鐢ㄨ妭鐐逛笂鎸傝浇璧勬簮



鐧婚檰鐘舵佹甯哥殑鏈嶅姟鍣紝浠oot鐢ㄦ埛鎵ц濡備笅鍛戒护锛



缁戝畾VIP锛歩fconfig eth0:1 10.7.63.202 netmask 255.255.255.128 up

鎸傝浇鏂囦欢绯荤粺锛歮ount /dev/sdb1 /mnt/data

鍚姩鏁版嵁搴擄細su - db2inst

            db2start



(3) 妫鏌ユ暟鎹簱鐘舵



鍦╓EB鏈嶅姟鍣ㄤ笂浠b2inst鐢ㄦ埛鎵ц濡備笅鍛戒护锛



杩炴帴鏁版嵁搴擄細db2 connect to ddn user db2inst 鍛戒护

鏌ヨ琛ㄤ腑鐨勬暟鎹細db2 鈥渟elect * from mbl_device fetch first 1 rows only鈥


1.2   妫鏌B2瀹炰緥鏄惁宸茬粡鍚姩

鐢╬s鍛戒护鏌ョ湅鏄惁鏈塪b2sysc鍚庡彴杩涚▼

锛僷s -ef | db2sysc


..
涔熷彲浠ヤ互DB2瀹炰緥鎵鏈夎呯櫥褰曪紝閫氳繃鍙戝嚭db2start鍛戒护鏉ョ‘淇濆惎鍔ㄤ簡瀹炰緥锛堝鏋滃疄渚嬪凡缁忓惎鍔紝鍒欎細鍛婄煡SQL1026N  鏁版嵁搴撶鐞嗗櫒宸叉縺娲伙紱鍚﹀垯锛屽皢鎶婂疄渚嬪惎鍔ㄨ捣鏉ワ級



1.3   鏌ョ湅琛ㄧ┖闂寸姸鎬佹槸鍚︽甯

浠b2瀹炰緥鎵鏈夎呯櫥褰
#db2 conn to ddn
#db2 list tablespaces show detail        //鍦ㄥ崟鍒嗗尯涓婃煡鐪嬭〃绌洪棿鐨勭姸鎬,姝ｅ父杩斿洖0x0000
# db2_all list tablespaces show detail    //鍦ㄦ墍鏈夊垎鍖轰笂鏌ョ湅琛ㄧ┖闂寸殑鐘舵

鍙互浣跨敤LIST TABLESPACES 鍛戒护纭畾杩炴帴鏁版嵁搴撲腑琛ㄧ┖闂寸殑褰撳墠鐘舵侊紝鍙互浣跨敤SHOW DETAIL閫夐」鏌ョ湅琛ㄧ┖闂寸殑璇︾粏淇℃伅銆傛瘮濡傦紝鎴戜滑杩炰笂SAMPLE鏁版嵁搴擄紝鎵цlist tablespaces show detail 锛屽彲浠ョ湅鍒扮姸鎬佽繑鍥炲兼槸0x0000锛屾鏃讹紝浣跨敤db2tbst鍙互鏌ョ湅鐘舵佺紪鍙峰浜庣殑鐘舵佸惈涔夛紝鍏蜂綋璇硶濡備笅锛

db2tbst   鍙互鏌ョ湅缂栧彿鎵浠ｈ〃鐨勭姸鎬

db2tbst 鍛戒护鎺ユ敹鍗佸叚杩涘埗鐨勭姸鎬佸硷紝骞惰繑鍥炵浉搴旂殑琛ㄧ┖闂寸姸鎬併備緥濡傦紝鍛戒护 db2tbst 0x0008 杩斿洖 State = Load Pending 銆傝岃鍗佸叚杩涘埗鐨勭姸鎬佸煎弽杩囨潵鍙堟槸 LIST TABLESPACES 鍛戒护杈撳嚭鐨勭粍鎴愰儴鍒嗐傝〃绌洪棿鐨勫閮ㄥ彲瑙佺姸鎬佹槸鐢卞崟涓姸鎬佸肩殑鍗佸叚杩涘埗鎬诲拰鏋勬垚鐨勩備緥濡傦紝濡傛灉琛ㄧ┖闂寸殑鐘舵佹槸 Backup Pending鍜 Load in Progress锛岄偅涔堟墍杩斿洖鐨勫崄鍏繘鍒跺煎氨鏄 0x20020锛0x00020 + 0x20000锛

1.4   涓庤〃鏈夊叧鎿嶄綔

?  鏄剧ず涓嶮BL_ME鍖归厤鐨勬墍鏈夎〃锛
#db2 list tables | grep MBL_ME
?  鏌ョ湅MBL_MESSAGE琛ㄧ粨鏋勶細
#db2 discribe table MBL_MESSAGE
?  鏄剧ず琛ㄤ腑鎵鏈夋暟鎹細
#db2 "select * from MBL_MESSAGE"
?  鏄剧ずMBL_MESSAGELOG琛ㄤ腑鍓峮琛屾暟鎹唴瀹癸細
#db2 "select * from MBL_MESSAGELOG fetch first n rows only"
?  瀵煎嚭琛ㄥ拰鍒犻櫎琛ㄦ搷浣滐細
渚嬪锛氬皢mbl_messagelog_1127琛ㄤ腑鐨勬暟鎹鍑轰负.del鏍煎紡鐨勬枃浠
      db2 export to mbl_messagelog_1127.del of del select * from mbl_messagelog_1127"
      鍒犻櫎mbl_messagelog_1127琛ㄥ強鍖呭惈鐨勬暟鎹
      db2 drop table mbl_messagelog_1127
1.5   鏌ョ湅纾佺洏绌洪棿

#df -h

1.6   妫鏌ラ厤缃枃浠朵俊鎭

su 鈥 db2inst
db2 connect to ddn

鏄剧ずDB2閰嶇疆鏂囦欢涓笌鏁版嵁搴揹dn鏈夊叧鎵鏈変俊鎭細

銆恉b2inst@db1 ~銆慸b2 get db cfg for ddn show detail|more

鏌ョ湅DB2閰嶇疆鏂囦欢锛岃繃婊ゅ嚭log鐨勯厤缃俊鎭細

銆恉b2inst@db1 ~銆慸b2 get db cfg for ddn show detail | grep -i log

1.7   鏁版嵁搴撳浠戒笌鎭㈠鎿嶄綔

1.澶囦唤鏂瑰紡

闆嗗洟涓氬姟鎺ュ叆骞冲彴涓氬姟绯荤粺宸茬粡涓婄嚎杩愯涓ゅ勾澶氾紝鏁版嵁閲12GB宸﹀彸锛屾暟鎹簱瀹瑰櫒鎬诲ぇ灏15GB锛屾暟鎹簱浣跨敤妗ｆ鏃ュ織璁板綍锛屽彲浠ヨ繘琛屽湪绾垮浠姐
鐩墠閲囩敤鍦ㄧ嚎鍏ㄩ噺澶囦唤鐨勬柟寮忔潵澶囦唤鏁翠釜鏁版嵁搴擄紝鍦ㄥ彂鐢熺伨闅炬ф晠闅滄椂锛屼娇鐢ㄥ浠芥枃浠跺拰鏃ュ織鏂囦欢鍙互杩涜鏃堕棿鐐规仮澶嶏紝灏嗘暟鎹簱鎭㈠鍒版晠闅滃彂鐢熺殑鍓嶄竴鍒汇

2.澶囦唤绛栫暐

鐩墠锛屾暟鎹簱姣忓ぉ鍑屾櫒涓ょ偣杩涜涓娆″叏閲忓浠斤紝澶囦唤鏂囦欢瀛樻斁鍦ㄦ湰鍦扮‖鐩橈紝淇濈暀鏈杩戜袱澶╃殑澶囦唤銆傚浠藉畬鎴愬悗锛屽皢澶囦唤鏂囦欢浼犻佸埌纾佸甫鏈猴紝淇濈暀鏈杩50澶╃殑澶囦唤銆傝繖鏍锋棦淇濊瘉鏁版嵁搴撳浠芥枃浠跺紓鍦板瓨鏀撅紝鍙堝疄鐜颁簡鍏呭垎鍐椾綑銆

3.澶囦唤鐨勫疄鐜

鏁版嵁搴撶殑瀹氭湡鑷姩澶囦唤鏄氳繃鎿嶄綔绯荤粺cron绋嬪簭瀹氭湡鎵ц澶囦唤鑴氭湰db2mbk-master鏉ュ疄鐜扮殑銆傝鑴氭湰鍖呮嫭濡備笅鍔熻兘锛

(1) 鍦ㄧ嚎鍏ㄥddn鏁版嵁搴撱
(2) 灏嗗浠芥枃浠秚ar鍒扮甯︿腑銆
(3) 鍒犻櫎涓ゅぉ浠ヤ笂鐨勬棫澶囦唤鏂囦欢銆
(4) 灏嗘瘡椤规搷浣滅殑鏃堕棿銆佺粨鏋滆褰曞埌澶囦唤鏃ュ織涓
(5) 鑷姩娓呯悊澶囦唤鏃ュ織銆

4.澶囦唤鐨勬鏌

妫鏌ユ暟鎹簱鐨勫浠芥儏鍐甸渶瑕佸湪鏈嶅姟鍣╠b1.db2.com涓婅繘琛岋紝鍖呮嫭浠ヤ笅鍐呭锛

(1) 妫鏌ュ浠芥枃浠舵槸鍚︾敓鎴

澶囦唤鏂囦欢瀛樻斁鍦 /home/db2inst/db2backup/backup 鐩綍涓嬶紝鏂囦欢鍚嶇О绫讳技DDN.0.db2inst.NODE0000.CATN0000.20091109164735.001锛屾甯告儏鍐典笅璇ョ洰褰曚笅搴旇鏈夋渶杩戜袱澶╃敓鎴愮殑涓や釜澶囦唤鏂囦欢銆

(2) 妫鏌ュ浠借繃绋嬫槸鍚︽甯

澶囦唤鏃ュ織瀛樻斁鍦 /home/db2inst/db2exec/log 鐩綍涓嬶紝鏃ュ織鏂囦欢鍚嶄负backup.log銆傛瘡澶╁浠借剼鏈墽琛岃繃绋嬩腑浼氬湪澶囦唤鏃ュ織涓褰曞浠芥暟鎹簱銆乼ar澶囦唤鏂囦欢鍒扮甯︺佸垹闄ゆ棫澶囦唤鏂囦欢绛夋搷浣滅殑璧锋鏃堕棿涓庣粨鏋滐紝鍙互閫氳繃杩欎簺璁板綍纭畾澶囦唤鏄惁姝ｅ父杩涜銆

(3) 妫鏌ユ湰鍦扮鐩樼┖闂

澶囦唤鐩綍浣嶄簬鏈湴纾佺洏鐨勬牴鍒嗗尯锛屽亣璁惧浠芥枃浠剁殑澶у皬涓簄 GB锛岄偅涔堣鍒嗗尯鐨勫墿浣欑┖闂存渶濂藉ぇ浜2n GB锛屾渶灏戜篃瑕佸ぇ浜巒+2 GB銆

(4) 妫鏌ュ浠芥枃浠舵槸鍚ar鍒扮甯
閫氳繃 tar -tvf /dev/st0 鍛戒护鏌ョ湅纾佸甫鐨勫唴瀹癸紝纭鏄剧ず缁撴灉涓湁鏈鏂扮殑澶囦唤鏂囦欢銆傚綋纾佸甫涓殑澶囦唤鏂囦欢杈冨鏃讹紝杩欎釜鎿嶄綔鍙兘鑺辫垂寰堥暱鏃堕棿銆
妫鏌ュ浠介厤缃枃浠舵儏鍐碉細
銆恉b2inst@db1 ~銆$ crontab -l
澶囦唤鏂囦欢瀛樻斁鐩綍锛
銆恉b2inst@db1 ~銆$ cd db2exec/bin
妫鏌ュ鐢ㄦ暟鎹簱鏈嶅姟鍣ㄦ暟鎹簱杩愯鏄惁姝ｅ父锛
 澶囩敤鏈嶅姟鍣細db2 connnect to db2
             Db2 list tables
             Db2 鈥渟elect count(*) from mb1_device鈥
鐢ㄩ泦缇ょ鐞嗗伐鍏峰皢鏁版嵁搴撴湇鍔″垏鎹㈠埌澶囩敤DB鏈嶅姟鍣細
Clusvcadm 鈥搑 <鏈嶅姟鍚>  -m <鎴愬憳鍚>
杩涜鏁版嵁搴撶殑RESTORE鎭㈠锛堝鏋滃嚭鐜癝QL0322N閿欒锛屽垯淇敼DB2CODEPAGE鍙傛暟锛岀劧鍚庨噸鏂版墽琛宺estore鍛戒护锛夛細
涓绘湇鍔″櫒db1:  db2 restore db ddn from /home/db2inst/ddnback taken at <澶囦唤鏂囦欢鏃堕棿鎴> to /mnt/data     渚嬪锛歞b2set db2codepage=819
杩涜鏁版嵁搴撶殑ROLLFORWARD鎭㈠锛
涓绘湇鍔″櫒db1:    db2  rollforward db ddn to end of logs and stop
娴嬭瘯鏁版嵁搴撶姸鎬侊細
涓绘湇鍔″櫒锛 db2 connect to db2
           鐒跺悗 db2 list tables
           鐒跺悗 db2鈥漵elect count(*) from mb1_device鈥
           鐒跺悗 db2set db2codepage=1386
1.8   妫鏌ュ綊妗ｆ棩蹇楃浉鍏虫搷浣

璇风‘淇濇椿鍔ㄦ棩蹇楃洰褰曚笅娌℃湁鐨勬棩蹇楁枃浠堕兘宸茬粡姝ｇ‘褰掓。鍒颁簡甯︽満涓(鏌ョ湅TSM鎴栫涓夋柟瀛樺偍绠＄悊杞欢)銆



褰掓。鏃ュ織閰嶇疆鏂囦欢鍙傛暟鍙婅鏄庯細

銆恉b2inst@db1 SQLOGDIR銆

su 鈥 db2inst

db2 connect to ddn

db2 get db cfg for ddn show detail | grep 鈥搃 log

LOGRETAIN             RECOVERY

USEREXIT               ON

LOGARCHMETH1    RECOVERY

濡傛灉userexit涓篛N锛屼絾鏄疞OGARCHMETH1鐩稿悓锛屾煡鐪嬬洰褰曞拰閾炬帴 /home/db2inst/db2exec/bindb2mbk-master



濡傛灉LOGARCHMETH1涓篋ISK:/archlog锛屽垯DB2浼氳嚜鍔ㄥ皢褰掓。鏃ュ織褰掓。鍒扮洰褰/archlog涓

db2 鈥渦pdate db cfg for ddn using logarchmeth1 DISK:/archlog鈥



濡傛灉闇瑕佹洿鏀瑰弬鏁帮紝鎵ц鏇存柊鍛戒护锛

db2 update db cfg for ddn using 鍙傛暟鍚     鍙傛暟鍊

濡傛灉鏇存敼鍙傛暟鐢熸晥锛岄渶瑕侀噸鏂板惎鍔―B2杩炴帴

db2 force application all

db2 list applications



濡傛灉搴旂敤鏃犳硶鍋滄锛岄噸鏂板惎鍔―B2

db2 force application all

db2stop

db2start

1.9   鎵╁琛ㄧ┖闂

DB2鐜版湁琛ㄧ┖闂存墿瀹规柟娉
db2 list tablespaces show detail

1锛夌洿鎺ユ坊鍔犱竴涓鍣ㄧ殑渚嬪瓙锛
db2 " ALTER TABLESPACE PAYROLL ADD (DEVICE '/dev/rhdisk9' 10000) "
鍔犲鍣ㄤ箣鍚嶥B2浼氭湁涓涓嚜鍔╞alance鐨勮繃绋,鍙兘浼氭寔缁嚑涓皬鏃!!!
2锛夋敼鍙樼幇鏈夊鍣ㄧ殑澶у皬(璇ユ柟娉曚笉浼氳Е鍙慴alance,浣嗗鏋滆〃绌洪棿寤虹珛鍦ㄨ８璁惧涓,鍒欒鎵╁啿瑁歌澶囩┖闂):
db2 " ALTER TABLESPACE TS1 RESIZE (FILE '/conts/cont0' 2000, DEVICE '/dev/rcont1' 2000, FILE 'cont2' 2000) "
娉ㄦ剰杩欑鏂瑰紡灏辨槸灏嗗師鏈夌殑鐩稿簲瀹瑰櫒閮芥敼鎴愬ぇ灏忔槸2000椤
db2 "ALTER TABLESPACE TS1 RESIZE (ALL 2000)"
杩欑鏂瑰紡灏辨槸鎶婅〃绌洪棿涓墍鏈夌殑瀹瑰櫒澶у皬閮芥敼鎴2000椤
db2 " ALTER TABLESPACE TS1 EXTEND (FILE '/conts/cont0' 1000, DEVICE '/dev/rcont1' 1000, FILE 'cont2' 1000) "
杩欑鏂瑰紡灏辨槸灏嗙浉搴旂殑瀹瑰櫒閮芥墿澶1000椤碉紝涔熷氨鏄鍔1000椤点
db2 " ALTER TABLESPACE DATA_TS EXTEND (ALL 1000)"
杩欑鏂瑰紡灏辨槸灏嗘墍鏈夌殑瀹瑰櫒閮藉鍔1000椤点
db2 " ALTER TABLESPACE USERSPACE1 EXTEND (ALL 100)"
DB2鏃ュ父缁存姢鏈堟搷浣
1銆        鏃ュ織娓呯悊鐩稿叧鎿嶄綔

妫鏌ョ涓娲诲姩鏃ュ織锛
[db2inst@db1 SQLOGDIR]$db2 get db cfg | grep 鈥淔irst active鈥
    娓呯悊鏃ュ織鏂囦欢鏃跺彧鑳芥竻鐞嗙涓娲诲姩鏃ュ織涔嬪墠鐨勬棩蹇楋紱
璇疯嚦灏戞瘡鏈堟煡鐪嬩竴娆b2diag.log鏂囦欢锛岀湅鍏朵腑鏄惁鏈夊紓甯搞

鐩稿叧鏃ュ織娓呯悊鎿嶄綔

鏃犺閲囩敤鍝鎺柦锛岄兘瑕佸厛纭畾鐩墠鐨勬椿鍔ㄦ棩蹇椼備娇鐢╠b2inst鐢ㄦ埛鎵ц浠ヤ笅鎿嶄綔锛

(1) 杩炴帴鏁版嵁搴擄細db2 connect to ddn
(2) 鏌ョ湅鏃ュ織鏂囦欢鐩綍锛歞b2 get db cfg | grep "Path"
(3) 鏌ョ湅绗竴娲诲姩鏃ュ織锛歞b2 get db cfg | grep "First active"

娉ㄦ剰锛氱涓娲诲姩鏃ュ織鍙婂叾浠ュ悗鐨勬棩蹇楋紙搴忓彿鏇撮珮鐨勶級涓烘暟鎹簱鐨勬椿鍔ㄦ棩蹇楋紝涓嶈兘杩涜绉诲姩銆佸帇缂┿佸垹闄ょ瓑鎿嶄綔锛屽惁鍒欏皢閫犳垚鏁版嵁搴撴晠闅溿

    鐒跺悗锛岃鏍规嵁鏁版嵁搴撴棩蹇楁枃浠朵繚鐣欐椂闂寸殑鐩稿叧瑙勫畾纭畾瑕佽繘琛屽鐞嗙殑鏃ュ織鏂囦欢鑼冨洿銆傚缓璁嚦灏戜繚鐣60澶╀互鍐呯殑鏃ュ織鏂囦欢锛屽苟涓斾笉瑕佽繘琛屽帇缂╂搷浣滐紝浠ュ厤鎹熷潖鏃ュ織鏂囦欢銆


    涓嬮潰浠嬬粛瀵规棩蹇楁枃浠惰繘琛屽帇缂╁拰鍒犻櫎鐨勬柟娉曘傛墽琛屾搷浣滃墠璇峰厛鐢ㄥ涓嬪懡浠ょ‘璁ゆ搷浣滅殑鏃ュ織鏂囦欢锛

    find -name '*.LOG' ! -newer | more

    鍏朵腑锛-newer 鎸囧畾find鍛戒护鏌ユ壘鏈鍚庝慨鏀规椂闂存瘮鏌愪釜鏃ュ織鏂囦欢鏂扮殑鎵鏈夋棩蹇楁枃浠讹紝鑰屽湪鍓嶉潰鍔犱笂 ! 鍙栧弽锛屽垯杩斿洖姣旇鏃ュ織鏂囦欢鏃х殑鎵鏈夋棩蹇楁枃浠跺強鍏舵湰韬
    鍙互浣跨敤濡備笅鍛戒护纭畾绗﹀悎鏉′欢鐨勬棩蹇楁枃浠剁殑鏁伴噺锛

    find -name '*.LOG' ! -newer | wc -l


    濡傛灉鑰冭檻鍘嬬缉闄堟棫鐨勬棩蹇楁枃浠讹紝鍙弬鑰冨涓嬫柟娉曪細

  a.鐩存帴鍘嬬缉鏃ュ織鏂囦欢

    鍦ㄦ棩蹇楁枃浠剁洰褰曚笅鎵ц鍛戒护锛歠ind -name '*.LOG' ! -newer -exec gzip {} \;

  b.灏嗘棩蹇楁枃浠舵墦鍖呭悗鍘嬬缉锛氱洰鍓嶅瓨鍦/mnt/data/db2logbak/

    鍦ㄦ棩蹇楁枃浠剁洰褰曚笅鎵ц鍛戒护锛歠ind -name '*.LOG' ! -newer | xargs tar -zcvf log_bak_20100402_1.tar.gz
    鐒跺悗锛屽啀灏嗚繖浜涙棩蹇楁枃浠跺垹闄わ紝鏂规硶绋嶅悗璇存槑銆


    濡傛灉鑰冭檻鍒犻櫎闄堟棫鐨勬棩蹇楁枃浠讹紝鍙弬鑰冨涓嬫柟娉曪細

  a.浣跨敤鎿嶄綔绯荤粺鍛戒护鐩存帴鍒犻櫎

    鍦ㄦ棩蹇楁枃浠剁洰褰曚笅鎵ц鍛戒护锛歠ind -name '*.LOG' ! -newer -exec rm {} \;

  b.浣跨敤鏁版嵁搴撳懡浠よ繘琛屾竻闄

    鎵ц鍛戒护锛歞b2 prune logfile prior to S0003270.LOG
    璇ュ懡浠や細娓呴櫎S0003270.LOG涔嬪墠鎵鏈夌殑鍦ㄧ嚎妗ｆ鏃ュ織鏂囦欢锛堜笉鍖呮嫭S0003270.LOG鏈韩锛夈


2銆        妫鏌ュ浠藉拰鏃ュ織鏄惁閮戒繚瀛樺ソ浜

閫氳繃 tar -tvf /dev/st0 鍛戒护鏌ョ湅纾佸甫鐨勫唴瀹癸紝纭鏄剧ず缁撴灉涓湁鏈鏂扮殑澶囦唤鏂囦欢銆傚綋纾佸甫涓殑澶囦唤鏂囦欢杈冨鏃讹紝杩欎釜鎿嶄綔鍙兘鑺辫垂寰堥暱鏃堕棿銆

DB2鏃ュ父缁存姢瀛ｅ害鎿嶄綔
1銆        閫氳繃蹇収鐩戞帶鍣紝鏌ョ湅绯荤粺鎬ц兘濡備綍

閫氳繃蹇収鐩戞帶鍣紝鎶撳彇鏁版嵁搴撶殑淇℃伅锛屽垎鏋愭暟鎹簱鎬ц兘鏄惁鍚堢悊锛

# db2 get snapshot for all on 鏁版嵁搴撳悕 > log.txt

2銆        鏁版嵁搴撹ˉ涓佺骇鍒

# db2level

娉ㄦ剰浜嬮」
1銆        涓嶈鍒犻櫎娲诲姩鏃ュ織鏂囦欢0

DB2 鐨勬椿鍔ㄦ棩蹇楁枃浠朵笉鑳借鍒犻櫎銆備竴鏃 DB2 鐨勬椿鍔ㄦ棩蹇楁枃浠惰鍒犻櫎锛屾垨鑰呮墍鍦ㄧ殑瀛樺偍璁惧鍑虹幇闂锛屽垯涓嶅彲閬垮厤鍦伴犳垚 DB2 鏁版嵁搴撶郴缁熷畷鏈恒

2銆        娉ㄦ剰浜ゆ槗鏃ュ織瀛樺偍绌洪棿

鍦ㄥ綊妗ｆ棩蹇楁ā寮忎笅锛屽鏋滄病鏈変娇鐢ㄨ嚜鍔ㄥ綊妗ｆ柟寮忥紝鍒欏瓨鍌ㄧ殑鏃ュ織鏂囦欢浼氫笉鏂澶氾紝鏈夊彲鑳介犳垚鏃ュ織鎵鍦ㄧ殑鏂囦欢绯荤粺绌洪棿婊° 褰撹繖绉嶆儏鍐靛彂鐢熸椂锛屼細鏍规嵁鍙傛暟 BLK_LOG_DSK_FUL 鐨勯厤缃屾湁涓嶅悓鐨勭幇璞★細

1锛夊鏋滆鍙傛暟鍚敤锛屽垯 DB2 鏁版嵁搴撳彲缁х画璇绘搷浣滐紝浣嗘槸鍐欐搷浣滀細鎸傝捣

2锛夊鏋滆鍙傛暟娌℃湁鍚敤锛屽垯 DB2 鏁版嵁搴撲細鍋滄宸ヤ綔



涓ょ鎯呭喌涓嬶紝閮介渶瑕佸埌鏃ュ織鎵鍦ㄧ殑鏂囦欢绯荤粺娣诲姞浜嗙┖闂存墠鎭㈠姝ｅ父銆



3銆        鎸夌収绯荤粺鐨勫疄闄呭伐浣滈噺閰嶇疆鏃ュ織绌洪棿

DB2鏁版嵁搴撻氳繃鏃ュ織鏂囦欢缁存姢鏁版嵁鐨勫畬鏁存у拰涓鑷存с侱B2 鏁版嵁搴撶殑鏃ュ織绌洪棿鍙氳繃濡備笅鍏紡璁＄畻锛
鏃ュ織绌洪棿 = 锛堜富鏃ュ織鏂囦欢 + 浜岀骇鏃ュ織鏂囦欢锛 * 鏃ュ織鏂囦欢灏哄

鍏朵腑锛
1锛 涓绘棩蹇楁枃浠剁敱鍙傛暟 LOGPRIMARY 鎺у埗锛
2锛 浜岀骇鏃ュ織鏂囦欢鐢卞弬鏁 LOGSECOND 鎺у埗
3锛 鏃ュ織鏂囦欢灏哄鐢卞弬鏁 LOGFILSIZ 鎺у埗
4锛 LOGPRIMARY + LOGSECOND < 256 锛堜笉鍚岀殑 DB2 鐗堟湰鐣ユ湁涓嶅悓锛岃鍙傜湅鐩稿悓鐗堟湰鐨 DB2 鎵嬪唽纭锛
4銆        妫鏌ヨ鍙瘉锛圠icense锛夊畨瑁呮儏鍐

璁稿彲璇佽繃鏈熶細閫犳垚涓嶅繀瑕佺殑鏈嶅姟涓柇锛屾墍浠ュ湪 DB2 瀹夎瀹屾瘯鍚庯紝寤鸿妫瀵熻鍙殑瀹夎鎯呭喌
5銆        鍒涘缓鏁版嵁搴撳墠璋冩暣濂界郴缁熸椂闂

鍦ㄦ暟鎹簱鍒涘缓濂戒箣鍚庯紝璋冩暣绯荤粺鏃堕棿浼氶犳垚鏁版嵁搴撳唴閮ㄦ椂闂存埑鐨勫紓甯搞傛暟鎹簱涓竴浜涘璞″拰鏃堕棿鐩稿叧锛屼竴鏃︽椂闂翠笉鍑嗙‘瑕佽皟鏁撮渶瑕佸緢灏忓績銆傞敊璇殑鏃堕棿璋冩暣鍙兘浼氶犳垚寰堝闂锛屽锛
1锛夋煇浜涘璞″け鏁堬紝渚嬪 锛
SQL0440N锛屾壘涓嶅埌鍏锋湁鍏煎鑷彉閲忕殑绫诲瀷涓 鈥<渚嬬▼绫诲瀷>鈥 鐨勫悕涓  鈥<渚嬬▼鍚>鈥 鐨勫凡鎺堟潈渚嬬▼
2锛夋暟鎹簱鏃ュ織閫昏緫閿欒 -> 瀹曟満
3锛夊父瑙侀敊璇 鈥 鍙皟鏁存椂闂达紝鏈皟鏁存椂鍖
6銆        涓嶈闅忎究鎵ц chown (chmod) 鈥揜 锛圲NIX/Linux锛

鍦ㄥ疄渚嬬洰褰曚笅chown (chmod) -R 浼氶犳垚

1锛  鍦ㄦ暟鎹簱鏈嶅姟鍣ㄤ笂 db2 connect to 鑳借繛鎺ヤ笂鏁版嵁搴

2锛  db2 connect to user ... using ...杩炴帴涓嶄笂

闄勶細甯哥敤琛ㄧ┖闂存墿瀹规柟娉
DB2鐜版湁琛ㄧ┖闂存墿瀹规柟娉
db2 list tablespaces show detail

1锛夌洿鎺ユ坊鍔犱竴涓鍣ㄧ殑渚嬪瓙锛
db2 " ALTER TABLESPACE PAYROLL ADD (DEVICE '/dev/rhdisk9' 10000) "
鍔犲鍣ㄤ箣鍚嶥B2浼氭湁涓涓嚜鍔╞alance鐨勮繃绋,鍙兘浼氭寔缁嚑涓皬鏃!!!
2锛夋敼鍙樼幇鏈夊鍣ㄧ殑澶у皬(璇ユ柟娉曚笉浼氳Е鍙慴alance,浣嗗鏋滆〃绌洪棿寤虹珛鍦ㄨ８璁惧涓,鍒欒鎵╁啿瑁歌澶囩┖闂):
db2 " ALTER TABLESPACE TS1 RESIZE (FILE '/conts/cont0' 2000, DEVICE '/dev/rcont1' 2000, FILE 'cont2' 2000) "
娉ㄦ剰杩欑鏂瑰紡灏辨槸灏嗗師鏈夌殑鐩稿簲瀹瑰櫒閮芥敼鎴愬ぇ灏忔槸2000椤
db2 "ALTER TABLESPACE TS1 RESIZE (ALL 2000)"
杩欑鏂瑰紡灏辨槸鎶婅〃绌洪棿涓墍鏈夌殑瀹瑰櫒澶у皬閮芥敼鎴2000椤
db2 " ALTER TABLESPACE TS1 EXTEND (FILE '/conts/cont0' 1000, DEVICE '/dev/rcont1' 1000, FILE 'cont2' 1000) "
杩欑鏂瑰紡灏辨槸灏嗙浉搴旂殑瀹瑰櫒閮芥墿澶1000椤碉紝涔熷氨鏄鍔1000椤点
db2 " ALTER TABLESPACE DATA_TS EXTEND (ALL 1000)"
杩欑鏂瑰紡灏辨槸灏嗘墍鏈夌殑瀹瑰櫒閮藉鍔1000椤点
db2 " ALTER TABLESPACE USERSPACE1 EXTEND (ALL 100)"
闄勶細褰掓。鏃ュ織鐩稿叧鐭ヨ瘑
db2鏃ュ織淇濆瓨鐨勪袱绉嶆柟寮忥細寰幆鏃ュ織鍜屽綊妗ｆ棩蹇
寰幆鏃ュ織锛
鍦ㄤ换浣曟儏鍐典笅閮戒笉鑳藉垹闄ゅ惊鐜棩蹇楋紝濡傛灉鍒犻櫎鏁版嵁搴撳氨浼氬嚭閿欍
濡傛灉鍑洪敊浜嗭紝鍙兘鐢ㄥ浠藉仛鎭㈠锛屽鏋滄病鏈夊仛澶囦唤锛岄偅涔堝彧鏈夋壘IBM瀹樻柟鏉ュ府鍋氫竴涓繛鎺
鐒跺悗浣爀xport鍑烘暟鎹紝鐒跺悗鍐嶉噸寤烘暟鎹簱銆傛嵁璇磋繖涓繕鏄鍦ㄤ綘涔颁簡PPA鐨勬儏鍐典笅鎵嶆彁渚
鐨勬湇鍔″唴瀹广
褰掓。鏃ュ織锛
褰掓。鏃ュ織涓殑娲诲姩鏃ュ織閮ㄤ唤鏄笉鑳藉垹闄ょ殑锛屽鏋滃垹闄ょ粨鏋滃悓寰幆鏃ュ織琚垹闄ょ殑鎯呭喌銆
褰掓。鏃ュ織涓殑宸插綊妗ｆ棩蹇楁槸鍙互鍒犻櫎鐨勶紝浣嗗垹闄や簡浠ュ悗浣犲彲鑳藉氨娌℃硶鍋氫竴浜涘墠婊氭搷浣滀簡銆傛暟鎹簱澶囦唤鐨勬仮澶嶆秹鍙婂浠芥枃浠跺拰鏃ュ織
褰掓。鏃ュ織鐩稿叧鐭ヨ瘑锛
灏哃OGRETAIN璁剧疆涓篛N鍚庯紝鏁版嵁搴撳皢鏀寔鍓嶆粴鎭㈠銆傛鏃讹紝绯荤粺涓皢浼氬瓨鍦ㄤ笁绉嶇被鍨嬬殑鏃ュ織鏂囦欢:
娲诲姩鏃ュ織:璇ユ棩蹇楀寘鍚皻鏈彁浜ゆ垨鍥炴粴鐨勪簨鍔″崟鍏冪殑鐩稿叧淇℃伅锛屼互鍙婂凡鎻愪氦浣嗗皻鏈啓鍏ユ暟鎹簱鏂囦欢鐨勪簨鍔＄殑淇℃伅銆
鑱旀満瀛樻。鏃ュ織:娲诲姩鏃ュ織涓墍鏈夋敼鍔ㄥ姝ｅ父澶勭悊宸蹭笉闇瑕侊紝鍗宠鏃ュ織涓墍璁板綍鐨勪簨鍔￠兘宸叉彁浜ゅ苟鍐欏叆鏁版嵁搴撴枃浠舵椂锛岃娲诲姩鏃ュ織杞崲涓鸿仈鏈哄瓨妗ｆ棩蹇椼傜О涔嬩负鑱旀満锛屾槸鐢变簬瀹冧滑涓庢椿鍔ㄦ棩蹇楀瓨鏀惧湪鍚屼竴涓洰褰曚笅銆
鑴辨満瀛樻。鏃ュ織:灏嗚仈鏈哄瓨妗ｆ棩蹇椾粠娲诲姩鏃ュ織鐩綍涓婥opy鍒板彟澶栫殑鍦版柟瀛樻。锛屽氨绉颁负鑴辨満瀛樻。鏃ュ織銆傝繖浜涙棩蹇楀彲鑳藉湪鏁版嵁搴撳墠婊氭仮澶嶇殑鏃跺欎粛鐒堕渶瑕併
绠＄悊鏁版嵁搴撴棩蹇楃殑宸ヤ綔鍙互鎵嬪伐瀹屾垚(鍗冲皢鑱旀満瀛樻。鏃ュ織鎵嬪伐鎷疯礉鍒版煇涓猘rchive鐩綍)锛屼篃鍙敱缂栧啓USEREXIT绋嬪簭鑷姩缁存姢銆
鐢变簬DB2瀵规墍鏈夊钩鍙伴兘鎻愪緵浜嗙浉搴旂殑USEREXIT绀轰緥绋嬪簭锛岃屼笖闈炲父鏄撲簬淇敼鍜屼娇鐢紝鎵浠BM寤鸿鐢ㄦ埛浣跨敤USEREXIT绋嬪簭鏉ョ鐞嗘棩蹇楁枃浠躲
浣跨敤USEREXIT绋嬪簭鐨勬柟娉
瑕佷娇鐢║ser exit program鑷姩鍖杔og鏂囦欢鐨刟rchiving鍜宺etrieval杩囩▼:
1.  璁剧疆database cfg鍙傛暟logarchmeth1 涓篣SEREXIT銆
connect to ddn
update db cfg using logarchmeth1 USEREXIT
闅忓悗鎿嶄綔鍙弬鑰>>1.8 妫鏌ュ綊妗ｆ棩蹇楃浉鍏虫搷浣


闄勶細浣跨敤 CLP 鎹曡幏鏁版嵁搴撹繍琛岀姸鍐靛揩鐓
鍙粠 CLP 浣跨敤 GET HEALTH SNAPSHOT 鍛戒护鏉ユ崟鑾疯繍琛岀姸鍐靛揩鐓с傝鍛戒护璇硶鏀寔妫绱㈣繍琛岀姸鍐电洃瑙嗗櫒鐩戣鐨勪笉鍚屽璞＄被鍨嬬殑杩愯鐘跺喌蹇収淇℃伅銆
鍏堝喅鏉′欢
蹇呴』鍏锋湁瀹炰緥杩炴帴鎵嶈兘鎹曡幏杩愯鐘跺喌蹇収銆傚鏋滄病鏈夊疄渚嬭繛鎺ワ紝鍒欏垱寤虹己鐪佸疄渚嬭繛鎺ャ傝鑾峰彇杩滅▼瀹炰緥鐨勫揩鐓э紝蹇呴』鍏堣繛鎺ヨ嚦璇ュ疄渚嬨
杩囩▼
瑕佷娇鐢 CLP 鎹曡幏鏁版嵁搴撹繍琛岀姸鍐靛揩鐓
浠 CLP 鍙戝嚭甯︽湁鏈熸湜鍙傛暟鐨 GET HEALTH SNAPSHOT 鍛戒护銆
鍦ㄤ互涓嬬ず渚嬩腑锛屽皢鍦ㄥ惎鍔ㄦ暟鎹簱绠＄悊鍣ㄤ箣鍚庣珛鍗虫崟鑾锋暟鎹簱绠＄悊鍣ㄧ骇鍒繍琛岀姸鍐靛揩鐓с
db2 get health snapshot for dbm

瀵逛簬鍒嗗尯鏁版嵁搴撶郴缁燂紝鍙负鐗瑰畾鍒嗗尯鎹曡幏涓撻棬鐨勬暟鎹簱蹇収锛屾垨鑰呬负鎵鏈夊垎鍖烘崟鑾峰叏灞鐨勬暟鎹簱蹇収銆傝瀵圭壒瀹氬垎鍖猴紙濡傚垎鍖哄彿 2锛変笂鐨勬暟鎹簱鎹曡幏杩愯鐘跺喌蹇収锛岃鍙戝嚭浠ヤ笅鍛戒护锛
db2 get health snapshot for db on sample at dbpartitionnum 2
瑕佸鎵鏈夊垎鍖轰笂鐨勬墍鏈夊簲鐢ㄧ▼搴忔崟鑾锋暟鎹簱蹇収锛岃鍙戝嚭浠ヤ笅鍛戒护锛
db2 get health snapshot for db on sample global
浠ヤ笅鍛戒护鎹曡幏鐨勮繍琛岀姸鍐靛揩鐓у甫鏈夐檮鍔犺缁嗕俊鎭紝鍖呮嫭鍏紡銆侀檮鍔犱俊鎭拰杩愯鐘跺喌鎸囩ず鍣ㄥ巻鍙茶褰曪細
db2 get health snapshot for db on sample show detail

瀵逛簬鍩轰簬闆嗗悎鐘舵佺殑杩愯鐘跺喌鎸囩ず鍣紝鍙鎵鏈夐泦鍚堝璞℃崟鑾锋暟鎹簱蹇収锛岃屼笉鑰冭檻杩欎簺瀵硅薄鐨勭姸鎬併傚父瑙 GET HEALTH SNAPSHOT FOR DB 鍛戒护杩斿洖鎵鏈夐泦鍚堝璞★紝杩欎簺瀵硅薄闇瑕侀拡瀵规墍鏈夊熀浜庨泦鍚堢姸鎬佺殑杩愯鐘跺喌鎸囩ず鍣ㄧ殑璀︽姤銆
瑕佸鍒楃ず浜嗘墍鏈夐泦鍚堝璞＄殑鏁版嵁搴撴崟鑾疯繍琛岀姸鍐靛揩鐓э紝璇峰彂鍑轰互涓嬪懡浠わ細
db2 get health snapshot for db on sample with full collection

鏌ョ湅绔彛netstat -aon|findstr "111"
tasklist|findstr "111"

du -m * 鏌ョ湅褰撳墠鐩綍鏂囦欢澶у皬mb
find . -size 10000k 鏌ユ壘褰撳墠鐩綍澶т簬10mb鐨
鏂板涓婚敭
alter table trade_flow_info add constraint  PK_FXJK PRIMARY KEY (TRADE_ON_UUID);
 alter table table_name drop primary key (col)

鍒涘缓db2 瀹炰緥鍜屽垱寤哄簱鐨勬柟娉曞ぇ鑷村垎涓轰袱绫伙紒涓绫绘槸鍥惧舰鐣岄潰db2setup 鍒涘缓涓绉嶆槸CLI鍒涘缓锛佹澶勫彧鎻忚堪涓涓婥LI鏂瑰紡鑷充簬鍥惧舰鐣岄潰璇峰ぇ瀹舵悳绱竴涓嬪惂锛
db2 鍒涘缓瀹炰緥 鍒涘缓鏁版嵁搴
1.鍒涘缓瀹炰緥鐢ㄦ埛
mkdir /db2/db2test 鍒涘缓瀹炰緥鐢ㄦ埛鐩綍
smitty user
閫夋嫨Add a User
* User NAME                                          [db2test]
User ID                                                   []
ADMINISTRATIVE USER?                       false
Primary GROUP                                     [db2iadm1]
Group SET                                           [staff]
ADMINISTRATIVE GROUPS                   []
ROLES                                                         []
Another user can SU TO USER?            true
SU GROUPS                                          [ALL]
HOME directory                                     [/db2/db2test]
Initial PROGRAM                                    [/usr/bin/ksh]

2.鍒涘缓瀹炰緥 DB2_install=/usr/opt/db2_08_01/instance
./db2icrt -u db2test db2test

3.鍒涘缓鏁版嵁搴
su - db2test
db2start     #姝ゅ涓嶆墽琛屽惎鍔ㄥ疄渚嬪皢鎶:SQL1032N No start database manager command was issued. SQLSTATE=57019
db2 create db db2test

4.鍒犻櫎鏁版嵁搴
db2 drop db db2test
db2stop

5.鍒犻櫎瀹炰緥
cd DB2_install
./db2idrop -f db2test # -f鍙傛暟涓瀹氳娣诲姞鍚﹀垯鍒犻櫎瀹屼簡浼氭姤閿欙紒

6.鍒犻櫎鐢ㄦ埛
smitty user
閫夋嫨Remove a User
* User NAME                                          [db2test]                                                           +
Remove AUTHENTICATION information?                  yes
鍒犻櫎鐢ㄦ埛鐩綍
rm -rf db2test


df -B 1g
1銆佹煡鐪嬫暟鎹簱椤靛ぇ灏
db2 get db cfg
2銆佹敹闆嗚〃鐘舵佷俊鎭
db2 runstats on table schema.table_name
3銆佹煡璇㈡暟鎹〃鍗犵敤椤电殑鏁伴噺
select tabname, npages from syscat.tables where tabname = 'table_name'
4銆佽绠楄〃鍗犵敤纾佺洏绌洪棿澶у皬
琛ㄥ崰鐢ㄧ鐩樼┖闂村ぇ灏 = 鏁版嵁椤靛ぇ灏 * 椤垫暟閲
鏌ョ湅琛ㄥ崰纾佺洏绌洪棿澶у皬锛歴elect tabname, npages*32768/(1024*1024) from syscat.tables where tabname = 'XXXXXX'

db2 v9浠ヤ笂鏌ョ湅琛ㄥ崰纾佺洏閫昏緫绌洪棿澶у皬锛歴elect sum(x.DATA_OBJECT_P_SIZE+x.INDEX_OBJECT_P_SIZE+x.LOB_OBJECT_P_SIZE+x.LONG_OBJECT_P_SIZE+x.XML_OBJECT_P_SIZE) from SYSIBMADM.ADMINTABINFO x where TABNAME='XXXXXXX';
select TABNAME,sum(x.DATA_OBJECT_P_SIZE+x.INDEX_OBJECT_P_SIZE+x.LOB_OBJECT_P_SIZE+x.LONG_OBJECT_P_SIZE+x.XML_OBJECT_P_SIZE) from SYSIBMADM.ADMINTABINFO x group by TABNAME;
db2 v9浠ヤ笂鏌ョ湅鏁版嵁搴撳崰鐢ㄧ┖闂村ぇ灏忥細db2 "call SYSPROC.GET_DBSIZE_INFO(?,?,?,10)"


-- db2 delete 澶ц〃涓嶅啓鏃ュ織鎿嶄綔
1.update command options using c off  -- //鍏抽棴鑷姩鎻愪氦
2.alter table fxjkusr.run_rule_info  activate not logged initially //璁剧疆涓嶈鏃ュ織
3.delete from MARPT.RPT_DIM_U_ORG_INX_M_CURR_CUS_PRO_TBK -- 鍒犻櫎鏁版嵁
4.commit//鎵嬪姩鎻愪氦
5.update command options using c on//鎵撳紑鑷姩鎻愪氦

銆佹煡鐪嬫暟鎹簱椤靛ぇ灏
db2 get db cfg
2銆佹敹闆嗚〃鐘舵佷俊鎭
db2 runstats on table schema.table_name
3銆佹煡璇㈡暟鎹〃鍗犵敤椤电殑鏁伴噺
select tabname, npages from syscat.tables where tabname = 'table_name'
4銆佽绠楄〃鍗犵敤纾佺洏绌洪棿澶у皬
琛ㄥ崰鐢ㄧ鐩樼┖闂村ぇ灏 = 鏁版嵁椤靛ぇ灏 * 椤垫暟閲
鏌ョ湅琛ㄥ崰纾佺洏绌洪棿澶у皬锛歴elect tabname, npages*16384/(1024*1024) from syscat.tables where tabname = 'XXXXXX'

db2 v9浠ヤ笂鏌ョ湅琛ㄥ崰纾佺洏閫昏緫绌洪棿澶у皬锛歴elect sum(x.DATA_OBJECT_P_SIZE+x.INDEX_OBJECT_P_SIZE+x.LOB_OBJECT_P_SIZE+x.LONG_OBJECT_P_SIZE+x.XML_OBJECT_P_SIZE) from SYSIBMADM.ADMINTABINFO x where TABNAME='XXXXXXX';
select TABNAME,sum(x.DATA_OBJECT_P_SIZE+x.INDEX_OBJECT_P_SIZE+x.LOB_OBJECT_P_SIZE+x.LONG_OBJECT_P_SIZE+x.XML_OBJECT_P_SIZE) from SYSIBMADM.ADMINTABINFO x group by TABNAME;
db2 v9浠ヤ笂鏌ョ湅鏁版嵁搴撳崰鐢ㄧ┖闂村ぇ灏忥細db2 "call SYSPROC.GET_DBSIZE_INFO(?,?,?,10)"
鏌ョ湅姝婚攣
db2 get snapshot for locks on fxjkdb
鏉鎺夋閿佽繘绋
db2 force application (杩涚▼hander)
瀵煎嚭鏌愬紶琛ㄧ殑鏁版嵁
db2 "export to pub_bizinfo.ixf of ixf select * from pub_bizinfo"
瀵煎叆鏌愬紶琛ㄧ殑鏁版嵁
琛ㄥ瓨鍦
db2 "import from pub_bizinfo.ixf of ixf insert into pub_bizinfo"
涓嶇敓鎴愭棩蹇
db2 "load from pub_bizinfo.ixf of ixf insert into pub_bizinfo"
琛ㄤ笉瀛樺湪
db2 "import from pub_bizinfo.ixf of ixf create into pub_bizinfo"
0 6 * * * $HOME/for_crontab/createTomorrowTables >> $HOME/for_crontab/mylog.log 2>&1
0 6 * * * /root/zwk/test.sh >> /root/zwk/operate_`date +"\%Y\%m\%d"`.log 2>&1
backup
db2 connect to rams
db2 quiesce db immediate
db2 terminate
db2 deactivate db fxjkdb
db2 force application all
db2 backup db fxjkdb to /home/fxjkusr/test/test

select TABNAME,SUM(CARD) OVER(PARTITION BY TABNAME) from syscat.tables where tabschema='FXJKUSR';

select TABNAME,sum(card) from syscat.tables where tabschema='FXJKUSR'group by TABNAME
鍦╨inux涓嬶紝涓嶅彲閬垮厤鐨勪細鐢╒IM鎵撳紑涓浜泈indows涓嬬紪杈戣繃鐨勬枃鏈枃浠躲傛垜浠細鍙戠幇鏂囦欢鐨勬瘡琛岀粨灏鹃兘浼氭湁涓涓猑M绗﹀彿锛岃繖鏄洜涓 DOS涓嬬殑缂栬緫鍣ㄥ拰Linux缂栬緫鍣ㄥ鏂囦欢琛屾湯鐨勫洖杞︾澶勭悊涓嶄竴鑷达紝

娓呯悊鏃ュ織鑴氭湰
46 15 * * *  find /home/rams/domains/log/* -mtime +7 |xargs rm -rf  >/dev/null 2>&1
12 19 * * *  >/home/rams/domains/rams_domain/bin/start_rams_s1.log  >/dev/null 2>&1

CMD="db2 -t "
count=`${CMD} <<EOF | grep 'labstr' | awk '{print $1}'
connect to srcdb;
select count(*), 'labstr' from tbl1 where NAME='灏忔槑';
EOF`
echo $count\
鍒楀嚭瀹氭椂浠诲姟
crontab -l

瀵逛簬鍥炶溅绗︾殑瀹氫箟锛
windows锛   0D0A
unixlinux:     0A
MAC: 0D

姣旇緝蹇嵎鐨勫幓闄よ繖浜涚鍙风殑鏂规硶鏈夎繖涔堝嚑绉嶏細

锛1锛夋槸鐢╒I鐨勫懡浠わ細
    浣跨敤vi鎵撳紑鏂囨湰鏂囦欢
    vi dos.txt
    鍛戒护妯″紡涓嬭緭鍏
    :set fileformat=unix
    :w

(2) VI涓嬩娇鐢ㄦ鍒欒〃杈惧紡鏇挎崲
   g/^M/s/^M//
    鎴栬
   %s/^M//g
   ctrl + v 鐒跺悗 ctrl + m

锛3锛変娇鐢╯ed 宸ュ叿
    sed 鈥檚/^M//鈥 filename > tmp_filename

锛4锛夋棦鐒秝indow涓嬬殑鍥炶溅绗﹀浜嗏 鈥欙紝閭ｄ箞褰撶劧閫氳繃鍒犻櫎鈥 鈥 锛屼篃鍙互瀹炵幇锛
    tr -d " "

锛5锛夋渶鍚庝竴涓柟娉曟槸鏈汉鏈甯哥敤鐨勬柟娉曪紝涓汉瑙夊緱鏈鏂逛究
    鍦ㄧ粓绔笅鏁插懡浠わ細
    $ dos2unix filename
    鐩存帴杞崲鎴恥nix鏍煎紡锛屽氨OK浜嗭紒锝



java -Xms128m -Xmx256m -jar /home/.jar
alter table FX_PRIVATE_CUST alter ID_TYPE set data type varchar(20)

DB2鍒犻櫎閲嶅璁板綍寰楁柟娉曞拰鍏朵粬鏁版嵁搴撶郴缁熸湁浣曚笉鍚屽憿锛熶笅鏂囦负鎮ㄥ垪涓句簡浜旂DB2鍒犻櫎閲嶅璁板綍鐨勬儏鍐碉紝甯屾湜瀵规偍鏈夋墍鍚开銆
璁剧疆鑱斿悎涓婚敭
alter table table_a add constraint  PK_FA PRIMARY KEY (ID_A , ID_B );

select * from TRADE_FLOW_INFO where TRADE_ON_UUID in (select TRADE_ON_UUID
from TRADE_FLOW_INFO group by TRADE_ON_UUID having count(TRADE_ON_UUID) > 1);

delete from (select TRADE_ON_UUID,row_number() over(partition by TRADE_ON_UUID order by TRADE_ON_UUID) as row_num
from TRADE_FLOW_INFO)  where row_num >1;


delete from TRADE_FLOW_INFO_STATUS;

select * from TRADE_FLOW_INFO_STATUS;
1銆佹煡鎵捐〃涓浣欑殑閲嶅璁板綍锛岄噸澶嶈褰曟槸鏍规嵁鍗曚釜瀛楁锛坧eopleId锛夋潵鍒ゆ柇

select * from TRADE_FLOW_INFO where TRADE_ON_UUID in (select TRADE_ON_UUID
from TRADE_FLOW_INFO group by TRADE_ON_UUID having count(TRADE_ON_UUID) > 1);


2銆丏B2鍒犻櫎閲嶅璁板綍锛岄噸澶嶈褰曟槸鏍规嵁鍗曚釜瀛楁锛坧eopleId锛夋潵鍒ゆ柇锛屽彧鐣欐湁rowid鏈灏忕殑璁板綍
delete from (select TRADE_ON_UUID,row_number() over(partition by TRADE_ON_UUID order by TRADE_ON_UUID) as row_num
from TRADE_FLOW_INFO_STATUS)  where row_num >1
3銆佹煡鎵捐〃涓浣欑殑閲嶅璁板綍锛堝涓瓧娈碉級

select * from vitae a where (a.peopleId,a.seq) in (select peopleId,seq from vitae group by peopleId,seq having count(*) > 1)

4銆丏B2鍒犻櫎閲嶅璁板綍锛堝涓瓧娈碉級锛屽彧鐣欐湁rowid鏈灏忕殑璁板綍

delete from vitae a where (a.peopleId,a.seq) in (select peopleId,seq from vitae group by peopleId,seq having count(*) > 1) and rowid not in (select min(rowid) from vitae group by peopleId,seq having count(*)>1)

5銆佹煡鎵捐〃涓浣欑殑閲嶅璁板綍锛堝涓瓧娈碉級锛屼笉鍖呭惈rowid鏈灏忕殑璁板綍

select * from vitae a where (a.peopleId,a.seq) in (select peopleId,seq from vitae group by peopleId,seq having count(*) > 1) and rowid not in (select min(rowid) from vitae group by peopleId,seq having count(*)>1)
浣犺鐨勬槸jvm鐨勫唴瀛樼┖闂村惂銆
鍦ㄦ柟娉曪紙浠ｇ爜鍧楋級涓畾涔変竴涓彉閲忔椂锛宩ava灏卞湪鏍堜腑涓鸿繖涓彉閲忓垎閰岼VM鍐呭瓨绌洪棿锛屽綋瓒呰繃鍙橀噺鐨勪綔鐢ㄥ煙鍚庯紝java浼氳嚜鍔ㄩ噴鏀炬帀涓鸿鍙橀噺鎵鍒嗛厤鐨凧VM鍐呭瓨绌洪棿锛涜屽湪鍫嗕腑鍒嗛厤鐨凧VM鍐呭瓨鐢眏ava铏氭嫙鏈虹殑鑷姩鍨冨溇鍥炴敹鍣ㄦ潵绠＄悊銆

JVM鍐呭瓨鍖哄煙缁勬垚

JVM鍐呭瓨鍒嗗洓绉嶏細

1銆佹爤鍖猴紙stacksegment锛夆旂敱缂栬瘧鍣ㄨ嚜鍔ㄥ垎閰嶉噴鏀,瀛樻斁鍑芥暟鐨勫弬鏁板硷紝灞閮ㄥ彉閲忕殑鍊肩瓑锛屽叿浣撴柟娉曟墽琛岀粨鏉熶箣鍚庯紝绯荤粺鑷姩閲婃斁JVM鍐呭瓨璧勬簮

2銆佸爢鍖猴紙heapsegment锛夆斾竴鑸敱绋嬪簭鍛樺垎閰嶉噴鏀撅紝瀛樻斁鐢眓ew鍒涘缓鐨勫璞″拰鏁扮粍锛宩vm涓嶅畾鏃舵煡鐪嬭繖涓璞★紝濡傛灉娌℃湁寮曠敤鎸囧悜杩欎釜瀵硅薄灏卞洖鏀

3銆侀潤鎬佸尯锛坉atasegment锛夆斿瓨鏀惧叏灞鍙橀噺锛岄潤鎬佸彉閲忓拰瀛楃涓插父閲忥紝涓嶉噴鏀

4銆佷唬鐮佸尯锛坈odesegment锛夆斿瓨鏀剧▼搴忎腑鏂规硶鐨勪簩杩涘埗浠ｇ爜锛岃屼笖鏄涓璞″叡浜竴涓唬鐮佺┖闂村尯鍩

鍦ㄦ柟娉曪紙浠ｇ爜鍧楋級涓畾涔変竴涓彉閲忔椂锛宩ava灏卞湪鏍堜腑涓鸿繖涓彉閲忓垎閰岼VM鍐呭瓨绌洪棿锛屽綋瓒呰繃鍙橀噺鐨勪綔鐢ㄥ煙鍚庯紝java浼氳嚜鍔ㄩ噴鏀炬帀涓鸿鍙橀噺鎵鍒嗛厤鐨凧VM鍐呭瓨绌洪棿锛涘湪鍫嗕腑鍒嗛厤鐨凧VM鍐呭瓨鐢眏ava铏氭嫙鏈虹殑鑷姩鍨冨溇鍥炴敹鍣ㄦ潵绠＄悊锛屽爢鐨勪紭鍔挎槸鍙互鍔ㄦ佸垎閰岼VM鍐呭瓨澶у皬锛岀敓瀛樻湡涔熶笉蹇呬簨鍏堝憡璇夌紪璇戝櫒锛屽洜涓哄畠鏄湪杩愯鏃跺姩鎬佸垎閰岼VM鍐呭瓨鐨勩傜己鐐瑰氨鏄鍦ㄨ繍琛屾椂鍔ㄦ佸垎閰岼VM鍐呭瓨锛屽瓨鍙栭熷害杈冩參锛涙爤鐨勪紭鍔挎槸瀛樺彇閫熷害姣斿爢瑕佸揩锛岀己鐐规槸瀛樺湪鏍堜腑鐨勬暟鎹ぇ灏忎笌鐢熷瓨鏈熷繀椤绘槸纭畾鐨勬棤鐏垫椿鎬с

鈼唈ava鍫嗙敱Perm鍖哄拰Heap鍖虹粍鎴愶紝Heap鍖哄垯鐢監ld鍖哄拰New鍖虹粍鎴愶紝鑰孨ew鍖哄張鍒嗕负Eden鍖,From鍖,To鍖猴紝Heap={Old+NEW={Eden,From,To}}锛岃鍥1鎵绀恒

Heap鍖哄垎涓ゅぇ鍧楋紝涓鍧楁槸NEWGeneration,鍙︿竴鍧楁槸OldGeneration.鍦∟ewGeneration涓紝鏈変竴涓彨Eden鐨勭┖闂达紝涓昏鏄敤鏉ュ瓨鏀炬柊鐢熺殑瀵硅薄锛岃繕鏈変袱涓猄urvivorSpaces锛坒rom,to锛,瀹冧滑鐢ㄦ潵瀛樻斁姣忔鍨冨溇鍥炴敹鍚庡瓨娲讳笅鏉ョ殑瀵硅薄銆傚湪OldGeneration涓紝涓昏瀛樻斁搴旂敤绋嬪簭涓敓鍛藉懆鏈熼暱鐨凧VM鍐呭瓨瀵硅薄锛岃繕鏈変釜PermanentGeneration锛屼富瑕佺敤鏉ユ斁JVM鑷繁鐨勫弽灏勫璞★紝姣斿绫诲璞″拰鏂规硶瀵硅薄绛夈

鍦∟ewGeneration鍧椾腑锛屽瀮鍦惧洖鏀朵竴鑸敤Copying鐨勭畻娉曪紝閫熷害蹇傛瘡娆C鐨勬椂鍊欙紝瀛樻椿涓嬫潵鐨勫璞￠鍏堢敱Eden鎷疯礉鍒版煇涓猄urvivorSpace,褰揝urvivorSpace绌洪棿婊′簡鍚,鍓╀笅鐨刲ive瀵硅薄灏辫鐩存帴鎷疯礉鍒癘ldGeneration涓幓銆傚洜姝わ紝姣忔GC鍚庯紝EdenJVM鍐呭瓨鍧椾細琚竻绌恒傚湪OldGeneration鍧椾腑锛屽瀮鍦惧洖鏀朵竴鑸敤mark-compact鐨勭畻娉曪紝閫熷害鎱簺锛屼絾鍑忓皯JVM鍐呭瓨瑕佹眰.

鍨冨溇鍥炴敹鍒嗗绾э紝0绾т负鍏ㄩ儴(Full)鐨勫瀮	鍦惧洖鏀讹紝浼氬洖鏀禣LD娈典腑鐨勫瀮鍦撅紱1绾ф垨浠ヤ笂涓洪儴鍒嗗瀮鍦惧洖鏀讹紝鍙細鍥炴敹NEW涓殑鍨冨溇锛孞VM鍐呭瓨婧㈠嚭閫氬父鍙戠敓浜嶰LD娈垫垨Perm娈靛瀮鍦惧洖鏀跺悗锛屼粛鐒舵棤JVM鍐呭瓨绌洪棿瀹圭撼鏂扮殑Java瀵硅薄鐨勬儏鍐点

JVM璋冪敤GC鐨勯搴﹁繕鏄緢楂樼殑锛屼富瑕佷袱绉嶆儏鍐典笅杩涜鍨冨溇鍥炴敹锛氬綋搴旂敤绋嬪簭绾跨▼绌洪棽锛涘彟涓涓槸JVM鍐呭瓨鍫嗕笉瓒虫椂锛屼細涓嶆柇璋冪敤GC锛岃嫢杩炵画鍥炴敹閮借В鍐充笉浜咼VM鍐呭瓨鍫嗕笉瓒崇殑闂鏃讹紝灏变細鎶utofmemory閿欒銆傚洜涓鸿繖涓紓甯告牴鎹郴缁熻繍琛岀幆澧冨喅瀹氾紝鎵浠ユ棤娉曢鏈熷畠浣曟椂鍑虹幇銆

鏍规嵁GC鐨勬満鍒讹紝绋嬪簭鐨勮繍琛屼細寮曡捣绯荤粺杩愯鐜鐨勫彉鍖栵紝澧炲姞GC鐨勮Е鍙戞満浼氥備负浜嗛伩鍏嶈繖浜涢棶棰橈紝绋嬪簭鐨勮璁″拰缂栧啓灏卞簲閬垮厤鍨冨溇瀵硅薄鐨凧VM鍐呭瓨鍗犵敤鍜孏C鐨勫紑閿銆傛樉绀鸿皟鐢⊿ystem.GC()鍙兘寤鸿JVM闇瑕佸湪JVM鍐呭瓨涓鍨冨溇瀵硅薄杩涜鍥炴敹锛屼絾涓嶆槸蹇呴』椹笂鍥炴敹锛屼竴涓槸骞朵笉鑳借В鍐矹VM鍐呭瓨璧勬簮鑰楃┖鐨勫眬闈紝鍙﹀涔熶細澧炲姞GC鐨勬秷鑰椼

鈼嗗綋涓涓猆RL琚闂椂锛孞VM鍐呭瓨鍖哄煙鐢宠杩囩▼濡備笅锛

A.JVM浼氳瘯鍥句负鐩稿叧Java瀵硅薄鍦‥den涓垵濮嬪寲涓鍧桱VM鍐呭瓨鍖哄煙

B.褰揈den绌洪棿瓒冲鏃讹紝JVM鍐呭瓨鐢宠缁撴潫銆傚惁鍒欏埌涓嬩竴姝

C.JVM璇曞浘閲婃斁鍦‥den涓墍鏈変笉娲昏穬鐨勫璞★紙杩欏睘浜1鎴栨洿楂樼骇鐨勫瀮鍦惧洖鏀讹級,閲婃斁鍚庤嫢Eden绌洪棿浠嶇劧涓嶈冻浠ユ斁鍏ユ柊瀵硅薄锛屽垯璇曞浘灏嗛儴鍒咵den涓椿璺冨璞℃斁鍏urvivor鍖

D.Survivor鍖鸿鐢ㄦ潵浣滀负Eden鍙奜LD鐨勪腑闂翠氦鎹㈠尯鍩燂紝褰揙LD鍖虹┖闂磋冻澶熸椂锛孲urvivor鍖虹殑瀵硅薄浼氳绉诲埌Old鍖猴紝鍚﹀垯浼氳淇濈暀鍦⊿urvivor鍖

E.褰揙LD鍖虹┖闂翠笉澶熸椂锛孞VM浼氬湪OLD鍖鸿繘琛屽畬鍏ㄧ殑鍨冨溇鏀堕泦锛0绾э級

F.瀹屽叏鍨冨溇鏀堕泦鍚庯紝鑻urvivor鍙奜LD鍖轰粛鐒舵棤娉曞瓨鏀句粠Eden澶嶅埗杩囨潵鐨勯儴鍒嗗璞★紝瀵艰嚧JVM鏃犳硶鍦‥den鍖轰负鏂板璞″垱寤篔VM鍐呭瓨鍖哄煙锛屽垯鍑虹幇"outofmemory閿欒"

 浣跨敤jvmstat 涔嬪墠闇瑕侀厤缃浉搴旂幆澧冨彉閲忥紝鐜鍙橀噺閰嶇疆濡備笅锛

JVMSTAT_HOME锛歫vmstat瀹夎鐩綍
JVMSTAT_JAVA_HOME锛欽DK鎵鍦ㄧ洰褰曪紝涓嶫AVA_HOME鍊肩浉鍚


        閰嶇疆濂戒袱涓幆澧冨彉閲忎箣鍚庡氨鍙互杩愯jvmstat 浜嗭紝杩愯鍛戒护涓猴細

visualgc pid
#windows 绯荤粺杩涘叆bat 鐩綍鍚庤繍琛岃鍛戒护
#linux 绯荤粺杩涘叆bin 鐩綍鍚庤繍琛岃鍛戒护




 鍚姩mysq鏁版嵁搴擄紝net start mysql;
 mysql-hlocalhost -uroot -p;


 typeperf -si 5 "\Memory\Available Mbytes" "\Memory\Pages/sec"

 瑕佹樉绀哄鐞嗗櫒鍜屽唴瀛樿鏁板櫒锛岃閿叆锛
typeperf "\Memory\Available bytes" "\processor(_total)\% processor time"

瑕佷互 CSV 杈撳嚭鏍煎紡姣忎笁绉掗挓鏄剧ず涓娆 Explorer 杩涚▼锛岃閿叆锛
typeperf "\Process(Explorer)\Thread Count" -si 3 -o typeperf.csv

瑕佸湪璁＄畻鏈 Server_name 涓婃樉绀 50 涓 RAS 璁℃暟鍣ㄧ殑鑼冧緥锛岃閿叆锛
typeperf "\RAS port(LPT1)\Bytes Transmitted" -sc 50 -s Server_name




濡傛灉浣犳兂鍏佽鐢ㄦ埛myuser浠巌p涓192.168.1.6鐨勪富鏈鸿繛鎺ュ埌mysql鏈嶅姟鍣ㄧ殑dk鏁版嵁搴擄紝骞朵娇鐢╩ypassword浣滀负瀵嗙爜

GRANT ALL PRIVILEGES ON dk.* TO 'myuser'@'192.168.1.3' IDENTIFIED BY 'mypassword' WITH GRANT OPTION;

FLUSH   PRIVILEGES;


# /etc/init.d/mysql stop
# mysqld_safe --user=mysql --skip-grant-tables --skip-networking &
# mysql -u root mysql
mysql> UPDATE user SET Password=PASSWORD('newpassword') where USER='root';
mysql> FLUSH PRIVILEGES;
mysql> quit
# /etc/init.d/mysql restart
# mysql -uroot -p
Enter password: <杈撳叆鏂拌鐨勫瘑鐮乶ewpassword>



tps(姣忕浜嬪姟澶勭悊閲(TransactionPerSecond))
1. 缁熻鎵鏈夎妭鐐硅〃绌洪棿浣跨敤鐜
銆銆select substr(TABLESPACE_NAME,1,20) as TBSPC_NAME,bigint(TOTAL_PAGES * PAGE_SIZE)/1024/1024 as "TOTAL(MB)",used_pages*PAGE_SIZE/1024/1024 as "USED(MB)", free_pages*PAGE_SIZE/1024/1024 as "FREE(MB)" from table(snapshot_tbs_cfg('DB_NAME', -2)) as snapshot_tbs_cfg

鑾峰彇鍒板綋鍓嶆椂闂翠负姝紝鏁版嵁搴撴荤殑TPS鍙奟esponse Time锛
select current time as current_time, total_app_commits,total_act_time,total_app_commitamp - db_conn_time)as tps,total_act_time/total_app_commits as response_time from table (mon_get_database(-2))


銆銆鏌ョ湅琛ㄧ┖闂翠娇鐢ㄧ巼
銆銆select substr(tbsp_name,1,20) as TABLESPACE_NAME,substr(tbsp_content_type,1,10) as TABLESPACE_TYPE,sum(tbsp_total_size_kb)/1024 as TOTAL_MB,sum(tbsp_used_size_kb)/1024 as USED_MB,sum(tbsp_free_size_kb)/1024 as FREE_MB,tbsp_page_size AS PAGE_SIZE from SYSIBMADM.TBSP_UTILIZATION group by tbsp_name,tbsp_content_type,tbsp_page_size
銆銆order by 1

asc鍗囧簭   desc闄嶅簭
鍒楀嚭骞冲潎鎵ц鏃堕棿鎺掑墠鍗佺殑SQL璇彞
db2 "select total_act_time/num_exec_with_metrics as a_exe_time ,substr(stmt_text,1,100) as sql from table(mon_get_pkg_cache_stmt(null,null,null,-2))where num_exec_with_metrics>=1 order by 1 desc fetch first 10 rows only"

鎸夊凡鎵ц鏃堕棿鍜岃楃敤CPU鏃堕棿鐢卞ぇ鍒板皬鍒楀嚭姝ｅ湪杩愯鐨凷QL
db2 "select application_handle,elapsed_time_sec,total_cpu_time,rows_read,substr(stmt_text,1,40)as sql from sysibmadm.mon_current_sql order by 2 desc,3 desc"
銆銆db2 call GET_DBSIZE_INFO (?,?,?,0)

銆銆  杈撳嚭鍙傛暟鐨勫
銆銆  --------------------------
銆銆  鍙傛暟鍚嶏細 SNAPSHOTTIMESTAMP
銆銆  鍙傛暟鍊硷細 2008-05-26-10.53.06.421000

銆銆  鍙傛暟鍚嶏細 DATABASESIZE
銆銆  鍙傛暟鍊硷細 1203863552

銆銆  鍙傛暟鍚嶏細 DATABASECAPACITY
銆銆  鍙傛暟鍊硷細 4281493504

銆銆unit=byte, byte/1024/1024=m

銆銆db2 call GET_DBSIZE_INFO (?,?,?,0)



=========DB2甯哥敤鐨勫懡浠======================================
鍚姩鏁版嵁搴
  db2start
鍋滄鏁版嵁搴
  db2stop
杩炴帴鏁版嵁搴
  db2 connect to bgj0 user db2inst using password
璇绘暟鎹簱绠＄悊绋嬪簭閰嶇疆
  db2 get dbm cfg
鍐欐暟鎹簱绠＄悊绋嬪簭閰嶇疆
  db2 update dbm cfg using 鍙傛暟鍚 鍙傛暟鍊
璇绘暟鎹簱鐨勯厤缃
  db2 connect to bgj0user db2 using pwd
  db2 get db cfg for bgj0
鍐欐暟鎹簱鐨勯厤缃
  db2 connect to  user db2 using pwd
  db2 update db cfg for bgj0 using 鍙傛暟鍚 鍙傛暟鍊
=====================================================================
鍏抽棴鎵鏈夊簲鐢ㄨ繛鎺
  db2 force application all
  db2 "force application(8)"
=====================================================================
澶囦唤鏁版嵁搴
  db2 force application all
  db2 backup db bgj0 to d:
  (db2 initialize tape on [url=file://\\.\tape0]\\.\tape0)
  (db2 rewind tape on [url=file://\\.\tape0]\\.\tape0)
  db2 backup db bgj0 to [url=file://\\.\tape0]\\.\tape0
鎭㈠鏁版嵁搴
  db2 restore db bgj0 from d: to d:
  db2 restore db bgj0 from [url=file://\\.\tape0]\\.\tape0 to d:
鍓嶆粴鏁版嵁搴
  db2 rollforward db db3test to end of logs and complete
  db2 rollforward db db3test to [timestamp] and complete
  db2 rollforward db db3test to [timestamp] using local time and complete
========================================================================
濡備綍鏌ョ湅鏁版嵁搴撶殑瀛樺偍杩囩▼?
    SELECT * FROM SYSCAT.PROCEDURES
缁戝畾瀛樺偍杩囩▼
    db2 connect to bgj0 user db2 using pwd
    db2 bind c:\dfplus.bnd
鎷疯礉瀛樺偍杩囩▼鍒版湇鍔″櫒涓婄殑C:\sqllib\function鐩綍涓
=======================================================================

select current date from sysibm.sysdummy1;
values current date;

--鑾峰彇褰撳墠鏃ユ湡
select current time from sysibm.sysdummy1;
values current time;
--鑾峰彇褰撳墠鏃堕棿鎴
select current timestamp from sysibm.sysdummy1;
values current timestamp;

--瑕佷娇褰撳墠鏃堕棿鎴栧綋鍓嶆椂闂存埑璁拌皟鏁村埌 GMT/CUT锛屽垯鎶婂綋鍓嶇殑鏃堕棿鎴栨椂闂存埑璁板噺鍘诲綋鍓嶆椂鍖哄瘎瀛樺櫒锛

values current time -current timezone;
values current timestamp -current timezone;

--鑾峰彇褰撳墠骞翠唤

values year(current timestamp);

--鑾峰彇褰撳墠鏈
values month(current timestamp);

--鑾峰彇褰撳墠鏃
values day(current timestamp);

--鑾峰彇褰撳墠鏃
values hour(current timestamp);

--鑾峰彇鍒嗛挓
values minute(current timestamp);

--鑾峰彇绉
values second(current timestamp);

--鑾峰彇姣
values microsecond(current timestamp);

--浠庢椂闂存埑璁板崟鐙娊鍙栧嚭鏃ユ湡鍜屾椂闂

values date(current timestamp);
values VARCHAR_FORMAT(current TIMESTAMP,'yyyy-mm-dd');
values char(current date);
values time(current timestamp);

--鎵ц鏃ユ湡鍜屾椂闂寸殑璁＄畻

values current date+1 year;
values current date+3 years+2 months +15 days;
values current time +5 hours -3 minutes +10 seconds;

--璁＄畻涓や釜鏃ユ湡涔嬮棿鐨勫ぉ鏁

values days(current date)- days(date('2010-02-20'));

--鏃堕棿鍜屾棩鏈熸崲鎴愬瓧绗︿覆

values char(current date);
values char(current time);

--瑕佸皢瀛楃涓茶浆鎹㈡垚鏃ユ湡鎴栨椂闂村

values timestamp('2010-03-09-22.43.00.000000');
values timestamp('2010-03-09 22:44:36');
values date('2010-03-09');
values date('03/09/2010');
values time('22:45:27');
values time('22.45.27');

--璁＄畻涓や釜鏃堕棿鎴宠涔嬮棿鐨勬椂宸細

--绉掔殑灏忔暟閮ㄥ垎涓哄崟浣
values timestampdiff(1,char(current timestamp - timestamp('2010-01-01-00.00.00')));
--绉掍负鍗曚綅
values timestampdiff(2,char(current timestamp - timestamp('2010-01-01-00.00.00')));
--鍒嗕负鍗曚綅
values timestampdiff(4,char(current timestamp - timestamp('2010-01-01-00.00.00')));
--灏忔椂涓哄崟浣
values timestampdiff(8,char(current timestamp - timestamp('2010-01-01-00.00.00')));
--澶╀负鍗曚綅
values timestampdiff(16,char(current timestamp - timestamp('2010-01-01-00.00.00')));
--鍛ㄤ负鍗曚綅
values timestampdiff(32,char(current timestamp - timestamp('2010-01-01-00.00.00')));
--鏈堜负鍗曚綅
values timestampdiff(64,char(current timestamp - timestamp('2010-01-01-00.00.00')));
--瀛ｅ害涓哄崟浣
values timestampdiff(128,char(current timestamp - timestamp('2010-01-01-00.00.00')));
--骞翠负鍗曚綅
values timestampdiff(256,char(current timestamp - timestamp('2010-01-01-00.00.00')));
涓銆佹暣搴撳浠斤紙澶囦唤鏁版嵁涓轰竴涓枃浠讹級

1锛夊浠戒箣鍓嶆柇寮鎵鏈夎繛鎺

db2 force application all

2锛夊浠

db2 backup db dbname user db2admin using db2admin to d:/

3锛夋仮澶

db2 restore db dbname user db2admin using db2admin from d:/

浜屻佹寜妯″紡澶囦唤锛堝浠芥暟鎹负澶氫釜鏂囦欢锛

1锛夊浠借〃缁撴瀯

db2look -d dbname -e -a -x -i db2admin -w db2admin -o d:\createdb.sql

2锛夊鍑烘暟鎹紙杩涘叆鍒版寚瀹氱洰褰曞悗鎵ц锛

db2move dbname export -u db2admin -p db2admin

3锛夊鍏ヨ〃缁撴瀯

db2 -tvf createdb.sql

4锛夊鍏ユ暟鎹紙杩涘叆鍒版寚瀹氱洰褰曞悗鎵ц锛

db2move dbname import -u db2admin -p db2admin

涓夈佷互鏂囨湰鏂瑰紡瀵煎叆瀵煎嚭鏌愪釜琛紙鏁版嵁閲忚緝灏忕殑琛級

1锛夊鍑

export to d:\dbtable.txt of del select * from dbtable;

2锛夊鍏

import from d:\dbtable.txt  of del insert into dbtable;

3锛夊鍏ヤ贡鐮

import from d:\dbtable.txt of del modified by codepage=1208 insert into dbtable;

codepage=1208 涓篣TF-8
codepage=1386 涓篏BK
澶嶅埗浠ｇ爜
瀵煎嚭鏁版嵁锛
export to "/qdzh_db/test/201507.del" of del lobs to /qdzh_db/test select * from  pub_bizinfo where PBI_TRANTIMESTART like '201507%'
璇存槑锛
锛1锛夎〃鍚峵est鍓嶉潰闇瑕佸甫schema鍚
锛2锛夊涓嶇‘璁よ〃缁撴瀯锛屽彲鐢ㄥ懡浠 db2 describe table test鏌ヨ
3
DB2鍦ㄦ墽琛屼竴涓ぇ鐨刬nsert/update鎿嶄綔鐨勬椂鍊欐姤鈥淭he transaction log for the database is full.. 鈥濋敊璇紝鏌ヤ簡涓涓嬫枃妗ｆ槸DB2鐨勬棩蹇楁枃浠舵弧浜嗙殑缂樻晠銆

棣栧厛杩愯涓嬮潰鍛戒护鏉ユ煡鐪婦B2鐨勬棩蹇楅厤缃俊鎭

?
1
$ db2 get db cfg | grep LOG
娉ㄦ剰鍏朵腑鐨勪笅闈㈤厤缃」
Log file size (4KB) (LOGFILSIZ) = 1024 Number of primary log files (LOGPRIMARY) = 45 Number of secondary log files (LOGSECOND) = 20姝ゆ椂鍙互閫氳繃涓嬮潰鐨勫懡浠ゆ潵淇敼B2鐨勬棩蹇楅厤缃俊鎭
$ db2 update db cfg using LOGFILSIZ 10240 $ db2 update db cfg using LOGPRIMARY 100 $ db2 update db cfg using LOGSECOND 100淇敼閰嶇疆浠ュ悗闇瑕侀噸鏂板惎鍔ㄦ暟鎹簱瀹炰緥
$ db2stop force $ db2start鏈鍚庡啀娆℃煡鐪嬩慨鏀瑰悗鐨勫弬鏁帮紝鐒跺悗閲嶆柊杩愯insert/update鎿嶄綔銆
瀵煎叆鏁版嵁锛
纭鐜淇℃伅娌℃湁闂鎵ц瀵煎叆鍛戒护
import from "/home/qdzhusr/test/201507/test.del" of del lobs from /home/qdzhusr/test/201507/ insert into pub_bizinfo

load from "/home/qdzhusr/test/201507/test.del" of del lobs from /home/qdzhusr/test/201507/ insert into pub_bizinfo

For2ear@

COPY NO/COPY YES/NONRECOVERABLE

load from "/qdzh_db/test/201508.del" of del lobs from /qdzh_db/test/ insert into pub_bizinfo NONRECOVERABLE without prompting

load from aa1.ixf of ixf replace into table1 COPY NO without prompting

鐒跺悗db2 load from /qdzh_db/test/test.del of del terminate into pub_bizinfo
鐒跺悗 reorg table <琛>
鐒跺悗灏卞彲浠ヤ簡锛

鎵ц鍛戒护锛歳eorg table XXX锛涘嵆鍙

db2 force all application
db2 quiesce db immediate
db2 "backup db qdzhdb tablespace(userspace1)"


瀵煎嚭琛ㄦ暟鎹
  db2 export to c:\dftz.txt of del select * from dftz
  db2 export to c:\dftz.ixf of ixf select * from dftz
瀵煎叆琛ㄦ暟鎹
import from c:\123.txt of del insert into ylbx.czyxx锛堟妸123鏂囦欢涓殑鍐呭浠EL鏍煎紡鎻掑叆鍒皔lbx妯″紡涓嬬殑czyxx琛ㄤ腑锛屽姞鑷砪zyxx琛ㄤ腑鏁版嵁鐨勫悗闈級

db2 import from c:\dftz.txt of del commitcount 5000 messages c:\dftz.msg insert into dftz锛堝皢c鐩樹笅dftz鏂囦欢涓殑鍐呭璁板綍浠el鏍煎紡瀵艰嚦dftz琛ㄤ腑锛屾瘡5000鏉℃彁浜や竴娆★紝骞跺湪dftz.msg鏂囦欢涓褰曡繃绋嬩腑鐨勬姤璀︿俊鎭級

db2 import from c:\dftz.ixf of ixf commitcount 5000 messages c:\dftz.msg insert into dftz锛堝皢c鐩樹笅dftz鏂囦欢涓殑鍐呭璁板綍浠xf鏍煎紡瀵艰嚦dftz琛ㄤ腑锛屾瘡5000鏉℃彁浜や竴娆★紝骞跺湪dftz.msg鏂囦欢涓褰曡繃绋嬩腑鐨勬姤璀︿俊鎭級

db2 import from c:\dftz.ixf of ixf commitcount 5000 insert into dftz锛堝皢c鐩樹笅dftz鏂囦欢涓殑鍐呭璁板綍浠xf鏍煎紡瀵艰嚦dftz琛ㄤ腑锛屾瘡5000鏉℃彁浜や竴娆★級

db2 import from c:\dftz.ixf of ixf commitcount 5000 insert_update into dftz锛堝皢c鐩樹笅dftz鏂囦欢涓殑鍐呭璁板綍浠xf鏍煎紡鏇存柊骞跺鍏ftz琛ㄤ腑锛

db2 Import from c:\dftz.ixf of ixf restartcount 55 rowcount 10000 replace_create into dftz锛堜粎ixf锛夛紙灏哾ftz.ixf涓殑鍐呭浠xf鏍煎紡浠庣55鏉¤嚦绗10000鏉＄殑璁板綍瀵艰嚦鏂板缓绔嬬殑dftz琛ㄤ腑锛

db2 Import from c:\dftz.ixf of ixf rowcount 10000 create into dftz锛堜粎ixf锛夛紙灏哾ftz.ixf涓殑鍐呭浠xf鏍煎紡鍓10000鏉＄殑璁板綍瀵艰嚦鏂板缓绔嬬殑dftz琛ㄤ腑锛

db2 import from c:\dftz.ixf of ixf commitcount 5000 replace into dftz  锛堝皢dftz琛ㄤ腑鐨勫唴瀹瑰鍏ftz琛ㄤ腑骞舵浛鎹㈠叾鎵鏈夊唴瀹癸紝姣5000鏉℃彁浜や竴娆★級
======================================================================
鎵ц涓涓壒澶勭悊鏂囦欢
    db2 鈥搕f 鎵瑰鐞嗘枃浠跺悕
  锛堟枃浠朵腑姣忎竴鏉″懡浠ょ敤 锛涚粨鏉燂級
鑷姩鐢熸垚鎵瑰鐞嗘枃浠
======================================================================
  寤烘枃鏈枃浠讹細temp.sql
select 'runstats on table DB2.' || tabname || ' with distribution and detailed indexes all;' from syscat.tables where tabschema='DB2' and type='T';
db2 鈥搕f temp.sql>runstats.sql
===============================================================
鑷姩鐢熸垚寤鸿〃锛堣鍥撅級璇彞
鍦ㄦ湇鍔″櫒涓婏細C:\sqllib\misc鐩綍涓
db2 connect to bgj0 user db2 using pwd
db2look -d bgj0 -u db2inst -e -p -c c:\bgj0.txt
============================================================================
鎺堟潈缁欐煇鐢ㄦ埛鏉冮檺
grant dbadm on database to user bb
============================================================================

select * from czyxx fetch first 1 rows only
============================================================================

db2expln -d 鏁版嵁搴撳悕 -u 鐢ㄦ埛鍚 瀵嗙爜 -o 鏂囦欢鍚峾-t  -c 鐢熸垚鍖呯殑妯″紡鍚 -p 鍖呭悕

=======================================================================================
瑕佷娇鐢⊿QL璋冪敤璇彞閲嶇粍琛紝浣跨敤admin_cmd杩囩▼鍙戝嚭鎵ц鍛戒护锛
call sysproc.admin_cmd('reorg table tablename index indexname')

===========================================================================
鏌ョ湅鏌愪竴鎸囧畾琛ㄧ殑鐘舵
db2 load query table 琛ㄥ悕
============================================================================

鏄剧ず褰撳墠鐢ㄦ埛鎵鏈夎〃

銆銆list tables

鍒楀嚭鎵鏈夌殑绯荤粺琛

銆銆list tables for system
======================鍋氭暟鎹簱鐨勭紪鐩笌鍙嶇紪鐩紙鍗冲垹闄ょ紪鐩級================
缂栫洰
1.db2 catalog tcpip node node1 remote 172.16.170.100(鏈満IP鍦板潃) server 50004(鍙粠 get dbm cfg show detail 涓湅鍑猴級
2.db2 catalog db sample(瑕佹槧灏勫埌鐨勬暟鎹簱鍦ㄦ湰鏈虹殑鍒悕) at node node1

鍙嶇紪鐩
1.db2 uncatalog node node1
2.db2 uncatalog db sample
================鏌ョ湅琛ㄧ粨鏋==============================

銆銆db2 describe select * from tmmsm01 (db2 describe table tmmsm01)

================涓鸿〃鏀瑰悕========================================


db2 rename table 鍘熷琛ㄥ悕 to 鐩殑琛ㄥ悕

==================淇敼鏌愪釜鎿嶄綔鐢ㄦ埛鐨勬潈闄================


锛堥渶瑕佺郴缁烺OOT鐢ㄦ埛鍙備笌锛
鎶婄敤鎴锋墍鍦ㄧ粍閫氳繃smitty group淇敼鎵灞炵粍鐨勬搷浣滄潈闄愬弬鏁帮紝鐒跺悗鍦╠b2 get dbm cfg show detail涓氳繃db2 update dbm cfg for bgj0 using  SYSMON group name   DB2MON鍛戒护鏉ヤ慨鏀


=========================================================


妫鏌ヨ〃鐨勫ぇ灏



db2 select tabname锛宯pages锛宖pages from syscat.tables where tabname='tabname'

鏌ョ湅鏈杩戜竴娆℃暟鎹噸缁勭殑鏃堕棿鐨勬椂闂达細
db2 鈥榮elect stats_time,tabname from syscat.tables where stats_time is not null Order by stats_time鈥檤more

妫鏌ユ槸鍚﹀凡鍋氳繃runstats锛
db2 -v "select tbname,nleaf,nlevels,stats_time from sysibm.sysindexes"

涓烘暟鎹簱鍋氳嚜鍔ㄧ粺璁′俊鎭敹闆嗭細
db2 update db cfg for bgj0 using auto_maint on
db2 update db cfg for bgj0 using auto_tbl_maint on
db2 update db cfg for bgj0 using auto_runstats on

鏀堕泦鏌愯〃涓墍鏈夊垪涓婄殑缁熻淇℃伅锛

 runstats on table 鏌愪釜妯″紡涓嬬殑琛ㄨ〃鍚 on all columns

涓婂彞绛夊悓浜庯細      runstats on table 琛ㄥ悕


鏀堕泦琛ㄥ拰绱㈠紩涓婄殑鏁版嵁搴撶粺璁′俊鎭紝涓嶅寘鍚垎甯冪粺璁′俊鎭細
runstats on table 妯″紡涓嬬殑琛 and indexes all

鏀堕泦琛ㄥ拰绱㈠紩涓婄殑鏁版嵁搴撶粺璁′俊鎭紝鍖呭惈鍒嗗竷缁熻淇℃伅锛
runstats on table pub_bizinfo with distribution and indexes all


鏀堕泦琛ㄤ笂鐨勬暟鎹簱缁熻淇℃伅浠ュ強绱㈠紩涓婄殑璇︾粏缁熻淇℃伅锛屼笉鍖呭惈鍒嗗竷缁熻淇℃伅锛
runstats on table 妯″紡涓嬬殑琛 and detailed indexes all

鏀堕泦琛ㄤ笂鐨勬暟鎹簱缁熻淇℃伅浠ュ強绱㈠紩涓婄殑璇︾粏缁熻淇℃伅锛屽寘鍚垎甯冪粺璁′俊鎭細
runstats on table 妯″紡涓嬬殑琛 with distribution and detailed indexes all


鏀堕泦鍏抽敭鍒椾笂鐨勬暟鎹簱缁熻淇℃伅锛
runstats on table 妯″紡涓嬬殑琛 on key columns


==============================================================

妫鏌ュ摢涓〃鏈夊仛杩噐eorg
db2 select tabname锛宯pages锛宖pages from syscat.tables



妫鏌ュ浠戒笌閲嶆瀯鍛戒护鐨勫巻鍙茶褰曪細
db2 list history backup/reorg  all for bgj0


=======================================================================


鎵ц琛ㄣ佺储寮曟鏌ユ槸鍚﹂渶瑕佸仛reorg锛屽厛鎵цreorgchk鍛戒护妫锛屽懡浠ゅ涓嬶細
db2 reorgchk update statistics on table bgj0.bgj0logevent

(鏌ョ湅鐢ㄤ簬绱㈠紩鐨凢4锛孎5锛孎6锛孎7锛孎8杩欏嚑鍒楋紝濡傛灉杩欏嚑鍒椾腑鐨勪换浣曚竴鍒楁湁鏄熷彿*锛屽垯璇存槑褰撳墠鐨勮〃鍜/鎴栫储寮曞簲璇ラ噸缁勩)

reorgchk on table all 纭畾鏄惁闇瑕佸琛ㄨ繘琛岄噸缁勩傝繖瀵逛簬瀵规墍鏈夎〃鑷姩鎵ц runstats 寰堟湁鐢ㄣ

===============================================================

鑴辨満鏂瑰紡閲嶇粍琛ㄦ槸鏁寸悊琛ㄧ鐗囨渶蹇柟娉曘備娇鐢–LP閲嶇粍琛紝鎵ц锛
db2 reorg table bgj0.bgj0logevent

瑕佷娇鐢ㄤ复鏃惰〃绌洪棿閲嶇粍琛紝鎵ц锛
db2 reorg table dbname.tablename use 涓存椂琛ㄧ┖闂村悕


閲嶇粍琛ㄥ苟鏍规嵁绱㈠紩瀵硅杩涜閲嶆柊鎺掑簭锛屾墽琛岋細
db2 reorg table bgj0.bgj0logevent index IDX_LOG_01

db2 reorg indexes all for table bgj0.bgj0logevent allow read access


=====鏌ユ閿=======================================================
cd /db2data/db2user/db2inst/db2inst/NODE0000/SQL00001/db2event/db2detaildeadlock
du -a|sort -rn

db2evmon -path /db2data/db2user/db2inst/db2inst/NODE0000/SQL00001/db2event/db2detaildeadlock>/tmp/lock1.txt


============鐩戞帶鍣================================================



           绗竴姝ワ細鎵撳紑鐩戞帶寮鍏筹紙鍙拰get snapshot鐩稿叧)
           db2 "update monitor switches using lock ON sort ON bufferpool ON uow ON table ON statement ON"
           db2 "update monitor switches using lock off sort off bufferpool off uow off table off statement ON"
           db2 update dbm cfg using DFT_MON_BUFPOOL on DFT_MON_LOCK on DFT_MON_SORT on DFT_MON_STMT on  DFT_MON_TABLE on  DFT_MON_TIMESTAMP on  DFT_MON_UOW on  HEALTH_MON on
           db2 get monitor switches

           绗簩姝ワ細鍒涘缓浜嬩欢鐩戞帶鍣
           db2 "create event monitor monitor_all for statement,database,tables,tablespaces,deadlocks,transactions write to file '/db2data/event'"

           绗笁姝ワ細婵娲讳簨浠剁洃鎺у櫒
           db2 "set event monitor db2detaildeadlock state=1"
           ps -ef|grep db2event
           [bgrzl0m0][db2inst][/db2data/event]>ls
           00000000.evt  db2event.ctl

           绗洓姝ワ細鏍煎紡鍖栦簨浠剁洃鎺ф枃浠
           db2evmon -db bgj0 -evm db2detaildeadlock > db2detaildeadlock.txt




============娓呯┖鐩戞帶鍣細===========================================

鏌ョ湅鐩戞帶鍣ㄥ悕绉帮細ps -ef |grep db2event     (db2detaildeadlock)

db2 "set event monitor db2detaildeadlock state=0"

鍒犻櫎鈥  00000000.evt  db2event.ctl鈥濇枃浠


db2 "set event monitor db2detaildeadlock state=1"



===============蹇収鐩戞帶鍣===================================================
 db2 update dbm cfg using DFT_MON_BUFPOOL on DFT_MON_LOCK on DFT_MON_SORT on DFT_MON_STMT on  DFT_MON_TABLE on  DFT_MON_TIMESTAMP on  DFT_MON_UOW on  HEALTH_MON on

 Default database monitor switches
   Buffer pool                         (DFT_MON_BUFPOOL) = ON                         ON
   Lock                                   (DFT_MON_LOCK) = OFF                        ON
   Sort                                   (DFT_MON_SORT) = ON                         ON
   Statement                              (DFT_MON_STMT) = ON                         ON
   Table                                 (DFT_MON_TABLE) = ON                         ON
   Timestamp                         (DFT_MON_TIMESTAMP) = ON                         ON
   Unit of work                            (DFT_MON_UOW) = ON                         ON
 Monitor health of instance and databases   (HEALTH_MON) = ON                         ON


 db2 get snapshot for all on bgj0 > all_snap.out

鍔ㄦ乻ql璇彞snapshot
鐩戞帶鏄惁瀛樺湪姝婚攣
grep -n "Deadlocks" all_snap.out|grep -v "= 0"|more

鎵ц棰戠箒鐨勮鍙
grep -n "Number of execution" all_snap.out|grep -v "= 0"|sort -krn|more


鎵ц鏃堕棿寰堥暱鐨勮鍙
grep -E "Total execution time" all_snap.out| sort -rn|more
grep -E "Rows read" all_snap.out| sort -rn|more


==========================================================================




绠＄悊

export 灏嗘暟鎹簱鏁版嵁鎶藉彇鍒颁竴涓钩闈㈡枃浠朵腑銆
import 閫氳繃浣跨敤 IMPORT 瀹炵敤绋嬪簭锛屽皢鏁版嵁瀵煎叆鍒版暟鎹簱銆
load query table <tbname>
[to local-message-file][nosummary | summaryonly] [showdelta]  杩斿洖 LOAD 瀹炵敤绋嬪簭鐨勮繘搴︺
backup database <dbname> [to <path>] 鎵ц鏁版嵁搴撳浠姐
restore database <dbname> [from <path>] 鎵ц鏁版嵁搴撴仮澶嶃
get health snapshot for dbm 杩斿洖瀹炰緥鐨勬甯稿揩鐓т俊鎭紙浠呴傜敤浜 V8锛夈
get health snapshot for all on <dbname> 杩斿洖鏁版嵁搴 <dbname> 鐨勬墍鏈夋甯稿揩鐓э紙浠呴傜敤浜 V8锛夈

绠＄悊鏈嶅姟鍣

get admin cfg 杩斿洖绠＄悊鏈嶅姟鍣ㄧ殑閰嶇疆璁剧疆銆
update admin cfg using <p> <v> 灏嗙鐞嗘湇鍔″櫒閰嶇疆鍙傛暟 <p> 鏇存柊涓哄 <v>銆


===============================================================



 db2pd -v
 db2pd -osinfo
 [bgrz1d0][db2inst][/db2data/db2user/db2inst]>db2pd -help

Usage:
   -h | -help [file=<filename>]
      Help
   -v | -version [file=<filename>]
      Version
   -osinfo [disk] [file=<filename>]
      Operating System Information
   -dbpartitionnum <num>[,<num>]
      Database Partition Number(s)
   -alldbpartitionnums
      All partition numbers
   -database | -db <database>[,<database>]
      Database(s)
   -alldatabases | -alldbs
      All Active Databases
   -inst
      Instance scope output
   -file <filename>
      All Output to Filename
   -command <filename>
      Read in predefined options
   -interactive
      Interactive
   -full
      Expand output to full length
   -repeat [num sec] [count]
      Repeat every num seconds (default 5) count times
   -everything
      All options on all database partitions

Instance scope options:

   -agents [db=<database>] [ [agent=<agentid>] | [application=<appid>] ] [file=<filename>]
      Agents
   -fcm [<numApps>] [file=<filename>]
      FCM Information
   -mempools [file=<filename>]
      Memory Pools
   -memsets [file=<filename>]
       Memory Sets
   -dbmcfg [file=<filename>]
      DBM Config
   -sysplex [db=<database>] [file=<filename>]
      Sysplex List
   -utilities [file=<filename>]
      Utilities
   *-fmp
      FMP Table

Database scope options:

   -applications [ [application=<appid>] | [agent=<agentid>] ] [file=<filename>]
      Applications
   -transactions [tran=<tranhdl>] [app=<apphdl>] [file=<filename>]
      Transactions
   -bufferpools [file=<filename>]
      Buffer Pools
   -logs [file=<filename>]
      Transaction Logs
   -locks [tran=<tranhdl>] [file=<filename>] [showlocks] [wait]
      Locks
   -tablespaces [file=<filename>] [group] [tablespace=<tablespace id>]
      Tablespaces/Containers
   -dynamic [file=<filename>]
      Dynamic Cache
   -static [file=<filename>]
      Static Cache
   -mempools [file=<filename>]
      Memory Pools
   -memsets [file=<filename>]
       Memory Sets
   -dbcfg [file=<filename>]
      Database Config
   -catalogcache [file=<filename>]
      Catalog Cache
   -tcbstats [all|index] [tbspaceid=<tbspaceid> [tableid=<tableid>]] [file=<filename>]
      Table Control Block Stats
   -reorgs [file=<filename>]
      Table Reorg Stats
   -recovery [file=<filename>]
      Recovery Status
   -reopt [file=<filename>]
      Reoptimized SQL Statements
   -storagepaths
      Storage Paths
   -hadr [file=<filename>]
      High Availability Disaster Recovery
   -activestatements [file=<filename>]
      Active Statement List

   Examples:
   db2pd -dbpartitionnum 0,1 -db sample -locks
   db2pd -dbp 0,1 -database bgj0 app=<50>
   db2pd -alldbp -alldbs


楠岃瘉鏁版嵁搴撴槸鍚︽鍦ㄨ繘琛屾仮澶嶇殑璁℃暟鍣紝褰撳墠鏃ュ織鍜屽綋鍓峀SN锛堟棩蹇楀簭鍙凤級鎻愪緵浜嗘棩蹇椾綅缃紝
db2pd -db sample -recovery

db2pd -logs


db2pd -db BGJ0 -applications
db2pd -db BGJ0 -transactions|more
db2pd -db bgj0 -locks wait

db2pd -db bgj0  -applications -dyn|more
db2pd -db BGJ0 -applications -transactions -dynamic|more
db2pd -db bgj0

db2pd -db bgj0 -applications -transactions -dynamic|grep locks


[bgrzl0m0][db2inst][/db2data/db2user/db2inst]>db2pd -db BGJ0 -logs

Database Partition 0 -- Database BGJ0 -- Active -- Up 0 days 00:38:39 -- Date 08/06/2009 15:46:23

Logs:
Current Log Number            0
Pages Written                 0
Method 1 Archive Status       n/a
Method 1 Next Log to Archive  n/a
Method 1 First Failure        n/a
Method 2 Archive Status       n/a
Method 2 Next Log to Archive  n/a
Method 2 First Failure        n/a

Address            StartLSN       State      Size       Pages      Filename
0x0780000020008118 0x0008F2488000 0x00000000 16000      16000      S0000000.LOG
0x07800000200081B8 0x0008F6308000 0x00000000 16000      16000      S0000001.LOG
0x0780000020008258 0x0008FA188000 0x00000000 16000      16000      S0000002.LOG
0x07800000200082F8 0x0008FE008000 0x00000000 16000      16000      S0000003.LOG
0x0780000020008398 0x000901E88000 0x00000000 16000      16000      S0000004.LOG
0x0780000020008438 0x000905D08000 0x00000000 16000      16000      S0000005.LOG

db2pd  -db BGJ0 -dbcfg
db2pd  -db BGJ0 -dbmcfg
db2pd  -db BGJ0 -bufferpools
db2pd  -db BGJ0 -tablespaces
db2 list tablespaces show detail|more
db2 list tablespace containers for 4 show detail
db2pd -db BGJ0 -reorg

纭畾鍝釜浜嬪姟鍖呭惈閿佸畾锛
db2pd -db bgj0 -locks showlocks wait

璇婃柇閫犳垚閿佸畾绛夊緟鐨勮〃鍔犻攣鎯呭喌锛
db2pd -db bgj0 -applications 锛堟煡鐪媠tatus涓簂ock_wait椤瑰搴旂殑AppHandl鍙凤級
db2pd -db bgj0 -transactions 锛堟煡鐪婣ppHandl鍙峰搴旂殑tranhdl鍙凤級
db2pd -db bgj0 -locks锛堟煡鐪媡ranhdl鍙峰搴旂殑閿佺被鍨嬶紙type锛変笌閿佹儏鍐碉紙mode锛夛級

==================================================================


db2mtrk
   -i鏄剧ず褰撳墠瀹炰緥鍐呭瓨浣跨敤锛
   -i -v鏄剧ず褰撳墠瀹炰緥鍐呭瓨浣跨敤璇︾粏淇℃伅锛
   -d鏁版嵁搴撳唴瀛樹娇鐢ㄦ儏鍐碉紱
   -d -v鏁版嵁搴撳唴瀛樹娇鐢ㄨ缁嗕俊鎭紱
   -p浠ｇ悊杩涚▼涓撶敤鍐呭瓨浣跨敤鐜
   -r(interval閲嶅浣跨敤闂撮殧鏁帮紝count鏄噸澶嶇殑娆℃暟

Memory for database: BGJ0

   Backup/Restore/Util Heap is of size 16384 bytes
   Package Cache is of size 540672 bytes
   Catalog Cache Heap is of size 131072 bytes
   Buffer Pool Heap is of size 395689984 bytes
   Buffer Pool Heap is of size 1254653952 bytes
   Buffer Pool Heap is of size 42713088 bytes
   Buffer Pool Heap is of size 704512 bytes
   Buffer Pool Heap is of size 442368 bytes
   Buffer Pool Heap is of size 311296 bytes
   Buffer Pool Heap is of size 245760 bytes
   Lock Manager Heap is of size 340508672 bytes
   Database Heap is of size 31637504 bytes
   Other Memory is of size 0 bytes
   Total: 2067595264 bytes


============================db2advis鍛戒护===========================



db2 -tvf (璺緞)explain.ddl


db2 update monitor switches using statement on


create event monitor for statements write

db2 set event monitor sql_trace state=1


(鎵ц姝ｅ父鐨勬暟鎹簱娲诲姩锛屽苟寮濮嬭幏鍙栧簲鐢ㄤ笂鎵鏈夌殑SQL璇彞锛岀洿鍒版兂瑕佺殑鐩戞帶鐨勬椂娈电粨鏉熴傦級


db2 event monitor sql_trace state=0




鎸夌収鎵ц鏃堕棿闄嶅簭鎺掑垪鎵ц鑰楁椂鏈闀跨殑SQL璇彞锛屼娇鐢ㄤ笅鍒楄鍙ワ細
db2 "select stmt_text,(stop_time-start_time) 'ExecutionTime(sec)' from stmt_sql_trace where stmt_operation not in(7,8,9,19) order by decimal(ExecutionTime) desc fetch first 10 rows only";


鎸夌収棰戠巼闄嶅簭鎺掑垪鎵ц娆℃暟鏈澶氱殑SQL璇彞锛屼娇鐢ㄤ笅鍒楄鍙ワ細
db2 select distinct(stmt_text),count(*) Count from stmt_sql_trace where stmt_operation not in(7,8,9,19) group by stmt_text order by count (*) desc fetch first 10 rows only;


鎸夌収CPU鏃堕棿闄嶅簭鎺掑垪鏈鑰桟PU鏃堕棿鐨凷QL璇彞锛屼娇鐢ㄤ笅鍒楄鍙ワ細
db2 "select stmt_text,user_cpu_time,UserCPU(sec) from stmt_sql_trace where stmt_operation not in(7,8,9,19) order by usrcpu desc fetch first 10 rows only"


鎸夌収鎬绘帓搴忔椂闂撮檷搴忔帓鍒楁帓搴忔椂闂存渶闀跨殑SQL璇彞锛屼娇鐢ㄤ笅鍒楄鍙ワ細
db2 select stmt_text,total_sort_time,TotalSortTime(ms) from stmt_sql_trace where stmt_operation not in (7,8,9.19) order by decimal (total_sort_time) desc fetch first 10 rows only;




鎹曡幏涓婅瘔姣忎竴绫讳腑鐨凷QL璇彞锛屽苟灏嗗畠浠斁缃湪tune.sql鏂囦欢涓傚苟灏(--#set frequency <鎵瑕佹墽琛岀殑SQL璇彞鐨勬鏁> )鍛戒护鎻掑叆鍒皌une.sql鏂囦欢涓紝杩欐牱鍙互鏇存敼宸ヤ綔璐熻浇涓瘡鏉¤鍙ョ殑鎵ц棰戠巼銆

鎵寰楀埌鐨則une.sql绫讳技浜庝笅闈㈣繖鏍凤細
--#set frequency 100
SELECT DISTINCT DIVISION FROM org;



涓轰簡纭畾鍝簺绱㈠紩鍙兘鎻愰珮鎬ц兘锛屾寜濡備笅鎵ц绱㈠紩椤鹃棶绋嬪簭锛
db2advis -d sample -i tune1.sql -t 0 -o tuneidx.sql
鍏朵腑鎵鏈夎鎺ㄨ崘鍙兘浼氭彁楂樻ц兘鐨勭储寮曞皢鏀剧疆鍦ㄦ枃浠秚uneidx.sql涓傜紪杈戣鏂囦欢锛屽湪鏂囦欢寮濮嬪娣诲姞涓鏉¤繛鎺ユ暟鎹簱鐨勮繛鎺ヨ鍙ワ細
db2 connect to sample user userid using password锛
骞跺湪鏂囦欢鏈熬娣诲姞濡備笅琛屽懡浠わ細
terminate锛

鏈鍚庤繍琛岃鏂囦欢浠ュ垱寤烘帹鑽愮殑绱㈠紩锛
db2 -tf tuneidx.sql -z tuneidx.log

鍏朵腑锛宼uneidx.log鎹曡幏tuneidx.sql鐨勬墍鏈夎緭鍑恒



===========娴嬭瘯鏈轰笂娴嬮獙琛ㄧ┖闂寸殑琛ㄦ暟鎹湁鏀瑰彉鍚庣殑绌洪棿澶у皬澧炲噺============


BGJ0涓嬬殑DS_EP01閲孊GJ0LOGEVENT鏁版嵁count鏁帮細1150525


鍓嶅彴鍒犻櫎BGJ0LOGEVENT鏁版嵁鍚巆ount鏁帮紙鐢╠elete鍒狅級锛


more 55.log鏃惰〃绌洪棿鐪嬩笉鍑烘潵澶у皬澧炲噺锛

db2stop force
db2start

db2 connect to bgj0

閲嶆瀯妫鏌ワ細锛坉b2 reorgchk update statistics on table BGJ0.BGJ0LOGEVENT锛
閲嶆瀯锛 锛坉b2 reorg table on BGJ0.BGJ0LOGEVENT锛


more 55.log鏃跺彲鐪嬭〃绌洪棿鏈夊ぇ灏忓彉鍔



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
delete涔嬪悗鑳戒笉鑳介噴鏀捐〃绌洪棿

鍘熷厛琛ㄧ┖闂寸敤浜80%锛岀敱浜庡簱涓湁涓寮犺〃宸ㄥぇ鏃犳瘮锛屾墍浠ュ埄鐢ㄩ暱鍋囦綔浜哾elete鎿嶄綔锛屽垹闄や簡鍏朵腑4/5鐨勬暟鎹紝浣嗘槸鐪嬭〃绌洪棿杩樻槸80%宸﹀彸锛屾槸涓嶆槸浣滃畬delete鑷繁鏄笉鑳介噴鏀捐〃绌洪棿鐨勯樋锛

濡傛灉瑕侀噴鏀捐〃绌洪棿鐨勮瘽锛屽簲璇ユ庝箞鎿嶄綔鍛紵璋㈣阿



(1)commit浜嗘病鏈夛紵鐒跺悗reorg涓涓嬶紝鍙互鐢╮unstats鍏堝垎鏋愪竴涓嬬洰鏍囪〃锛屽叾缁撴灉鍙互浠巗ysstat.tables寰楀埌


(2)涓嶈鐨勮瘽export鍑烘潵锛屽垹闄よ〃锛屽啀LOAD杩涘幓銆



娉:DELETE涔嬪悗鐨勬暟鎹褰曞彿杩樺瓨鍦紝鎵浠ユ暟鎹崰鐢ㄩ噺鏄笉鍑忓皯鐨勶紝杩欐槸涓轰簡鎵惧洖DELETE鍚庤屽張鎯宠鐨勬暟鎹




~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

=========鐢熸垚鏁版嵁搴撶粨鏋勬枃浠=================================



db2look   -d   bgj0   -e   -c   -o   /db2bak/bgj0/structure.sql

=========褰撳墠鐩綍涓嬬敓鎴恉b2support鏂囦欢============================

db2support . -d bgj0 -c

=========DB2瀹夎=================================================

1.	寮濮嬪畨瑁
a)	浣滀负root鐢ㄦ埛鐧诲綍锛岃繘鍏ュ埌瀹夎鏂囦欢鐩綍涓嬭繍琛
         ./db2_install 鈥損 DB2.ESE
2.	鍒涘缓db2绠＄悊鏈嶅姟鍣
a)	浣滀负root鐢ㄦ埛鐧诲綍锛岄氳繃浠ヤ笅鍛戒护鍒涘缓db2绠＄悊鏈嶅姟鍣
                dascrt 鈥搖 dasuser
3.	鍚姩db2鏁版嵁搴撶鐞嗗櫒
a)	浣滀负db2鏁版嵁搴撶鐞嗗櫒鐢ㄦ埛锛坉asuser锛夌櫥褰
b)	杩愯. das/bin/db2admin start鍛戒护鍚姩鏁版嵁搴撶鐞嗗櫒
4.	鍒涘缓瀹炰緥
a)	浣滀负root鐢ㄦ埛鐧诲綍锛岄氳繃浠ヤ笅鍛戒护鍒涘缓64浣嶇殑db2瀹炰緥
               db2icrt 鈥搖 db2fenc 鈥搘 64 db2inst2
5.	鍒涘缓db2鏂囦欢鐨勯摼鎺
a)	杩愯 db2ln鍛戒护
6.	娉ㄥ唽license
a)	浣滀负瀹炰緥鐢ㄦ埛锛坉b2inst锛夌櫥褰,杩愯锛歞b2licm 鈥揳 db2ese.lic鍛戒护
7.	鍚姩瀹炰緥
a)	浣滀负瀹炰緥鐢ㄦ埛锛坉b2inst锛夌櫥褰曪紝杩愯db2start鍛戒护
8.	鍒涘缓鏁版嵁搴
        杩愯db2 create db test
銆銆銆銆鎻愮ず鎴愬姛鍚庛
銆銆銆銆Db2 connect to test灏卞彲浠ヨ繛涓婃暟鎹簱浜




========DB2鍙傛暟閰嶇疆=====================================

1.	浣滀负瀹炰緥鐢ㄦ埛锛坉b2inst锛夌櫥褰
2.	杩愯db2set DB2COMM=tcpip
3.	杩愯db2 update dbm cfg using svcename 50002璁剧疆鏈嶅姟鐨勮繛鎺ョ鍙
4.	璁剧疆褰掓。鏃ュ織
    Db2 connect to dbname
Db2 update db cfg using LOGRETAIN recovery
娉細璁剧疆浜嗚鍙傛暟锛屽湪杩炴帴鏁版嵁搴撶殑鏃跺欎細鎶ackup pending
5.	淇敼鏃ュ織璺緞, 灏嗘棩蹇楁枃浠跺綊妗ｈ嚦娲诲姩鏃ュ織璺緞涔嬪鐨勪綅缃
db2 update db cfg for test using logarchmeth1 DISK:/db2log/db2archivelog




==============鏁版嵁搴撳仴搴峰揩鐓ф鏌==============================

db2 get health snapshot for all on bgj0 <show detail>



==============================================================

妫鏌ユ墍鏈夋暟鎹簱涓殑璇诲啓琛屾暟瀵规瘮銆佸彂鐢熺殑绛夐攣鏁般佹荤殑閿佸崰鐢ㄦ椂闂淬佸崟浣嶆椂闂村唴鐨勯攣鍗犵敤鏁伴噺銆佹閿佹垨閿佸鍔犺秼鍔裤佸彂鐢熶簡澶氬皯娆℃帓搴忔搷浣滀互鍙婄浉鍏崇殑鏃堕棿閲忕瓑鏁版嵁搴撲娇鐢ㄦā寮:


select db_name, SNAPSHOT_TIMESTAMP,rows_read, rows_selected, lock_waits, lock_wait_time, lock_wait_time/nullif(lock_waits,0) as avg_wt_time, deadlocks, lock_escals, total_sorts, total_sort_time, total_sort_time/nullif(total_sorts,0) as avg_sort_time, sort_overflows, sort_overflows/nullif(total_sorts,0) as pct_ovflow_sorts from table (snapshot_database ('',-1)) as snapshot_db



=============================================================


鑾峰彇琛ㄧ┖闂村ぇ灏忎互鍙婂墿浣欏彲鐢ㄧ┖闂村ぇ灏:

select substr(tablespace_name,1,120) as TBSPC_NAME,used_pages, free_pages from table (snapshot_tbs_cfg (' ', -1)) as snapshot_tbs_cfg



=============================================================

鏍规嵁琚鐨勯鐜囨潵纭畾闇瑕佹墽琛宺eorg鎴杛unstats鍛戒护鐨勮〃:

select substr(table_schema,1,10) as tbschema, substr(table_name,1,30) as tbname,rows_read,rows_written,overflow_accesses,page_reorgs from table (SNAPSHOT_TABLE(' ', -1)) as snapshot_table order by rows_read desc fetch first 10 rows only



=============================================================

鏍规嵁琚啓鐨勬鏁版壘鍑10寮犳洿鏂版渶棰戠箒鐨勮〃:

select substr(table_schema,1,10) as tbschema,substr(table_name,1,30) as tbname, rows_read, rows_written, overflow_accesses, page_reorgs from table (SNAPSHOT_TABLE(' ', -1)) as snapshot_table order by rows_written desc fetch first 10 rows only

=============================================================



瀵逛簬db2鏁版嵁搴擄紝瀵煎叆鍜屽鍑鸿〃缁撴瀯鍜屾暟鎹叾瀹炲緢绠鍗曪紝鍙渶瑕佺敤鍒癲b2look鍜宒b2move涓や釜鍛戒护鍗冲彲銆傝繖涓や釜鍛戒护閮介渶瑕佸湪瀹㈡埛绔殑鍛戒护琛屽鐞嗗櫒涓墽琛岋紝浣嗗浜庢暟鎹簱鏈嶅姟鍣ㄥ拰瀹㈡埛绔笉鍦ㄥ悓涓鏈哄櫒涓婄殑锛岄渶瑕佸熷姪catalog鍛戒护锛屾潵鍏堝畬鎴愯繙绋嬫暟鎹簱鍔犺浇鍒版湰鍦帮紝鐒跺悗鍐嶈繘琛屽鍑哄鍏ユ搷浣溿

    濡傛灉鏄繙绋嬫搷浣滐紝鍒欏厛闇瑕佹妸杩滅▼鐨勬暟鎹簱淇℃伅鍔犺浇鍒版湰鍦帮紝濡傛灉鏄湰鍦板垯璺宠繃1鍜2锛屼粠3寮濮嬶紝鍏蜂綋濡備笅锛

       1銆 catalog server 绔殑 node 锛屽懡浠ゅ涓嬶細
       db2 catalog tcpip node node_name remote hostname server service_port
       db2 uncatalog node node_name   锛堝彇娑堣妭鐐圭殑缂栫洰锛

   鍏朵腑 node_name 鏄敱浣犱换鎰忚捣鐨勪竴涓粨鐐瑰悕锛岀粨鐐瑰悕涓嶈兘璺熷凡鏈夌殑缁撶偣鍚嶉噸澶嶏紙鍙氳繃db2  list node directory 鏌ョ湅锛夛紝hostname涔熷彲涓篒P address锛宻ervice_port涓虹鍙ｅ彿涓鑸粯璁や负50000銆傝妭鐐圭洰褰曠敤浜庡瓨鍌ㄨ繙绋嬫暟鎹簱鐨勬墍鏈夎繛閫氭т俊鎭

       2銆 catalog 杩滅 DB2 鏁版嵁搴擄紝鍛戒护濡備笅锛
       db2 catalog db db_name [as alias_name] at node node_name
     db2 uncatalog db db_name    锛堝彇娑堟暟鎹簱鐨勭紪鐩級

      db_name 鏄寚杩滅▼鏁版嵁搴撶殑鍚嶅瓧锛 alias_name 鏄鎴风瀹炰緥鍚嶏紙鍙互蹇界暐锛夛紝 db2node 鏄寚涓婇潰浣犳墍鎸囧畾鐨勮妭鐐筺ode 锛

     3銆 杩炴帴鏁版嵁搴擄紝鍛戒护濡備笅锛
       db2 connect to db_name user user_name using password
     db_name 鏄寚鏁版嵁搴撶殑鍚嶅瓧锛 user_name 鏄暟鎹簱鐢ㄦ埛鍚嶏紝password鏄暟鎹簱瀵嗙爜

   4銆佺敤db2look鍛戒护鐢熸垚琛ㄧ粨鏋勭殑DLL鑴氭湰
   db2look -d db_name -i user_name -w password -a -e -o d:\script.sql

     db_name 鏄寚鏁版嵁搴撶殑鍚嶅瓧锛 user_name 鏄暟鎹簱鐢ㄦ埛鍚嶏紝password鏄暟鎹簱瀵嗙爜

   5銆佺敤db2move瀵煎嚭鎵鏈夎〃鐨勬暟鎹
     db2move db_name export -u user_name -p password

     db_name 鏄寚鏁版嵁搴撶殑鍚嶅瓧锛寀ser_name 鏄暟鎹簱鐢ㄦ埛鍚嶏紝 password鏄暟鎹簱瀵嗙爜

   6銆佺敤export瀵煎嚭鎸囧畾鐨勮〃鏁版嵁
     db2 "export to d:\data\tab1.ixf of ixf lobs to d:\data\ lobfile lobs modified by lobsinsepfiles  messages d:\data\tab1.msg select * from schema_name.table_name"
   schema_name 鏄〃鎵灞烇紝table_name鏄〃鍚嶏紝 lobsinsepfiles 鎴 lobsinfile 鏄敓鎴恖ob鏂囦欢 鍓嶄竴涓槸鐢熸垚姣忎釜锛屽悗闈㈡槸鐢熸垚鍒颁竴涓枃浠朵腑


   7銆佹墽琛宻ql鑴氭湰
    db2 -tvf d:\script.sql -z d:\script.log

    8銆佺敤db2move瀵煎叆鎵鏈夎〃鐨勬暟鎹
     db2move db_name import -io replace -u user_name -p password

    9銆佺敤import瀵煎叆鎸囧畾鐨勮〃鏁版嵁
      db2 "import from d:\data\tab1.ixf of ixf messages d:\data\tab1.msg insert into schema_name.table_name"

      DB2锛氭煡鐪嬭〃鐨勭储寮
select *  from SYSCAT.INDEXES  where TABNAME='琛ㄥ悕'

db2 "select  tabname  from syscat.indexes"

      浣跨敤璇彞db2 describe indexes for  table MOBILE.TFCREGISTERINF鍙互鏌ョ湅鍒拌〃绱㈠紩鎻忚堪
      鍒涘缓绱㈠紩
      CREATE INDEX JOB_BY_DPTON on EMPLOYEE (WORKDEPT, JOB)

      DB2绱㈠紩鍒涘缓閮藉簲璇ュ摢浜涘師鍒欏憿锛熻繖鏄緢澶氫汉閮芥彁鍒扮殑闂锛屼笅闈㈠氨涓烘偍璇︾粏浠嬬粛DB2绱㈠紩鍒涘缓鍘熷垯锛屼緵鎮ㄥ弬鑰冨涔犮

DB2绱㈠紩瀹炵幇鏄竴涓狟+鏍戯紝閫氳繃绱㈠紩鍙互瀹炵幇蹇熸煡璇紝閬垮厤鍏ㄨ〃鎵弿浠ユ鏉ュ噺灏慖O鎿嶄綔銆

绱㈠紩鏄琛ㄦ暟鎹殑涓绉嶆娊璞★紝閫氳繃鎶藉彇鏈夐檺鏁版嵁锛屽鏁版嵁鐨勫垎甯冭繘琛岃绠楋紝浠ユ鏉ュ畬鎴愬鏁版嵁鐨勫揩閫熸绱

绱㈠紩鍒涘缓璇彞

CREATE INDEX <INDEX_NAME> ON <TABLE_NAME> (<COLNAME1,COLNAME2鈥>)
鍒涘缓绱㈠紩闇瑕佹敞鎰忕殑鍦版柟锛

绱㈠紩搴旇鐢ㄦ潵鎻愰珮鏌ヨ閫熷害锛屼絾鏄細瀵规洿鏂板拰鍒犻櫎鎿嶄綔甯︽潵璐熼潰褰卞搷锛屽洜涓鸿鍚屾鏇存柊绱㈠紩銆傛墍浠ョ储寮曞簲璇ュ垱寤哄埌鏇存柊銆佸垹闄ょ浉瀵规瘮璇诲彇灏戠殑琛ㄤ笂銆

绱㈠紩闇瑕佺嫭绔嬬殑绌洪棿杩涜瀛樺偍鍜岀鐞嗐傜储寮曟槸闇瑕佺鐩樼┖闂存潵瀛樺偍銆傛墍浠ラ伩鍏嶉噸澶嶅垱寤哄啑浣欑储寮曘傚涓:

鈥淐REATE TABLE TEST_IDX (COL1 INT NOT NULL, COL2 INT NOT NULL, COL3 IN NOT NULL)鈥濃淐REATE INDEX TEST_IDX_IDX1 ON TEST_IDX (COL1, COL2, COL3)鈥
宸茬粡鏈夌储寮昑EST_IDX_IDX1鍦ㄤ笁涓垪涓婏紝鍦ㄥ垱寤衡滳REATE INDEX TEST_IDX_IDX2 ON TEST_IDX (COL1, COL2)鈥濓紝杩欐牱鐨勭储寮曚竴鑸病鏈変粈涔堜綔鐢ㄣ

绱㈠紩鐢ㄦ潵閬垮厤琛ㄦ壂鎻忋傞氳繃绱㈠紩瀵瑰ぇ閲忔暟鎹娊鍙栨湁闄愰儴鍒嗭紝褰㈡垚涓涓浉瀵瑰皯閲忕殑鏈夊簭鏁版嵁缁撴瀯锛岄氳繃瀵规湁搴忔暟鎹粨鏋勭殑鏌ユ壘鍙互蹇熸兂瑕佹煡鎵剧殑鏁版嵁銆傛墍浠ョ储寮曢傚悎寤虹珛鍦ㄦ暟鎹噺姣旇緝澶х殑琛ㄤ笂锛岃屼笖璇ヨ〃涓婄殑鏌ヨ缁忓父鏄牴鎹潯浠舵煡璇㈤儴鍒嗘暟鎹傛瘮濡備竴浜涚郴缁熷熀纭琛紝濡係YSTEM琛紝杩欎簺琛ㄦ暟鎹噺灏忥紝鑰屼笖缁忓父鏄煡璇㈠叏閮ㄦ暟鎹紝鎵浠ヨ繖浜涜〃涓婂缓绔嬬储寮曞鎬ц兘鐨勫奖鍝嶄笉鏄緢澶э紝瀹屽叏鍙互閬垮厤锛屼互鍏嶅绠＄悊閫犳垚褰卞搷銆

鍒涘缓绱㈠紩鐨勭洰鐨勮繕鏈変竴涓氨鏄繚璇佹暟鎹敮涓鎬э紝鍙互鍒╃敤鈥滳REATE UNIQUE INDEX <INDEX_NAME> ON <TABLENAME> (<COLNAME>)鈥濓紝鏉ュ畬鎴愩

涓婚敭浼氶殣寮忓垱寤虹储寮曪紝鎵浠ヨ涓嶈鍦ㄤ富閿笂鍒涘缓绱㈠紩娴垂绌洪棿銆

灏介噺鍑忓皯绱㈠紩鐨勫垱寤恒侱B2璺緞璁块棶浼樺寲鍣ㄤ細鏍规嵁琛ㄤ腑鎵鎻愪緵鐨勭储寮曟潵瀹屾垚灏藉彲鑳藉鐨勮闂矾寰勭殑鎴愭湰浼拌銆傚垱寤鸿繃澶氱殑绱㈠紩鎰忓懗鐫DB2浼樺寲鍣ㄧ敓鎴愭洿澶氱殑璁块棶璺緞锛屽畬鎴愭洿澶氱殑璁块棶璁″垝鎴愭湰浼扮畻锛岃繖浼氬鍔燬QL璇彞缂栬瘧鏃堕棿銆

鍒涘缓鍞竴绱㈠紩鍙互閬垮厤鎺掑簭銆傚洜涓虹储寮曟槸鏈夊簭鏁版嵁缁撴瀯锛屽湪杩涜鎵弿鏃讹紝DB2浼氶粯璁ゆ寜鐓ч『搴忚緭鍑虹粨鏋滐紝鑰屼笉鏄寜鐓ф彃鍏ュ厛鍚庛傞氳繃鍒涘缓鍞竴绱㈠紩鍙互閬垮厤鎺掑簭锛屾彁楂樻煡璇㈡ц兘銆

鍏锋湁澶ч噺閲嶅鏁版嵁鐨勫垪涓婁笉瑕佸垱寤虹储寮曘傚湪澶ч噺閲嶅鐨勫垪涓婂垱寤虹储寮曟病鏈変换浣曟剰涔夈傚涓嬫暟鎹粨鏋勶細琛ㄤ腑瀛楁col1鏈夊ぇ閲忛噸澶嶆暟鎹紝鍏朵腑鐨勬暟鎹垎甯冩槸鎸夌収90%鐨刌锛屽拰10%鐨凬鏉ュ垎甯冦傝繖鏍风殑鍒椾笂鍒涘缓绱㈠紩娌℃湁浠讳綍鎰忎箟銆傚湪鏌ヨ鏉′欢涓篶ol1=鈥榊鈥欐椂锛岃琛ㄧ殑绱㈠紩鎵弿鍜岃〃鎵弿娌℃湁鐗瑰ぇ宸紓銆傛牴鎹疄璺电粡楠岋紝鍒椾笂鐨勬暟鎹垎甯冨簲璇ュ潎鍖锛屽苟涓旀娊瀵嗗害涓嶈兘澶т簬5 鈥般

鍒涘缓濡備笅琛細

鈥淐REATE TABLE TEST1 (NO INT NOT NULL, NAME CHAR(5))鈥

鈥淐REATE INDEX TEST1_IDX_1 ON TEST1 (NO)鈥

鈥淚NSERT INTO TEST1 SELECT ROW_NUMBER() OVER(), CHR(INT(RAND()*75+48))||CHR(INT(RAND()*75+48))||CHR(INT(RAND()*75+48)) FROM SYSCAT.COLUMNS T1 JOIN SYSCAT.COLUMNS T2 ON T1.COLNAME!=T2.COLNAME FETCH FIRST 100 ROWS ONLY鈥

鈥淪ELECT * FROM TEST1 WHERE NO = 50鈥



DB2绱㈠紩浼樺寲
绱㈠紩铏界劧鑳藉澶уぇ鎻愬崌鏌ヨ鏁堢巼锛屼絾鏄苟涓嶆槸瀵规墍鏈夋煡璇㈤兘閫傜敤鐨勩傛瘮濡傚浜庘淪elect * From account where balance != 500鈥濊繖鏍风殑璇彞锛宐alance鍒椾笂鐨勭储寮曞熀鏈笂鏄棤鏁堢殑銆傦紙杩欐槸寰堝ソ鐞嗚В鐨勶紝鈥滀笉绛変簬鈥濆湪B+鏍戠储寮曚腑鎬庝箞鑳芥煡鎵惧憿锛燂級
鎴戜滑鎶婃煡璇㈣鍙ヤ腑Where鍚庨潰鐨勮〃杈惧紡绉颁负璋撹瘝銆侱B2涓皳璇嶈兘鍚︿娇鐢ㄧ储寮曠殑鎯呭喌鍒楄〃濡備笅锛


du -sh * 鏌ョ湅褰撳墠鐩綍涓嬫墍鏈夊瓙鐩綍鍜屾枃浠剁殑姹囨诲ぇ灏
鏅氱敤鎴蜂娇鐢╯udo鏉ユ墽琛宺oot鏉冮檺鐨勫懡浠

濡傦紝灏咹adoop鐢ㄦ埛娣诲姞鍒皊udoers鏂囦欢涓幓

 vi /etc/sudoers
1
2
1
2
root ALL=(ALL) ALL
hadoop ALL=(ALL) ALL
df -h 鏌ョ湅纾佺洏绌洪棿鐘舵佷俊鎭

free 鏌ョ湅鍐呭瓨浣跨敤鐘跺喌 鍚庨潰鍔犱釜m 灏辨槸甯︿釜鍗曚綅鎾

top 鏌ョ湅瀹炴椂鍒锋柊鐨勭郴缁熻繘绋嬩俊鎭

sudo vi /etc/sysconfig/network-scripts/ifcfg-eth0 淇敼璇ラ厤缃枃浠跺嵆鍙敼ip鍦板潃
鎴栬呭湪root鏉冮檺涓嬬敤setup鎸囦护閫氳繃涓涓甫鎻愮ず鐨勪吉鍥惧舰鐣岄潰鏉ヤ慨鏀
鏌ョ湅ip鍦板潃
ifconfig

sudo vi /etc/sysconfig/network 淇敼鍏朵腑鐨刪ostname閰嶇疆椤

绠＄悊鍐呯綉鐨勨濅富鏈哄悕鈥攊p鍦板潃鈥濇湰鍦版槧灏
sudo vi /etc/hosts

root鏉冮檺涓 service network restart
鍏抽棴闃茬伀澧欐湇鍔 service iptables stop
鍏抽棴闃茬伀澧欒嚜鍔ㄥ惎鍔 chkconfig iptables off

鏌ョ湅鎴戜滑绯荤粺涓湁鍝簺鏈嶅姟鍦ㄧ洃鍚摢浜涚鍙ｃ
netstat -nltp

淇敼绯荤粺鐨勯粯璁ゅ惎鍔ㄧ骇鍒
vi /etc/inittab

鐒跺悗淇敼鐜鍙橀噺 sudo vi /etc/profile
鍦ㄦ枃浠剁殑鏈鍚庢坊鍔犱互涓嬩袱琛

export JAVA_HOME=/usr/jdk1.7.0_65
export PATH=$PATH:$JAVA_HOME/bin
1
2
1
2
鐒跺悗 source /etc/profile 鏉ョ敓鏁

mysql

RPM杞欢鍖呭畨瑁

--yum install mysql 锛堢綉缁滃湪绾垮畨瑁咃級
1
1
1.鍙互缂栬瘧婧愮爜鏉ュ畨瑁
2.鐢╮edhat鍙戝竷鐨勪竴绉嶆爣鍑嗚蒋浠跺畨瑁呭寘杩涜瀹夎 RPM鍖
redhat 鍏徃鐨凴PM鏂瑰紡鐨勫寘绠＄悊 涔熸槸寰堝父鐢ㄧ殑杞欢鍖呯鐞嗗櫒

rpm -qa | grep MySQL
sudo rpm -e mysql-libs-5.1.66-2.el6_3.i686 鈥搉odeps
sudo rpm -ivh MySQL-server-5.1.73-1.glibc23.i386.rpm

service iptables status鍙互鏌ョ湅鍒癷ptables鏈嶅姟鐨勫綋鍓嶇姸鎬

涓 闃茬伀澧欓厤缃枃浠跺強鍛戒护
(I)Red Hat Linux绯荤粺
姝ょ被鍨嬬郴缁熷寘鎷瑀ed hat鐨勫悇绫昏鐢熷強鐩稿叧涓嶇増鏈紝鍖呮嫭RHEL銆丆entOS銆丗edora绛夌瓑銆
闃茬伀澧欓厤缃枃浠讹細 /etc/sysconfig/iptables
鏈嶅姟鎿嶄綔鍛戒护 锛 /etc/init.d/iptables service iptables {start|stop...}
涓存椂鏀瑰彉鍛戒护 锛 iptables iptables-save iptables-restore绛
























ssh-keygen
ssh-copy-id xqw@10.135.0.179
vim .ssh/config
git remote add --mirror=push g1 ssh://10.135.0.179:/home/xqw/gznx.git
git push g1
vim .git/config
ssh 10.135.0.179
chmod 700 config


git log 鏈夎澶氶夐」鍙互甯姪浣犳悳瀵绘劅鍏磋叮鐨勬彁浜わ紝鎺ヤ笅鏉ユ垜浠粙缁嶄簺鏈甯哥敤鐨勩

鎴戜滑甯哥敤 -p 閫夐」灞曞紑鏄剧ず姣忔鎻愪氦鐨勫唴瀹瑰樊寮傦紝鐢 -2 鍒欎粎鏄剧ず鏈杩戠殑涓ゆ鏇存柊锛

$ git log -p -2

鍦ㄥ仛浠ｇ爜瀹℃煡锛屾垨鑰呰蹇熸祻瑙堝叾浠栧崗浣滆呮彁浜ょ殑鏇存柊閮戒綔浜嗗摢浜涙敼鍔ㄦ椂锛屽氨鍙互鐢ㄨ繖涓夐」銆傛澶栵紝杩樻湁璁稿鎽樿閫夐」鍙互鐢紝姣斿 --stat锛屼粎鏄剧ず绠瑕佺殑澧炴敼琛屾暟缁熻锛

$ git log --stat

姣忎釜鎻愪氦閮藉垪鍑轰簡淇敼杩囩殑鏂囦欢锛屼互鍙婂叾涓坊鍔犲拰绉婚櫎鐨勮鏁帮紝骞跺湪鏈鍚庡垪鍑烘墍鏈夊鍑忚鏁板皬璁°傝繕鏈変釜甯哥敤鐨 --pretty 閫夐」锛屽彲浠ユ寚瀹氫娇鐢ㄥ畬鍏ㄤ笉鍚屼簬榛樿鏍煎紡鐨勬柟寮忓睍绀烘彁浜ゅ巻鍙层傛瘮濡傜敤oneline 灏 姣忎釜鎻愪氦 鏀惧湪涓琛屾樉绀猴紝杩欏湪鎻愪氦鏁板緢澶ф椂闈炲父鏈夌敤銆傚彟澶栬繕鏈塻hort锛宖ull 鍜宖uller 鍙互鐢紝灞曠ず鐨勪俊鎭垨澶氭垨灏戞湁浜涗笉鍚岋紝璇疯嚜宸卞姩鎵嬪疄璺典竴涓嬬湅鐪嬫晥鏋滃浣曘

$ git log --pretty=oneline
ca82a6dff817ec66f44342007202690a93763949 changed the version number
085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test code
a11bef06a3f659402fe7563abf99ad00de2209e6 first commit
浣嗘渶鏈夋剰鎬濈殑鏄 format锛屽彲浠ュ畾鍒惰鏄剧ず鐨勮褰曟牸寮忥紝杩欐牱鐨勮緭鍑轰究浜庡悗鏈熺紪绋嬫彁鍙栧垎鏋愶紝鍍忚繖鏍凤細

$ git log --pretty=format:"%h - %an, %ar : %s"
ca82a6d - Scott Chacon, 11 months ago : changed the version number
085bb3b - Scott Chacon, 11 months ago : removed unnecessary test code
a11bef0 - Scott Chacon, 11 months ago : first commit
琛 2-1 鍒楀嚭浜嗗父鐢ㄧ殑鏍煎紡鍗犱綅绗﹀啓娉曞強鍏朵唬琛ㄧ殑鎰忎箟銆

閫夐」	 璇存槑
%H	鎻愪氦瀵硅薄锛坈ommit锛夌殑瀹屾暣鍝堝笇瀛椾覆
%h	鎻愪氦瀵硅薄鐨勭畝鐭搱甯屽瓧涓
%T	鏍戝璞★紙tree锛夌殑瀹屾暣鍝堝笇瀛椾覆
%t	鏍戝璞＄殑绠鐭搱甯屽瓧涓
%P	鐖跺璞★紙parent锛夌殑瀹屾暣鍝堝笇瀛椾覆
%p	鐖跺璞＄殑绠鐭搱甯屽瓧涓
%an	浣滆咃紙author锛夌殑鍚嶅瓧
%ae	浣滆呯殑鐢靛瓙閭欢鍦板潃
%ad	浣滆呬慨璁㈡棩鏈燂紙鍙互鐢 -date= 閫夐」瀹氬埗鏍煎紡锛
%ar	浣滆呬慨璁㈡棩鏈燂紝鎸夊涔呬互鍓嶇殑鏂瑰紡鏄剧ず
%cn	鎻愪氦鑰(committer)鐨勫悕瀛
%ce	鎻愪氦鑰呯殑鐢靛瓙閭欢鍦板潃
%cd	鎻愪氦鏃ユ湡
%cr	鎻愪氦鏃ユ湡锛屾寜澶氫箙浠ュ墠鐨勬柟寮忔樉绀
%s	鎻愪氦璇存槑
浣犱竴瀹氬鎬猒浣滆咃紙author锛塤鍜宊鎻愪氦鑰咃紙committer锛塤涔嬮棿绌剁珶鏈変綍宸埆锛屽叾瀹炰綔鑰呮寚鐨勬槸瀹為檯浣滃嚭淇敼鐨勪汉锛屾彁浜よ呮寚鐨勬槸鏈鍚庡皢姝ゅ伐浣滄垚鏋滄彁浜ゅ埌浠撳簱鐨勪汉銆傛墍浠ワ紝褰撲綘涓烘煇涓」鐩彂甯冭ˉ涓侊紝鐒跺悗鏌愪釜鏍稿績鎴愬憳灏嗕綘鐨勮ˉ涓佸苟鍏ラ」鐩椂锛屼綘灏辨槸浣滆咃紝鑰岄偅涓牳蹇冩垚鍛樺氨鏄彁浜よ呫傛垜浠細鍦ㄧ浜旂珷鍐嶈缁嗕粙缁嶄袱鑰呬箣闂寸殑缁嗗井宸埆銆

鐢 oneline 鎴 format 鏃剁粨鍚 --graph 閫夐」锛屽彲浠ョ湅鍒板紑澶村鍑轰竴浜 ASCII 瀛楃涓茶〃绀虹殑绠鍗曞浘褰紝褰㈣薄鍦板睍绀轰簡姣忎釜鎻愪氦鎵鍦ㄧ殑鍒嗘敮鍙婂叾鍒嗗寲琛嶅悎鎯呭喌銆傚湪鎴戜滑涔嬪墠鎻愬埌鐨 Grit 椤圭洰浠撳簱涓彲浠ョ湅鍒帮細

銆乬it-svn clone svn_repository
2銆佷慨鏀规湰鍦颁唬鐮侊紝浣跨敤git add/commit灏嗕慨鏀规彁浜ゅ埌鏈湴git搴
3銆佸畾鏈熶娇鐢╣it-svn rebase鑾峰彇涓績svn repository鐨勬洿鏂
4銆佷娇鐢╣it-svn dcommit鍛戒护灏嗘湰鍦癵it搴撶殑淇敼鍚屾鍒颁腑蹇僺vn搴

1.鍒濆鍖栦粨搴
鍒濆鍖栦粨搴撴湁涓ょ鎯呭喌锛屼竴绉嶆槸鐩存帴鍦ㄤ竴涓┖鐩綍閲屽缓绔嬩竴涓」鐩紝杩欐椂鍊欎綘鍙互杩欐牱骞诧細
git init
鍙︿竴绉嶆槸浠庡叾浠栨満鍣ㄥ鍒朵竴涓粨搴擄紝姣斿杩欐牱锛
git clone git://git2.kernel.org/pub/scm/git/git.git (杩滅▼浠撳簱)
git clone https://github.com/jQuery/jquery.git (杩滅▼浠撳簱)
git clone git@github.com:wengpingbo/MicroBlog.git (杩滅▼浠撳簱)
git clone /home/oss/test.git (鏈湴浠撳簱)
绗竴娆′粠鏈嶅姟鍣ㄤ笂澶嶅埗涓涓粨搴擄紝鍙兘姣旇緝鎱紝鍥犱负git瑕佹妸鎵鏈夌殑鍘嗗彶璁板綍鍜岀増鏈叏閮ㄥ鍒朵笅鏉ワ紝杩欎篃绠梘it鐨勪竴涓紛绔惂锛
澶嶅埗瀹屽悗锛屽氨浼氬湪褰撳墠鐩綍涓嬬敓鎴愪竴涓伐浣滅洰褰曪紝鍚嶅瓧浠ヤ粨搴撳悕瀛楀懡鍚嶃傚鏋滀綘涓嶆兂鎸囧畾鐩綍锛岄偅灏卞湪涓婇潰鐨勫懡浠ゅ悗鍔犱竴涓洰褰曞氨ok浜嗐傛瘮濡傛垜鎯虫妸test浠撳簱鏀惧埌oss浠撳簱涓細git clone /home/oss/test.git oss
涔嬪悗锛屼綘灏卞彲浠ュ紑濮嬩綘鐨勫伐浣滃暒锛
2.娣诲姞鏂囦欢
鍦ㄧ紪杈戜簡鍑犱釜鏂囨。涔嬪悗锛屼綘鍙兘绐佺劧鎯宠捣鏉ワ紝濂藉儚鏂囦欢杩樻病鏈夎git璺熻釜銆侴it骞朵笉浼氬疄鏃剁殑璺熻釜浣犵殑鏂囦欢锛屽彧鍦ㄤ綘鏄庣‘璁╁畠璁板綍浣犵殑鏂囦欢鏃讹紝瀹冩墠浼氭妸鎸囧畾鐨勬枃浠剁殑褰撳墠鐘舵佽褰曞埌浠撳簱涓幓锛岀劧鍚庡張鎾掓墜涓嶇浜嗐傛垜鎯宠繖灏辨槸璇磄it绗ㄧ殑鍘熷洜鍚с傝繖涓椂鍊欙紝浣犻渶瑕佹墜鍔ㄦ坊鍔犱綘鐨勬枃浠跺綋鏆傚瓨鍖哄煙锛
git add filename1 filename2
濡傛灉浣犳噿寰椾竴涓竴涓姞锛屼綘鍙互璇曡瘯杩欎釜锛
git add -A
瀹冧細鎶婂綋鍓嶇洰褰曚笅鎵鏈夌殑鏂囦欢閮芥坊鍔犲埌鏆傚瓨鍖哄煙銆
3.娣诲姞涓涓増鏈
鍦ㄦ坊鍔犲畬鏂囦欢鍚庯紝浣犲彲鑳借寰楀簲璇ュ垱寤轰竴涓猚ommit浜嗐
git commit
鎬庝箞鏍凤紵鏄笉鏄湁鐐逛笉瀵瑰姴锛屽ソ鍍忚繖涓懡浠ゅ苟娌℃湁鎸変綘鎯宠薄鐨勯偅鏍疯烦鍑轰竴涓彁浜ゆ垚鍔熺殑鎻愮ず锛岃屾槸鐩存帴璺戝埌浜嗕綘鍦ㄩ厤缃腑鎸囧畾鐨勭紪杈戝櫒涓簡銆備粩缁嗙湅涓涓嬶紝鍘熸潵鏄浣犵粰杩欎釜鐗堟湰鍋氫竴浜涘娉紝闅忎究鍐欑偣浠涔堬紝鐒跺悗淇濆瓨閫鍑哄氨ok浜嗐傚鏋滀綘涓嶆兂杩欎箞楹荤儲锛屽彲浠ヨ繖涔堝共锛
git commit -m 鈥榠nitial version鈥
鍙兘浣犺寰椾箣鍓嶈鐨勫お缃楀棪浜嗭紝鎻愪氦涓涓猚ommit杩樿繖涔堥夯鐑︼紝鍏跺疄鏈変竴涓嵎寰勫彲浠ヤ娇浣犺烦杩囨坊鍔犳枃浠惰繖涓繃绋嬶細
git commit -a -m 鈥榠nitial version鈥
澶у姛鍛婃垚锛岃繖涓懡浠や細鎶婁箣鍓嶆墍鏈夌殑宸茬粡娣诲姞鐨勬枃浠堕兘鍔犲叆鍒拌繖涓増鏈腑銆
鍙兘浣犲張鏈夌枒闂簡锛屼箣鍓嶆坊鍔犵殑鏂囦欢涓嶆槸鑷姩浼氬姞鍏ュ埌涓嬩竴涓増鏈腑鍚楋紝闂粈涔堣繕鍔犺繖涓-a鍙傛暟锛
鍏跺疄git add鍛戒护鍙槸鎶婃寚瀹氭枃浠剁殑褰撳墠鐘舵佹坊鍔犲埌鏆傚瓨鍖哄煙锛屽苟涓嶄唬琛ㄤ竴涓枃浠朵竴鏃︽坊鍔狅紝灏变細涓鐩村瓨鍦ㄦ瘡涓増鏈腑銆傚鏋滀綘娣诲姞涓涓枃浠跺悗瀵硅繖涓張杩涜浜嗕慨鏀癸紝鍦ㄤ綘commit鏃跺欙紝鍙細commit杩欎釜鏂囦欢娣诲姞鏃剁殑鐘舵侊紝涓嶄細鎶婁箣鍚庣殑淇敼涔焎ommit杩涘幓锛岄櫎闈炰綘鍐嶆娣诲姞銆
4.鎺ㄩ佸彉鏇
鍦ㄤ綘commit瀹屼箣鍚庯紝浣犲彲鑳芥兂鎶婅嚜宸辩殑浠ｇ爜鎻愪氦鍒癵ithub鎴栬呭叾浠杇it鏈嶅姟鍣ㄤ笂锛屼笌浠栦汉浜ゆ祦鍏变韩锛岃繖鏃跺欏氨闇瑕佸拰杩滅▼鏈嶅姟鍣ㄦ墦浜ら亾浜嗐
濡傛灉浣犳槸鍦ㄦ湰鍦板缓绔嬭捣鐨勪粨搴擄紝榛樿鎯呭喌涓嬫槸娌℃湁浠讳綍鏈嶅姟鍣ㄥ湴鍧鐨勶紝濡傛灉浣犳槸浠庡叾浠栨湇鍔″櫒澶嶅埗杩囨潵鐨勪粨搴擄紝杩欎釜鏈嶅姟鍣ㄥ湴鍧浼氳嚜鍔ㄦ坊鍔犲埌浣犵殑浠撳簱涓紝浣犲彲浠ヨ繖鏍锋煡鐪嬶細
git remote -v
濡傛灉鍙緭鍏モ漡it remote鈥濓紝灏卞彧浼氬垪鍑烘湇鍔″櫒绔殑鍒悕锛屼笉浼氬垪鍑哄湴鍧鏉ャ
涓涓粨搴撳彲浠ユ湁澶氫釜鏈嶅姟鍣ㄥ湴鍧锛岃繖灏辨剰鍛崇潃锛屼綘鍙互浠庝笉鍚岀殑浜烘墜涓鍒跺悓涓涓粨搴擄紝浣嗚繖骞朵笉浼氭墦涔变綘鑷繁鐨勫垎鏀紝鍝曞弻鏂圭殑鍒嗘敮鍚嶅瓧閮戒竴鏍枫傚亣濡備綘鐜板湪鍦ㄥ拰鍙﹀涓や釜浜哄仛鍚屼竴涓」鐩腑鐨勫悓涓涓垎鏀紝浣犲彂鐜癆鐨勪竴涓ā鍧楁鏄綘鎯宠鐨勶紝浣犳兂鎶婁粬鐨勪唬鐮佸悎骞跺埌浣犵幇鍦ㄧ殑鐗堟湰涓紝杩欐椂鍊欎綘鍙互杩欐牱鍋氾細
git remote add code_a git://url/test.git  //娣诲姞瀵规柟鐨勫湴鍧,code_a鏄埆鍚
git fetch code_a  //澶嶅埗瀵规柟鐨勪粨搴撳埌鏈湴锛屼絾涓嶅悎骞讹紝git pull浼氳嚜鍔ㄥ悎骞
git merge code_a/master //鎶婂鏂筸aster鍒嗘敮鍚堝苟鍒拌嚜宸卞綋鍓嶇増鏈笅
鍚堝苟瀹屼箣鍚庯紝浣犲彲鑳芥兂鎻愪氦浣犵殑浠ｇ爜鍒板叾浠栫殑鏈嶅姟鍣ㄤ笂锛岃繖鏃跺欎綘鍙互鍏堟妸瑕佹彁浜ょ殑鏈嶅姟鍣ㄥ湴鍧娣诲姞杩涙潵锛岀劧鍚庤繖鏍峰仛锛
git push origin master
涓婇潰鐨勫懡浠ゅ氨鏄妸鑷繁master鐨勫垎鏀彁浜ゅ埌鍚嶅瓧涓簅rigin鐨勬湇鍔″櫒涓
5.鍒涘缓骞剁鐞嗗垎鏀
鍦ㄥ仛椤圭洰鐨勬椂鍊欙紝浣犲彲鑳戒細鎯冲啓涓浜涙墿灞曟х殑鍔熻兘锛屾垨鑰呭仛涓浜涘皬瀹為獙锛屼絾鏄綘鍙堜笉鎯冲奖鍝嶄綘鐜板湪鐨勯」鐩傝繖鏃跺欙紝浣犲彲浠ュ垱寤轰竴涓垎鏀紝鐒跺悗鍦ㄨ繖涓垎鏀噷鍐欎笢瑗匡紝褰撹寰椾笉濂界殑鏃跺欙紝浣犲彲浠ユ妸杩欎釜鍒嗘敮鍒犻櫎鎺夛紝瀵逛綘涔嬪墠鐨勪富鍒嗘敮娌℃湁浠讳綍褰卞搷銆傛垨鑰呬綘瑙夊緱杩欎釜鏂扮壒鎬ц秴鍑轰簡鑷繁鐨勯鎯筹紝鍙互鍚堝苟鍒颁富鍒嗘敮閲岋紝杩欐椂鍊欎綘鍙鎶婂伐浣滆浆鍥炰富鍒嗘敮锛岀劧鍚庡悎骞跺垎鏀紝鏈鍚庡垹闄ゅ垎鏀紝鐒跺悗灏辫窡閭ｄ釜鍒嗘敮娌″垱寤轰竴鏍枫傚叿浣撴搷浣滃涓嬶細
git branch test  //鍒涘缓涓涓猼est鍒嗘敮
git checkout test  //杞埌test鍒嗘敮
edit something...commit something...
git checkout master  //杞埌master鍒嗘敮
git merge test  //鍚堝苟test鍒嗘敮
git checkout -b test2  //鍒涘缓test2鍒嗘敮锛屽苟杞埌test2鍒嗘敮
git branch -d test //鍒犻櫎test鍒嗘敮
git branch  //鍒楀嚭鍒嗘敮鍒楄〃
git branch -v  //鍒楀嚭鍒嗘敮鍒楄〃鍜屽綋鍓峜ommit
Git merge鐨勫疄璐ㄦ槸鎶婁袱涓増鏈悎鍦ㄤ竴璧凤紝鐒跺悗鍦ㄥ綋鍓嶅垎鏀垱寤轰竴涓柊鐨刢ommit锛屽鏋滀綘鍦ㄤ袱涓垎鏀殑鍚屼竴涓枃浠剁殑鍚屼竴涓湴鏂归兘鍋氫簡淇敼锛岃繖鏃跺檓erge灏变細澶辫触锛実it灏变笉浼氳嚜鍔ㄥ垱寤轰竴涓柊鐨刢ommit锛岃屾槸鐩存帴鍋滀綇銆備綘闇瑕佹墜鍔ㄤ慨鏀硅繖浜涘啿绐佺殑鏂囦欢锛岄夋嫨杩欎袱涓垎鏀腑鐨勪竴涓増鏈紝鎴栬呰嚜宸遍噸鍐欒繖涓儴鍒嗭紝鐒跺悗鎵嬪姩娣诲姞杩欎簺鏂囦欢鍒版殏瀛樺尯鍩燂紝鍐峜ommit涓涓嬪氨ok浜嗐傝鏌ョ湅鍝簺鏂囦欢鍐茬獊浜嗭紝鍙互鐢ㄢ漡it status鈥濇煡鐪嬨
6.鎾ゆ秷鏀瑰姩
鏄汉灏变細鐘敊銆傚綋浣犳墽琛屾煇涓懡浠や箣鍚庯紝绐佺劧鍙戠幇锛岃嚜宸卞啓閿欎簡锛屾垨鑰呮紡浜嗕竴涓枃浠讹紝杩欐椂鍊欐庝箞鍔烇紵
濡傛灉浣犳彁浜ゅ緱澶棭锛屽繕浜嗘坊鍔犳煇浜涙枃浠讹紝浣犲彲浠ヨ繖鏍峰仛锛
git commit -m 鈥榓dd something 鈥
git add file1
git commit --amend
鏈鍚庝竴涓懡浠や細鎶婁綘褰撳墠鏆傚瓨鍖哄煙鏈涓轰笂涓娆＄殑commit銆傚鏋滀綘commit浠ュ悗锛岄┈涓奱mend锛岃繖鏃跺檊it浼氱洿鎺ヨ烦鍒扮紪杈慶ommit澶囨敞閲岄潰锛岃繖鏍蜂綘鍙互淇敼浣犱笂娆ommit鐨勫娉ㄣ
濡傛灉浣犳坊鍔犱簡涓嶈娣诲姞鐨勬枃浠讹紝浣犲彲浠ヨ繖鏍锋尳鍥烇細
git add . //鎶婃墍鏈夌殑鏂囦欢閮芥坊鍔犺繘鍘
git reset HEAD readme  //鎶妑eadme鏂囦欢浠庢殏瀛樺尯鍩熷幓闄
濡傛灉浣犲彂鐜颁綘缂栬緫閿欎簡涓涓枃浠讹紝浣犳兂鎶婂畠鎭㈠鍒颁笂涓涓増鏈殑鐘舵侊紝杩欐椂鍊欎綘鍙互杩欐牱锛
git checkout -- filename1 //鍙挙娑堣繖涓涓枃浠
濡傛灉浣犺寰楄繖涓増鏈碂绯曢忎簡锛屾兂瀹屽叏鍥炴粴鍒颁笂涓涓増鏈紝浣犲彲浠ュ共濡備笅浜嬫儏锛
git reset --hard HEAD^
HEAD鏄寚鍚戝綋鍓嶇増鏈紝^鎸囧綋鍓嶇増鏈殑鐖剁増鏈紝杩欎釜鎿嶄綔鏃犳硶鎾ゆ秷銆備綘鍙互鎶--hard鎹㈡垚--soft锛岃繖鍙細鍥為commit淇℃伅銆傝繕鏈変竴涓--mixed榛樿閫夐」锛屽ぇ瀹跺彲浠ュ弬鑰冨畼鏂规枃妗ｏ紝鏌ョ湅杩3涓夐」鐨勫叿浣撳尯鍒
6銆丟IT甯哥敤鍛戒护
Git add
Git clone
Git commit
Git push
Git checkout
Git reset
Git pull
Git status
Git branch
//advanced
Git tag
Git log
Git merge
.鐢ㄧ鐞嗗憳鏂瑰紡鎵撳紑cmd

2.棣栧厛閫氳繃pip鍛戒护瀹夎wheel
濡傛灉鎻愮ず鈥檖ip鈥欎笉鏄唴閮ㄦ垨澶栭儴鍛戒护锛屼篃涓嶆槸鍙繍琛岀殑绋嬪簭鎴栨壒澶勭悊鏂囦欢

鈶犲皢python瀹夎鐩綍涓嬬殑scripts鐩綍锛堜緥濡侱:\Python27\Scripts锛夋坊鍔犲埌绯荤粺鐜鍙橀噺path閲岋紝娉ㄦ剰鍓嶅姞鍒嗗彿銆傚啀鎵ц璇ュ懡浠

pip install wheel

鈶″湪cmd涓嬭繘鍏ュ埌D:\Python27\Scripts鐩綍涓嬫墽琛岃鍛戒护

pip install wheel
3.瀹夎whl鏂囦欢

鈶犲鏋滃皢D:\Python27\Scripts鐩綍娣诲姞鍒皃ath涓紝鍙互鐩存帴鍦╳hl鏂囦欢鎵鍦ㄧ洰褰曠敤绠＄悊鍛樻墦寮涓涓猚md绐楀彛锛岀洿鎺ユ墽琛屼笅闈㈢殑璇彞銆

pip install python_dateutil-2.5.3-py2.py3-none-any.whl

鈶″惁鍒欑殑璇濓紝闇瑕佸湪D:\Python27\Scripts鐩綍涓嬬敤绠＄悊鍛樻墦寮cmd锛岃繍琛宲ip鍛戒护锛屾枃浠跺悕搴旇鍐欏叏璺緞锛

pip install C:\Users\xxx\Downloads\python_dateutil-2.5.3-py2.py3-none-any.whl

濡傛灉浣跨敤python鐨勪富瑕佺洰鐨勬槸涓轰簡杩涜绉戝璁＄畻銆佹暟鎹垎鏋愩佺埇铏瓑椤圭洰锛屽己鐑堟帹鑽愪娇鐢ˋnaconda鑰屼笉鏄叾浠朓DE銆
Anaconda鍦╬ython璇█澶栵紝杩橀泦鎴愪簡numpy銆乻cipy銆乵atplotlib绛夌瀛﹁绠楀寘锛屼互鍙奲eautiful-soup銆乺equests銆乴xml绛夌綉缁滅浉鍏冲寘銆
瀹夎Anaconda鍚庯紝鍩烘湰涓嶅啀闇瑕佽垂鍔插湴瀹夎鍏朵粬绗笁鏂瑰簱浜嗐
Windows涓嬪畨瑁卲ython鐨剆cipy绛夌瀛﹁绠楀寘
END
濡傛灉涓瀹氳姝荤
涓涓熀鏈彲浠ュ簲鐢ㄥ埌鍏朵粬IDE銆佸叾浠栫涓夋柟搴撶殑閫氱敤瀹夎鏂规硶濡備笅锛
棣栧厛锛岀‘淇濆湪pip澶栵紝杩樺畨瑁呬簡wheel搴撱傚鏋滄病鏈夛細鎵撳紑cmd锛岃緭鍏ip install wheel杩涜瀹夎銆
Windows涓嬪畨瑁卲ython鐨剆cipy绛夌瀛﹁绠楀寘
姝ゆ柟娉曢氳繃浜岃繘鍒舵枃浠跺畨瑁呯涓夋柟搴擄紝闇瑕佸湪瀹夎鍓嶇‘瀹氬ソ鑳藉瀹夎鐨勭増鏈
纭鏂规硶濡備笅锛
鍦╟md涓紝杈撳叆python杩涘叆python锛堜篃鍙湪IDE涓繘琛岋級銆
鐒跺悗杈撳叆import pip;print(pip.pep425tags.get_supported())锛岀晫闈笂杈撳嚭褰撳墠python鐨勭増鏈俊鎭紝濡傚浘銆
Windows涓嬪畨瑁卲ython鐨剆cipy绛夌瀛﹁绠楀寘
鍦╳ww.lfd.uci.edu/%7Egohlke/pythonlibs/涓婃壘鍒扮浉搴旂殑whl鏂囦欢锛屼笅杞藉埌鏈湴銆傛敞鎰忎笂鍥句腑鏍囨敞鐨勭増鏈俊鎭紝搴斾粠缃戦〉涓婁笅杞藉搴旂殑鐗堟湰涓猴細XXXX-cp35-cp35m-win_amd64.whl
鍦ㄦ澶勶紝scipy瀵瑰簲鐨勫畨瑁呭寘涓簊cipy?0.18.1?cp35?cp35m?win_amd64.whl锛堣鏇挎崲涓轰綘鐨勫彲瀹夎鐗堟湰锛夈傛敞鎰忥紝scipy渚濊禆浜巒umpy+mkl锛屽畨瑁卻cipy鍓嶉渶瑕佸厛瀹夎濂絥umpy+mkl銆
Windows涓嬪畨瑁卲ython鐨剆cipy绛夌瀛﹁绠楀寘
鍗充娇浣犲湪姝ゅ墠宸茬粡瀹夎杩噉umpy锛屼篃璇蜂粠璇ラ〉闈腑鎵惧埌numpy+mkl鐨剋hl锛屼笅杞藉埌鏈湴锛屽洜涓洪噸鐐瑰湪浜巑kl鑰屼笉鏄痭umpy銆
Windows涓嬪畨瑁卲ython鐨剆cipy绛夌瀛﹁绠楀寘
閫氳繃whl瀹夎搴撶殑鏂规硶濡備笅锛
杩涘叆whl鏂囦欢涓嬭浇鍒扮殑鏂囦欢澶逛綅缃紝鎸変綇shift閿殑鍚屾椂锛岀偣鍑婚紶鏍囧彸閿紝鍦ㄥ脊鍑鸿彍鍗曚腑閫夋嫨鈥滃湪姝ゅ鎵撳紑鍛戒护绐楀彛鈥濄
鍦ㄦ墦寮鐨勫懡浠ょ獥鍙ｄ腑锛岃緭鍏ip install +whl鏂囦欢鐨勫叏鍚嶏紝瀹夎whl銆
瀹夎numpy+mkl锛岃緭鍏ip install numpy?1.12.0b1+mkl?cp35?cp35m?win_amd64.whl锛屾寜Enter鍚庯紝绛夊緟瀹夎瀹屾垚銆傦紙娉ㄦ剰灏嗘枃浠跺悕鏇挎崲涓轰綘鐨勫彲鐢ㄧ増鏈殑鍚嶇О锛
Windows涓嬪畨瑁卲ython鐨剆cipy绛夌瀛﹁绠楀寘
瀹夎scipy锛岃緭鍏ip install scipy?0.18.1?cp35?cp35m?win_amd64.whl锛屾寜Enter鍚庯紝绛夊緟瀹夎瀹屾垚銆傦紙娉ㄦ剰灏嗘枃浠跺悕鏇挎崲涓轰綘鐨勫彲鐢ㄧ増鏈殑鍚嶇О锛
Windows涓嬪畨瑁卲ython鐨剆cipy绛夌瀛﹁绠楀寘
杩涘叆python锛岃緭鍏mport scipy锛屾湭鎶ラ敊锛屽嵆琛ㄧず瀹夎鎴愬姛銆
Windows涓嬪畨瑁卲ython鐨剆cipy绛夌瀛﹁绠楀寘

涓夈 Git甯哥敤鍛戒护
锛1锛塯it branch 銆鏌ョ湅鏈湴鍒嗘敮

锛2锛塯it branch -a  銆銆銆銆  鏌ョ湅杩滅▼鍒嗘敮

锛3锛塯it checkout  branchname       鍒囨崲鍒嗘敮

锛4锛塯it add銆yourfile

锛5锛塯it commit -a -m "鎻忚堪"銆銆    鎻愪氦浣犲綋鍓嶅紑鍙戝埌鏆傚瓨鍖猴紝鍙互鐞嗚В涓轰綘鏈湴鐨凣IT搴

锛6锛塯it pull銆  鏇存柊锛屽鏋滃嚑涓汉鍚屾椂鍦ㄤ竴涓垎鏋濅笂寮鍙戯紝鍙兘浼氶犳垚涓嶅悓姝ワ紝閫犳垚鑷繁鏈湴鐨凣IT搴撹惤鍚庢垨鎻愬墠杩滅▼GIT搴擄紝杩欐椂鍊欏氨瑕佹洿鏂拌嚜宸辨湰鍦扮殑搴撱

锛7锛塯it push銆鎻愪氦锛屽皢鑷繁寮鍙戠殑浠ｇ爜鎻愪氦鍒板搴旂殑杩滅▼鍒嗕箣涓婂幓

锛8锛塯it status  鏌ョ湅宸ヤ綔鍖虹姸鎬侊紝鍙婃煡鐪嬪湪姝ゅ垎鏀笂杩涜浜嗛偅浜涙搷浣

锛9锛塯it log銆銆鏌ョ湅鎿嶄綔鏃ュ織锛岃繕鏄尯鏈夌敤鐨

锛10锛塯it merge 鍚堝苟鍒嗘敮锛岃嚜宸卞紑鍙戠殑妯″潡鏈缁堣鍚堝苟鍒伴」鐩殑鎬诲垎鏋濅笂鍘伙紝杩欐槸瑕佸厛鍒囨崲鍒伴」鐩诲垎鏀紝鐒跺悗 git merge 鑷繁鐨勫垎鏀

锛11锛塯it branch -d/D   yourbranch  鍒犻櫎鏈湴鍒嗘敮

锛12锛塯it push origin :yourbranch    鍒犻櫎杩滅▼鍒嗘敮


ubuntu绯荤粺锛屼娇鐢╝pt-get install git鍗冲彲瀹夎

centos  yum install git

2. 璁剧疆Git

鍦ㄨ兘澶熶娇鐢℅it杩涜宸ヤ綔涔嬪墠锛屾垜浠渶瑕佽繘琛屼竴娆℃х殑閰嶇疆銆備负浜嗚兘璁〨it鑳藉璺熻釜璋佸仛浜嗕慨鏀癸紝鎴戜滑闇瑕佽缃綘鐨勭敤鎴峰悕銆

git config --global user.name "bear2flymoon"

git config --global user.email bear2flymoon@gmail.com

杩欓噷鎴戠殑鐢ㄦ埛鍚嶅氨璁剧疆涓猴細bear2flymoon

閭涓猴細bear2flymoon@gmail.com(璋锋瓕琚锛屾棤娉曠櫥闄)



3. 鍒涘缓涓涓湰鍦颁唬鐮佸簱

鍋囪鎴戜滑鐨勪唬鐮佸啓鍦ㄦ満鍣ㄧ殑/home/bear2flymoon鏂囦欢澶逛笅鐨勨檛est'鏂囦欢澶瑰唴銆傚湪鍛戒护琛岃緭鍏ヤ笅鍒楀懡浠わ細

cd /home/bear2flymoon/test/

涓嬮潰锛屾垜浠渶瑕佸憡璇塆it杩欎釜鏂囦欢澶规槸鎴戜滑闇瑕佽窡韪殑椤圭洰銆傛墍浠ユ垜浠湪璇ョ洰褰曚笅杈撳叆浠ヤ笅鍛戒护鏉ュ垵濮嬪寲涓涓柊鐨勬湰鍦癎it浠ｇ爜搴

git init

Git浼氬湪test鏂囦欢澶逛笅鍒涘缓涓涓悕涓.git鐨勯殣钘忔枃浠跺す锛岃繖灏辨槸浣犵殑鏈湴浠ｇ爜搴撱



4. 鏆傚瓨锛坰tage)鏂囦欢

鎴戜滑闇瑕佹殏瀛(stage)test鏂囦欢澶逛笅鎵鏈夐」鐩枃浠讹紝杈撳叆浠ヤ笅鍛戒护:

git add .

鏈鍚庣殑鈥.鈥濈鍙风殑鎰忔濇槸鈥滄墍鏈夋枃浠躲佹枃浠跺す鍜屽瓙鏂囦欢澶光濄傚亣濡傛垜浠彧闇瑕佹妸鐗瑰畾鏂囦欢娣诲姞鍒版簮浠ｇ爜鎺у埗涓幓锛屾垜浠彲浠ユ寚瀹氬畠浠細

git add my_file,my_other_file



5. 鎻愪氦鏂囦欢

鐜板湪锛屾垜浠兂瑕佹彁浜ゅ凡缁忔殏瀛橈紙staged锛夌殑鏂囦欢銆傛垜浠彁浜ゆ垜浠殑鏂囦欢鏃讹紝鎬绘槸闄勫甫鐫鏈夋剰涔夌殑娉ㄩ噴锛屾弿杩板畠浠幇鍦ㄧ殑鐘舵併傛垜涓鐩寸敤鈥渋nitial commit"鏉ユ弿杩版垜鐨勭涓涓彁浜ょ殑娉ㄩ噴銆

git commit -m "initial commit"

鍚屾牱锛屼綘闅忔椂鍙互鍥炴粴鍒拌繖涓彁浜ょ姸鎬併傚鏋滀綘闇瑕佹鏌ョ幇鍦ㄥ凡鏆傚瓨鍜屾湭鏆傚瓨鏂囦欢鐨勭姸鎬併佹彁浜ょ瓑锛屼綘鍙互杈撳叆浠ヤ笅鍛戒护璇㈤棶git鐨勭姸鎬侊細

git status



6. 鍒涘缓鍒嗘敮

鍒涘缓鍒嗘敮鏄綘鍒涘缓浠ｇ爜鐙珛鐗堟湰鐨勫姩浣滐紝杩欎釜鏂板垎鏀嫭绔嬩簬浣犵殑涓诲共銆傞粯璁ょ殑锛屾瘡娆′綘鎻愪氦鍒癎it鐨勪唬鐮侀兘浼氳瀛樺偍鍒扳漨aster锛堜富骞诧級鈥濆垎鏀

鐜板湪锛屾瘮濡傛垜浠兂鍚戦」鐩腑娣诲姞涓涓姛鑳斤紝浣嗘垜浠張鎯宠鑳藉鍥炴粴鍒扮幇鍦ㄧ殑鐗堟湰锛屼负浜嗛槻姝㈠嚭鐜板樊閿欙紝鎴栬呮垜浠細鏈缁堟斁寮冭繖涓姛鑳姐傝繖鏃跺欙紝鎴戜滑灏卞彲浠ュ垱寤哄垎鏀苟鍒囨崲鍒版柊寤虹殑鍒嗘敮锛屽彂閫佸懡浠わ細

git checkout -b new_feature

鎴栬呭厛鍒涘缓涓涓垎鏀紝鐒跺悗鍒囨崲

git branch new_feature

git checkout new_feature

瑕佺湅椤圭洰涓嬫墍鏈夌殑鍒嗘敮锛屽彂閫佸懡浠わ細

git branch

鐜板湪浣犲彲浠ュ湪浣犵殑椤圭洰涓婃棤鎵椤惧繉鍦板仛浠讳綍浣犳兂鍋氱殑锛氫换浣曟椂鍊欙紝浣犻兘鍙互鍥炲埌浣犲垱寤哄垎鏀墠鐨勭姸鎬併傛敞鎰忥紝浣犲悓鏃跺彲浠ユ湁澶氫釜鍒嗘敮锛岀敋鑷冲彲浠ヤ粠涓涓垎鏀笂鍐嶅垱寤轰竴涓垎鏀



7. 鍚堝苟鍒嗘敮

褰撴垜浠鏂板姛鑳芥弧鎰忕殑鏃跺欙紝鎴戜滑鎯宠鎶婂畠鍔犲埌涓诲共鍒嗘敮涓娿傚綋鎴戜滑鍦ㄧ殑鏂板姛鑳藉垎鏀笂鏃讹紝鎴戜滑棣栧厛闇瑕佸姞杞藉苟涓旀彁浜ゆ枃浠讹細

git add .

git commit -m "adds my new feature"

鐒跺悗绉诲埌涓诲共鍒嗘敮锛

git checkout master

鍍忚繖鏍峰悎骞讹細

git merge new_feature

姝ゆ椂锛屾垜浠殑涓诲共鍒嗘敮鍜屾柊鍔熻兘鍒嗘敮浼氬彉鎴愪竴鏍枫



8. 涓㈠純骞跺垹闄ゅ垎鏀

褰撴垜浠兂瑕佷涪寮冨苟鍒犻櫎涓涓垎鏀椂锛岄鍏堝姞杞芥垜浠殑鏂囦欢骞朵笖鍦ㄥ垎鏀噷鎻愪氦锛

git add .

git commit -m "feature to be discarded"

鐒跺悗锛岀Щ鍒颁富骞插垎鏀

git checkout master

鐒跺悗鍙戦佸垹闄ゅ懡浠

git branch -d new_featrue

鍋囧淇敼宸茬粡鍚堝苟浜嗭紝瀹冨彧浼氬垹闄ゅ垎鏀傚亣濡傚垎鏀病鏈夊悎骞讹紝鎴戜滑浼氬緱鍒颁竴涓敊璇俊鎭傚垹闄や竴涓湭鍚堝苟鐨勫垎鏀紙閫氬父鎴戜滑涓嶆兂淇濈暀鐨勪慨鏀癸級锛屾垜浠渶瑕佸彂閫佷竴鏍风殑鍛戒护闄勫甫涓涓ぇ鍐橠銆傛剰鎬濇槸鈥滃己鍒跺垹闄ゅ垎鏀紝鏃犺濡備綍鎴戜笉鎯宠瀹冧簡銆傗濓細

git branch -D new_feature



9. 鍥炴粴鍒颁箣鍓嶆彁浜ょ殑鐘舵

鍦ㄦ煇浜涙儏鍐典笅锛屾垜浠彲鑳芥兂瑕佸洖鍒颁箣鍓嶇殑浠ｇ爜鐗堟湰銆傞鍏堬紝鎴戜滑闇瑕佹壘鍒版兂鍥炲埌鍒板摢涓増鏈傞渶瑕佹煡鐪嬫墍鏈夊畬鎴愮殑鎻愪氦锛屽彂閫佸懡浠わ細

git log

杈撳嚭鎻愪氦鐨勫巻鍙茶褰

commit ca82a6dff817ec66f44342007202690a93763949Author: your_username your_email@domain.comDate:   Mon Nov 4 12:52:11 2013 -0700    changes the frontpage layout
commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7Author: your_username your_email@domain.comDate:   Mon Nov 4 11:40:33 2013 -0700    adds my new feature
commit a11bef06a3f659402fe7563abf99ad00de2209e6Author: your_username your_email@domain.comDate:   Mon Nov 4 10:37:28 2013 -0700    initial commit
濡傛灉鎴戜滑鎯冲洖鍒扳渁dds my new feature"杩欎釜鎻愪氦锛岀畝鍗曠殑浣跨敤鎻愪氦鐨処D鍋氱鍑猴紙checkout锛(閫氬父鍙敤ID鐨勫紑澶9涓瓧姣)

git checkout 085bb3bcb

鎴戜滑涔熷彲浠ョ鍑轰竴涓柊鐨勫垎鏀

git checkout -b my_previous_version 085bb3bcb

鍙槸鍒お鐤媯浜嗭紒鍒嗘敮瓒婂鏉傦紝鎴戜滑灏辫秺闅剧‘瀹氭垜浠湪鍋氫粈涔堛



10. 鍒悕

Git鍏佽鎴戜滑涓哄父鐢ㄧ殑鍛戒护鍒涘缓蹇嵎鏂瑰紡锛堝埆鍚嶏級銆備緥濡傦紝濡傛灉鎴戜滑涓嶆兂姣忔閮借緭鍏it commit -m 鈥渟ome comment鈥濓紝鑰屾槸杈撳叆git c 鈥渟ome comment鈥濓紝鎴戜滑鍙互鍚慻it鍏ㄥ眬閰嶇疆閲屾坊鍔犱竴涓埆鍚嶆潵瀹炵幇锛屽儚杩欐牱锛

git config --global alias.c 'commit -m'
杩欐槸鎴戜娇鐢ㄧ殑鍒悕鍒楄〃锛
git config --global alias.c 'commit -m'
git config --global alias.co 'checkout'
git config --global alias.cob 'checkout -b'
git config --global alias.br 'branch'
git config --global alias.m 'merge'
git config --global alias.a 'add .'
git config --global alias.s 'status'
git config --global alias.dbr 'branch -d'
1. 鍏堢敤rpm -qa| grep vsftpd鍛戒护妫鏌ユ槸鍚﹀凡缁忓畨瑁咃紝濡傛灉ftp娌℃湁瀹夎锛屼娇鐢▂um  -y  install vsftpd 瀹夎,(ubuntu 涓嬩娇鐢╝pt-get install vsftpd)
瀹夎涔嬪墠瑕佹洿鏂拌蒋浠舵簮锛屼繚璇佹簮鏄渶鏂扮殑锛岃繖鏍锋湁鍒╀簬涓嬮潰鍦ㄧ嚎閫氳繃apt-get install鍛戒护瀹夎ftp銆

鍛戒护锛歴udo apt-get update

瀹夎瀹屼箣鍚庢垜浠瀵瑰畠杩涜閰嶇疆锛屾墠鑳芥甯镐娇鐢ㄣ傜紪杈憊sftpd鐨勯厤缃枃浠秜i /etc/vsftpd/vsftpd.conf
vi缂栬緫鍣ㄤ腑鐨勬悳绱娇鍛芥槸鏂滄潬鈥/鈥濓紝鐒跺悗杈撳叆瑕佹煡鎵剧殑鍐呭锛屽洖杞︾‘瀹氥備互涓嬫槸瑕佹洿鏀圭殑閫夐」
anonymous_enable=NO  #绂佹鍖垮悕璁块棶
ascii_upload_enable #鍏佽浣跨敤ascii鐮佷笂浼
ascii_download_enable #鍏佽浣跨敤ascii鐮佷笅杞
userlist_deny=NO #锛堣繖鏉￠渶鎵嬪姩娣诲姞鍒版渶鍚庯級浣跨敤FTP鐢ㄦ埛琛紝琛ㄩ噷娌℃湁鐨勭敤鎴烽渶瑕佹坊鍔犳墠鑳界櫥褰
璁剧疆瀹屾瘯涔嬪悗锛孍SC锛屽啋鍙穡q鍥炶溅銆傚惎鍔╲sftpd鏈嶅姟/etc/init.d/vsftpd start锛岀湅鍒癧纭畾]鍗充负鍚姩鎴愬姛銆

2. service vsftpd start 鍚姩瑕佽FTP姣忔寮鏈鸿嚜鍔ㄥ惎鍔紝杩愯鍛戒护:  chkconfig --level 35 vsftpd on

3. 璁剧疆ftp鏉冮檺
vi  /etc/vsftpd/vsftpd.conf
灏哸nonymous_enable=YES 鏀逛负 anonymous_enable=NO
ESC杩斿洖,杈撳叆鈥:wq鈥濅繚瀛樺苟閫鍑

4. 娣诲姞ftp甯愬彿鍜岀洰褰
useradd   -d /alidata/www/wwwroot -s /sbin/nologin pwftp passwd   pwftp chmod -R 755 /alidata/www/wwwroot chown -R  pwftp /alidata/www/wwwroot /etc/rc.d/init.d/vsftpd restart
鐒跺悗鐢ㄥ笎鍙穚wftp瀵嗙爜123456
娴嬭瘯涓嬪氨鍙互鐧婚檰ftp浜嗐傜洰褰曟槸/alidata/www/wwwroot
淇敼闃茬伀澧欙紝鍏佽FTP浣跨敤鐨21绔彛閫氳繃

Linux闃茬伀澧欓厤缃
閲嶅惎闃茬伀澧檚ervice iptables restart涔嬪悗鍏抽棴selinux銆備笉鐒跺氨涓嶈繛鎺ヤ笉涓奆TP銆

linux鍏抽棴selinux
鐒跺悗reboot閲嶅惎Linux鏈嶅姟鍣ㄣ
鏈汉浣跨敤FlashFXP瀹㈡埛绔蒋浠惰繛鎺ワ紝鐩村埌鍑虹幇鐢ㄦ埛涓荤洰褰曪紙涓鑸綅浜/home/鐢ㄦ埛鍚嶏級锛屽垯vsftpd鎴愬姛瀹夎骞惰繍琛屻傜劧鍚庡氨鑳借繘琛屾枃浠剁殑涓婁紶鍜屼笅杞戒簡銆侳LASHFXPvACq2ssbvAAAAAC1W7cJKQTzmx77zmqJICvA7d3WnU
tWNXdrp8YuERRFdIvXfOPbcpABkVix2aRTgg6afcIKFPxS72XY
ljdE9tgQD/2r+kmfVBngGM4Qc9p7e0PcTfFF/1tt2bqlxS8r0L
7z0jrqb5NSiPrcf1C8ILDFLj1gnQZNbclKihZxN+TME98NBDCy
9G39o47JhiCC4UqNx3Ryt4C+f34QJeCfvLxrPsnfXVfhM4oywE
xIQA==a




鏌ョ湅鐩綍涓嬫湁澶氬皯涓枃浠跺強鏂囦欢澶归渶鍦ㄧ粓绔緭鍏

1
ls | wc -w
鏌ョ湅鐩綍涓嬫湁澶氬皯涓枃浠堕渶鍦ㄧ粓绔緭鍏

1
ls | wc -c
鏌ョ湅鏂囦欢澶逛笅鏈夊灏戜釜鏂囦欢锛屽灏戜釜瀛愮洰褰曢渶鍦ㄧ粓绔緭鍏
1
-l
鑻ュ彧鎯崇煡閬撴枃浠剁殑涓暟锛屽垯闇鍦ㄧ粓绔緭鍏

1
-l |grep ^-|wc -l
鐩綍

鍋囧鍒犻櫎褰撳墠鐩綍涓嬫渶鍚庝慨鏀规椂闂存槸3灏忔椂浠ュ墠鐨勬枃浠
find . -mmin 180 -print | xargs rm -rf
娉ㄦ剰-mtime涔嬪悗甯︾殑鏁板瓧鏄互24灏忔椂涓哄崟浣嶇殑
#find . -mtime +30 -type f | xargs rm -rf


鎵瑰鐞嗙殑甯歌鍛戒护锛堟湭鍒椾妇鐨勫懡浠よ繕姣旇緝澶氾紝璇锋煡闃呭府鍔╀俊鎭級
     1銆丷EM 鍜 ::
     2銆丒CHO 鍜 @
     3銆丳AUSE
     4銆丒RRORLEVEL
     5銆乀ITLE
     6銆丆OLOR
     7銆乵ode 閰嶇疆绯荤粺璁惧
     8銆丟OTO 鍜 :
     9銆丗IND
     10銆丼TART
     11銆乤ssoc 鍜 ftype
     12銆乸ushd 鍜 popd
     13銆丆ALL
     14銆乻hift
     15銆両F
     16銆乻etlocal 涓 鍙橀噺寤惰繜
     17銆丄TTRIB  鏄剧ず鎴栨洿鏀规枃浠跺睘鎬
======================================================
浠嬬粛鍛戒护
1銆丷EM 鍜 ::
REM涓烘敞閲婂懡浠わ紝涓鑸敤鏉ョ粰绋嬪簭鍔犱笂娉ㄨВ锛岃鍛戒护鍚庣殑鍐呭涓嶈鎵ц锛屼絾鑳藉洖鏄俱
鍏舵, :: 涔熷彲浠ヨ捣鍒皉em 鐨勬敞閲婁綔鐢, 鑰屼笖鏇寸畝娲佹湁鏁; 浣嗘湁涓ょ偣闇瑕佹敞鎰忥細
绗竴, 浠讳綍浠ュ啋鍙:寮澶寸殑瀛楃琛, 鍦ㄦ壒澶勭悊涓兘琚浣滄爣鍙, 鑰岀洿鎺ュ拷鐣ュ叾鍚庣殑鎵鏈夊唴瀹广
鏈夋晥鏍囧彿锛氬啋鍙峰悗绱ц窡涓涓互瀛楁瘝鏁板瓧寮澶寸殑瀛楃涓诧紝goto璇彞鍙互璇嗗埆銆
鏃犳晥鏍囧彿锛氬啋鍙峰悗绱ц窡涓涓潪瀛楁瘝鏁板瓧鐨勪竴涓壒娈婄鍙凤紝goto鏃犳硶璇嗗埆鐨勬爣鍙凤紝鍙互璧峰埌娉ㄩ噴浣滅敤锛屾墍浠 :: 甯歌鐢ㄤ綔娉ㄩ噴绗﹀彿锛屽叾瀹 :+ 涔熷彲璧锋敞閲婁綔鐢ㄣ
绗 浜, 涓巖em 涓嶅悓鐨勬槸, ::鍚庣殑瀛楃琛屽湪鎵ц鏃朵笉浼氬洖鏄, 鏃犺鏄惁鐢╡cho on鎵撳紑鍛戒护琛屽洖鏄剧姸鎬, 鍥犱负鍛戒护瑙ｉ噴鍣ㄤ笉璁や负浠栨槸涓涓湁鏁堢殑鍛戒护琛, 灏辨鐐规潵鐪, rem 鍦ㄦ煇浜涘満鍚堜笅灏嗘瘮 :: 鏇翠负閫傜敤; 鍙﹀, rem 鍙互鐢ㄤ簬 config.sys 鏂囦欢涓

琛屽唴娉ㄩ噴鏍煎紡锛%娉ㄩ噴鍐呭%  锛堜笉甯哥敤锛屾厧鐢級


2銆丒CHO 鍜 @
@瀛楃鏀惧湪鍛戒护鍓嶅皢鍏抽棴璇ュ懡浠ゅ洖鏄撅紝鏃犺姝ゆ椂echo鏄惁涓烘墦寮鐘舵併
echo鍛戒护鐨勪綔鐢ㄥ垪涓惧涓嬶細
锛1锛夋墦寮鍥炴樉鎴栧叧闂洖鏄惧姛鑳
    鏍煎紡:echo [{ on|off }]
    濡傛灉鎯冲叧闂淓CHO OFF鈥濆懡浠よ鑷韩鐨勬樉绀猴紝鍒欓渶瑕佸湪璇ュ懡浠よ鍓嶅姞涓娾淍鈥濄
锛2锛夋樉绀哄綋鍓岴CHO璁剧疆鐘舵
    鏍煎紡:echo
锛3锛夎緭鍑烘彁绀轰俊鎭
    鏍煎紡锛欵CHO 淇℃伅鍐呭
    涓婅堪鏄疎CHO鍛戒护甯歌鐨勪笁绉嶇敤娉曪紝涔熸槸澶у鐔熸倝鍜屼細鐢ㄧ殑锛屼絾浣滀负DOS鍛戒护娣橀噾鑰呬綘杩樺簲璇ョ煡閬撲笅闈㈢殑鎶宸э細
锛4锛夊叧闂璂OS鍛戒护鎻愮ず绗
    鍦―OS鎻愮ず绗︾姸鎬佷笅閿叆ECHO OFF锛岃兘澶熷叧闂璂OS鎻愮ず绗︾殑鏄剧ず浣垮睆骞曞彧鐣欎笅鍏夋爣锛岀洿鑷抽敭鍏CHO ON锛屾彁绀虹鎵嶄細閲嶆柊鍑虹幇銆
锛5锛夎緭鍑虹┖琛岋紝鍗崇浉褰撲簬杈撳叆涓涓洖杞
    鏍煎紡锛欵CHO锛
    鍊煎緱娉ㄦ剰鐨勬槸鍛戒护琛屼腑鐨勨滐紟鈥濊绱ц窡鍦‥CHO鍚庨潰涓棿涓嶈兘鏈夌┖鏍硷紝鍚﹀垯鈥滐紟鈥濆皢琚綋浣滄彁绀轰俊鎭緭鍑哄埌灞忓箷銆傚彟澶栤滐紟鈥濆彲浠ョ敤锛岋細锛涒濓紡[\]锛嬬瓑浠讳竴绗﹀彿鏇夸唬銆
    鍛戒护ECHO锛庤緭鍑虹殑鍥炶溅锛岀粡DOS绠￠亾杞悜鍙互浣滀负鍏跺畠鍛戒护鐨勮緭鍏ワ紝姣斿echo.|time鍗崇浉褰撲簬鍦═IME鍛戒护鎵ц鍚庣粰鍑轰竴涓洖杞︺傛墍浠ユ墽琛屾椂绯荤粺浼氬湪鏄剧ず褰撳墠鏃堕棿鍚庯紝鑷姩杩斿洖鍒癉OS鎻愮ず绗︾姸鎬
锛6锛夌瓟澶嶅懡浠や腑鐨勬彁闂
    鏍煎紡锛欵CHO 绛斿璇瓅鍛戒护鏂囦欢鍚
涓婅堪鏍煎紡鍙互鐢ㄤ簬绠鍖栦竴浜涢渶瑕佷汉鏈哄璇濈殑鍛戒护锛堝锛欳HKDSK锛廎锛汧ORMAT Drive:锛沝el *.*锛夌殑鎿嶄綔锛屽畠鏄氳繃DOS绠￠亾鍛戒护鎶奅CHO鍛戒护杈撳嚭鐨勯缃瓟澶嶈浣滀负浜烘満瀵硅瘽鍛戒护鐨勮緭鍏ャ備笅闈㈢殑渚嬪瓙灏辩浉褰撲簬鍦ㄨ皟鐢ㄧ殑鍛戒护鍑虹幇浜烘満瀵硅瘽鏃惰緭鍏モ淵鈥濆洖杞︼細
C:>ECHO Y|CHKDSK/F
C:>ECHO Y|DEL A :*.*
锛7锛夊缓绔嬫柊鏂囦欢鎴栧鍔犳枃浠跺唴瀹
鏍煎紡锛欵CHO 鏂囦欢鍐呭>鏂囦欢鍚
      ECHO 鏂囦欢鍐呭>>鏂囦欢鍚
渚嬪锛
C:>ECHO @ECHO OFF>AUTOEXEC.BAT寤虹珛鑷姩鎵瑰鐞嗘枃浠
C:>ECHO C:\CPAV\BOOTSAFE>>AUTOEXEC.BAT鍚戣嚜鍔ㄦ壒澶勭悊鏂囦欢涓拷鍔犲唴瀹
C:>TYPE AUTOEXEC.BAT鏄剧ず璇ヨ嚜鍔ㄦ壒澶勭悊鏂囦欢
@ECHO OFF
C:\CPAV\BOOTSAFE
锛8锛夊悜鎵撳嵃鏈鸿緭鍑烘墦鍗板唴瀹规垨鎵撳嵃鎺у埗鐮
鏍煎紡锛欵CHO 鎵撳嵃鏈烘帶鍒剁爜>;PRN
      ECHO 鎵撳嵃鍐呭>;PRN
涓嬮潰鐨勪緥瀛愭槸鍚慚锛1724鎵撳嵃鏈鸿緭鍏ユ墦鍗版帶鍒剁爜銆傦紲Alt锛156鏄寜浣廇lt閿湪灏忛敭鐩橀敭鍏156锛岀被浼兼儏鍐典緷姝ょ被鎺細
C:>ECHO +156+42+116>;PRN锛堣緭鍏ヤ笅鍒掔嚎鍛戒护FS锛妕锛
C:>ECHO [email=+155@]+155@>;PRN[/email]锛堣緭鍏ュ垵濮嬪寲鍛戒护ESC@锛
C:>ECHO.>;PRN锛堟崲琛岋級
锛9锛変娇鍠囧彮楦ｅ搷
C:>ECHO ^G
鈥淾G鈥濇槸鍦╠os绐楀彛涓敤Ctrl锛婫鎴朅lt锛007杈撳叆锛岃緭鍏ュ涓猑G鍙互浜х敓澶氬０楦ｅ搷銆備娇鐢ㄦ柟娉曟槸鐩存帴灏嗗叾鍔犲叆鎵瑰鐞嗘枃浠朵腑鎴栧仛鎴愭壒澶勭悊鏂囦欢璋冪敤銆
杩欓噷鐨勨淾G鈥濆睘浜庣壒娈婄鍙风殑浣跨敤锛岃鐪嬫湰鏂囧悗闈㈢殑绔犺妭


3銆丳AUSE
PAUSE锛岀帺娓告垙鐨勪汉閮界煡閬擄紝鏆傚仠鐨勬剰鎬
鍦ㄨ繖閲屽氨鏄仠姝㈢郴缁熷懡浠ょ殑鎵ц骞舵樉绀轰笅闈㈢殑鍐呭銆
渚嬶細
PAUSE
杩愯鏄剧ず锛
璇锋寜浠绘剰閿户缁. . .
瑕佹樉绀哄叾浠栨彁绀鸿锛屽彲浠ヨ繖鏍风敤锛
Echo 鍏朵粬鎻愮ず璇 & pause > nul


4銆乪rrorlevel
绋嬪簭杩斿洖鐮
echo %errorlevel%
姣忎釜鍛戒护杩愯缁撴潫锛屽彲浠ョ敤杩欎釜鍛戒护琛屾牸寮忔煡鐪嬭繑鍥炵爜
鐢ㄤ簬鍒ゆ柇鍒氭墠鐨勫懡浠ゆ槸鍚︽墽琛屾垚鍔
榛樿鍊间负0锛屼竴鑸懡浠ゆ墽琛屽嚭閿欎細璁 errorlevel 涓1


5銆乼itle
璁剧疆cmd绐楀彛鐨勬爣棰
title 鏂版爣棰        #鍙互鐪嬪埌cmd绐楀彛鐨勬爣棰樻爮鍙樹簡


6銆丆OLOR
璁剧疆榛樿鐨勬帶鍒跺彴鍓嶆櫙鍜岃儗鏅鑹层
COLOR [attr]
  attr        鎸囧畾鎺у埗鍙拌緭鍑虹殑棰滆壊灞炴
棰滆壊灞炴х敱涓や釜鍗佸叚杩涘埗鏁板瓧鎸囧畾 -- 绗竴涓负鑳屾櫙锛岀浜屼釜鍒欎负
鍓嶆櫙銆傛瘡涓暟瀛楀彲浠ヤ负浠ヤ笅浠讳綍鍊间箣涓:
    0 = 榛戣壊       8 = 鐏拌壊
    1 = 钃濊壊       9 = 娣¤摑鑹
    2 = 缁胯壊       A = 娣＄豢鑹
    3 = 婀栬摑鑹     B = 娣℃祬缁胯壊
    4 = 绾㈣壊       C = 娣＄孩鑹
    5 = 绱壊       D = 娣＄传鑹
    6 = 榛勮壊       E = 娣￠粍鑹
    7 = 鐧借壊       F = 浜櫧鑹
濡傛灉娌℃湁缁欏畾浠讳綍鍙傛暟锛岃鍛戒护浼氬皢棰滆壊杩樺師鍒 CMD.EXE 鍚姩鏃
鐨勯鑹层傝繖涓兼潵鑷綋鍓嶆帶鍒跺彴绐楀彛銆/T 寮鍏虫垨
DefaultColor 娉ㄥ唽琛ㄥ笺
濡傛灉鐢ㄧ浉鍚岀殑鍓嶆櫙鍜岃儗鏅鑹叉潵鎵ц COLOR 鍛戒护锛孋OLOR 鍛戒护
浼氬皢 ERRORLEVEL 璁剧疆涓 1銆
渚嬪: "COLOR fc" 鍦ㄤ寒鐧借壊涓婁骇鐢熶寒绾㈣壊


7銆乵ode 閰嶇疆绯荤粺璁惧
閰嶇疆绯荤粺璁惧銆
涓茶鍙:銆銆銆     MODE COMm[:] [BAUD=b] [PARITY=p] [DATA=d] [STOP=s]
                                [to=on|off] [xon=on|off] [odsr=on|off]
                                [octs=on|off] [dtr=on|off|hs]
                                [rts=on|off|hs|tg] [idsr=on|off]
璁惧鐘舵:             MODE [device] [/STATUS]
鎵撳嵃閲嶅畾鍚:銆銆 MODE LPTn[:]=COMm[:]
閫夊畾浠ｇ爜椤:銆銆 MODE CON[:] CP SELECT=yyy
浠ｇ爜椤电姸鎬:銆銆 MODE CON[:] CP [/STATUS]
鏄剧ず妯″紡:銆銆     MODE CON[:] [COLS=c] [LINES=n]
鍑婚敭鐜:銆             MODE CON[:] [RATE=r DELAY=d]
渚嬶細
mode con cols=113 lines=15 & color 9f
姝ゅ懡浠よ缃瓺OS绐楀彛澶у皬锛15琛岋紝113鍒


8銆丟OTO 鍜 :
GOTO浼氱偣缂栫▼鐨勬湅鍙嬪氨浼氱煡閬撹繖鏄烦杞殑鎰忔濄
鍦ㄦ壒澶勭悊涓厑璁镐互鈥:XXX鈥濇潵鏋勫缓涓涓爣鍙凤紝鐒跺悗鐢℅OTO XXX璺宠浆鍒版爣鍙:XXX澶勶紝鐒跺悗鎵ц鏍囧彿鍚庣殑鍛戒护銆
渚嬶細
if {%1}=={} goto noparms
if "%2"=="" goto noparms
鏍囩鐨勫悕瀛楀彲浠ラ殢渚胯捣锛屼絾鏄渶濂芥槸鏈夋剰涔夌殑瀛楃涓插暒锛屽墠鍔犱釜鍐掑彿鐢ㄦ潵琛ㄧず杩欎釜瀛楃涓叉槸鏍囩锛実oto鍛戒护灏辨槸鏍规嵁杩欎釜鍐掑彿锛:锛夋潵瀵绘壘涓嬩竴姝ヨ烦鍒板埌閭ｉ噷銆傛渶濂芥湁涓浜涜鏄庤繖鏍蜂綘鍒汉鐪嬭捣鏉ユ墠浼氱悊瑙ｄ綘鐨勬剰鍥惧晩銆

渚嬶細
@echo off
:start
set /a var+=1
echo %var%
if %var% leq 3 GOTO start
pause
杩愯鏄剧ず锛
1
2
3
4

9銆乫ind
鍦ㄦ枃浠朵腑鎼滅储瀛楃涓层
FIND [/V] [/C] [/N] [/I] [/OFF[LINE]] "string" [[drive:][path]filename[ ...]]
   /V        鏄剧ず鎵鏈夋湭鍖呭惈鎸囧畾瀛楃涓茬殑琛屻
   /C        浠呮樉绀哄寘鍚瓧绗︿覆鐨勮鏁般
   /N        鏄剧ず琛屽彿銆
   /I        鎼滅储瀛楃涓叉椂蹇界暐澶у皬鍐欍
   /OFF[LINE] 涓嶈璺宠繃鍏锋湁鑴辨満灞炴ч泦鐨勬枃浠躲
   "string"   鎸囧畾瑕佹悳绱㈢殑鏂囧瓧涓诧紝
   [drive:][path]filename
         鎸囧畾瑕佹悳绱㈢殑鏂囦欢銆
濡傛灉娌℃湁鎸囧畾璺緞锛孎IND 灏嗘悳绱㈤敭鍏ョ殑鎴栬呯敱鍙︿竴鍛戒护浜х敓鐨勬枃瀛椼
Find甯稿拰type鍛戒护缁撳悎浣跨敤
Type [drive:][path]filename | find "string" [>tmpfile] #鎸戦夊寘鍚玸tring鐨勮
Type [drive:][path]filename | find /v "string" #鍓旈櫎鏂囦欢涓寘鍚玸tring鐨勮
Type [drive:][path]filename | find /c #鏄剧ず鏂囦欢琛屾暟
浠ヤ笂鐢ㄦ硶灏嗗幓闄ind鍛戒护鑷甫鐨勬彁绀鸿锛堟枃浠跺悕鎻愮ず锛

渚嬶細
@echo off
echo 111 >test.txt
echo 222 >>test.txt
find "111" test.txt
del test.txt
pause
杩愯鏄剧ず濡備笅锛
---------- TEST.TXT
111
璇锋寜浠绘剰閿户缁. . .

渚嬶細
@echo off
echo 111 >test.txt
echo 222 >>test.txt
type test.txt|find "111"
del test.txt
pause
杩愯鏄剧ず濡備笅锛
111
璇锋寜浠绘剰閿户缁. . .

10銆乻tart 鍛戒护
鎵瑰鐞嗕腑璋冪敤澶栭儴绋嬪簭鐨勫懡浠わ紙璇ュ閮ㄧ▼搴忓湪鏂扮獥鍙ｄ腑杩愯锛屾壒澶勭悊绋嬪簭缁х画寰涓嬫墽琛岋紝涓嶇悊浼氬閮ㄧ▼搴忕殑杩愯鐘跺喌锛夛紝濡傛灉鐩存帴杩愯澶栭儴绋嬪簭鍒欏繀椤荤瓑澶栭儴绋嬪簭瀹屾垚鍚庢墠缁х画鎵ц鍓╀笅鐨勬寚浠
渚嬶細start explorer d:\
璋冪敤鍥惧舰鐣岄潰鎵撳紑D鐩


11銆乤ssoc 鍜 ftype
鏂囦欢鍏宠仈
assoc 璁剧疆'鏂囦欢鎵╁睍鍚'鍏宠仈锛屽叧鑱斿埌'鏂囦欢绫诲瀷'
ftype 璁剧疆'鏂囦欢绫诲瀷'鍏宠仈锛屽叧鑱斿埌'鎵ц绋嬪簭鍜屽弬鏁'
褰撲綘鍙屽嚮涓涓.txt鏂囦欢鏃讹紝windows骞朵笉鏄牴鎹.txt鐩存帴鍒ゆ柇鐢 notepad.exe 鎵撳紑
鑰屾槸鍏堝垽鏂.txt灞炰簬 txtfile '鏂囦欢绫诲瀷'
鍐嶈皟鐢 txtfile 鍏宠仈鐨勫懡浠よ txtfile=%SystemRoot%\system32\NOTEPAD.EXE %1
鍙互鍦"鏂囦欢澶归夐」"鈫"鏂囦欢绫诲瀷"閲屼慨鏀硅繖2绉嶅叧鑱
assoc           #鏄剧ず鎵鏈'鏂囦欢鎵╁睍鍚'鍏宠仈
assoc .txt      #鏄剧ず.txt浠ｈ〃鐨'鏂囦欢绫诲瀷'锛岀粨鏋滄樉绀 .txt=txtfile
assoc .doc      #鏄剧ず.doc浠ｈ〃鐨'鏂囦欢绫诲瀷'锛岀粨鏋滄樉绀 .doc=Word.Document.8
assoc .exe      #鏄剧ず.exe浠ｈ〃鐨'鏂囦欢绫诲瀷'锛岀粨鏋滄樉绀 .exe=exefile
ftype           #鏄剧ず鎵鏈'鏂囦欢绫诲瀷'鍏宠仈
ftype exefile   #鏄剧ずexefile绫诲瀷鍏宠仈鐨勫懡浠よ锛岀粨鏋滄樉绀 exefile="%1" %*
assoc .txt=Word.Document.8
璁剧疆.txt涓簑ord绫诲瀷鐨勬枃妗ｏ紝鍙互鐪嬪埌.txt鏂囦欢鐨勫浘鏍囬兘鍙樹簡
assoc .txt=txtfile
鎭㈠.txt鐨勬纭叧鑱

ftype exefile="%1" %*
鎭㈠ exefile 鐨勬纭叧鑱
濡傛灉璇ュ叧鑱斿凡缁忚鐮村潖锛屽彲浠ヨ繍琛 command.com 锛屽啀杈撳叆杩欐潯鍛戒护


12銆乸ushd 鍜 popd
鍒囨崲褰撳墠鐩綍
@echo off
c: & cd\ & md mp3       #鍦 C:\ 寤虹珛 mp3 鏂囦欢澶
md d:\mp4               #鍦 D:\ 寤虹珛 mp4 鏂囦欢澶
cd /d d:\mp4            #鏇存敼褰撳墠鐩綍涓 d:\mp4
pushd c:\mp3            #淇濆瓨褰撳墠鐩綍锛屽苟鍒囨崲褰撳墠鐩綍涓 c:\mp3
popd                    #鎭㈠褰撳墠鐩綍涓哄垰鎵嶄繚瀛樼殑 d:\mp4
涓鑸敤澶勪笉澶э紝鍦ㄥ綋鍓嶇洰褰曞悕涓嶇‘瀹氭椂锛屼細鏈夌偣甯姪銆傦紙dos缂栫▼涓緢鏈夌敤锛


13銆丆ALL
CALL鍛戒护鍙互鍦ㄦ壒澶勭悊鎵ц杩囩▼涓皟鐢ㄥ彟涓涓壒澶勭悊锛屽綋鍙︿竴涓壒澶勭悊鎵ц瀹屽悗锛屽啀缁х画鎵ц鍘熸潵鐨勬壒澶勭悊
CALL command
璋冪敤涓鏉℃壒澶勭悊鍛戒护锛屽拰鐩存帴鎵ц鍛戒护鏁堟灉涓鏍凤紝鐗规畩鎯呭喌涓嬪緢鏈夌敤锛屾瘮濡傚彉閲忕殑澶氱骇宓屽锛岃鏁欑▼鍚庨潰銆傚湪鎵瑰鐞嗙紪绋嬩腑锛屽彲浠ユ牴鎹竴瀹氭潯浠剁敓鎴愬懡浠ゅ瓧绗︿覆锛岀敤call鍙互鎵ц璇ュ瓧绗︿覆锛岃渚嬪瓙銆
CALL [drive:][path]filename [batch-parameters]
璋冪敤鐨勫叾瀹冩壒澶勭悊绋嬪簭銆俧ilename 鍙傛暟蹇呴』鍏锋湁 .bat 鎴 .cmd 鎵╁睍鍚嶃
CALL :label arguments
璋冪敤鏈枃浠跺唴鍛戒护娈碉紝鐩稿綋浜庡瓙绋嬪簭銆傝璋冪敤鐨勫懡浠ゆ浠ユ爣绛:label寮澶
浠ュ懡浠oto :eof缁撳熬銆
鍙﹀锛屾壒鑴氭湰鏂囨湰鍙傛暟鍙傜収(%0銆%1銆佺瓑绛)宸插涓嬫敼鍙:
     鎵硅剼鏈噷鐨 %* 鎸囧嚭鎵鏈夌殑鍙傛暟(濡 %1 %2 %3 %4 %5 ...)
     鎵瑰弬鏁(%n)鐨勬浛浠ｅ凡琚寮恒傛偍鍙互浣跨敤浠ヤ笅璇硶:锛堢湅涓嶆槑鐧界殑鐩存帴杩愯鍚庨潰鐨勪緥瀛愶級
         %~1         - 鍒犻櫎寮曞彿(")锛屾墿鍏 %1
         %~f1        - 灏 %1 鎵╁厖鍒颁竴涓畬鍏ㄥ悎鏍肩殑璺緞鍚
         %~d1        - 浠呭皢 %1 鎵╁厖鍒颁竴涓┍鍔ㄥ櫒鍙
         %~p1        - 浠呭皢 %1 鎵╁厖鍒颁竴涓矾寰
         %~n1        - 浠呭皢 %1 鎵╁厖鍒颁竴涓枃浠跺悕
         %~x1        - 浠呭皢 %1 鎵╁厖鍒颁竴涓枃浠舵墿灞曞悕
         %~s1        - 鎵╁厖鐨勮矾寰勬寚鍚湁鐭悕
         %~a1        - 灏 %1 鎵╁厖鍒版枃浠跺睘鎬
         %~t1        - 灏 %1 鎵╁厖鍒版枃浠剁殑鏃ユ湡/鏃堕棿
         %~z1        - 灏 %1 鎵╁厖鍒版枃浠剁殑澶у皬
         %~$PATH : 1 - 鏌ユ壘鍒楀湪 PATH 鐜鍙橀噺鐨勭洰褰曪紝骞跺皢 %1
                       鎵╁厖鍒版壘鍒扮殑绗竴涓畬鍏ㄥ悎鏍肩殑鍚嶇О銆傚鏋滅幆澧
                       鍙橀噺鍚嶆湭琚畾涔夛紝鎴栬呮病鏈夋壘鍒版枃浠讹紝姝ょ粍鍚堥敭浼
                       鎵╁厖鍒扮┖瀛楃涓
    鍙互缁勫悎淇畾绗︽潵鍙栧緱澶氶噸缁撴灉:
        %~dp1       - 鍙皢 %1 鎵╁睍鍒伴┍鍔ㄥ櫒鍙峰拰璺緞
        %~nx1       - 鍙皢 %1 鎵╁睍鍒版枃浠跺悕鍜屾墿灞曞悕
        %~dp$PATH:1 - 鍦ㄥ垪鍦 PATH 鐜鍙橀噺涓殑鐩綍閲屾煡鎵 %1锛
                       骞舵墿灞曞埌鎵惧埌鐨勭涓涓枃浠剁殑椹卞姩鍣ㄥ彿鍜岃矾寰勩
        %~ftza1     - 灏 %1 鎵╁睍鍒扮被浼 DIR 鐨勮緭鍑鸿銆
    鍦ㄤ笂闈㈢殑渚嬪瓙涓紝%1 鍜 PATH 鍙互琚叾浠栨湁鏁堟暟鍊兼浛鎹
%~ 璇硶琚竴涓湁鏁堝弬鏁板彿鐮佺粓姝%~ 淇畾绗︿笉鑳借窡 %*浣跨敤
娉ㄦ剰锛氬弬鏁版墿鍏呮椂涓嶇悊浼氬弬鏁版墍浠ｈ〃鐨勬枃浠舵槸鍚︾湡瀹炲瓨鍦紝鍧囦互褰撳墠鐩綍杩涜鎵╁睍
瑕佺悊瑙ｄ笂闈㈢殑鐭ヨ瘑锛屼笅闈㈢殑渚嬪瓙寰堝叧閿
渚嬶細
@echo off
Echo 浜х敓涓涓复鏃舵枃浠 > tmp.txt
Rem 涓嬭鍏堜繚瀛樺綋鍓嶇洰褰曪紝鍐嶅皢c:\windows璁句负褰撳墠鐩綍
pushd c:\windows
Call :sub tmp.txt
Rem 涓嬭鎭㈠鍓嶆鐨勫綋鍓嶇洰褰
Popd
Call :sub tmp.txt
pause
Del tmp.txt
exit
:sub
Echo 鍒犻櫎寮曞彿锛 %~1
Echo 鎵╁厖鍒拌矾寰勶細 %~f1
Echo 鎵╁厖鍒颁竴涓┍鍔ㄥ櫒鍙凤細 %~d1
Echo 鎵╁厖鍒颁竴涓矾寰勶細 %~p1
Echo 鎵╁厖鍒颁竴涓枃浠跺悕锛 %~n1
Echo 鎵╁厖鍒颁竴涓枃浠舵墿灞曞悕锛 %~x1
Echo 鎵╁厖鐨勮矾寰勬寚鍚湁鐭悕锛 %~s1
Echo 鎵╁厖鍒版枃浠跺睘鎬э細 %~a1
Echo 鎵╁厖鍒版枃浠剁殑鏃ユ湡/鏃堕棿锛 %~t1
Echo 鎵╁厖鍒版枃浠剁殑澶у皬锛 %~z1
Echo 鎵╁睍鍒伴┍鍔ㄥ櫒鍙峰拰璺緞锛%~dp1
Echo 鎵╁睍鍒版枃浠跺悕鍜屾墿灞曞悕锛%~nx1
Echo 鎵╁睍鍒扮被浼 DIR 鐨勮緭鍑鸿锛%~ftza1
Echo.
Goto :eof
渚嬶細
set aa=123456
set cmdstr=echo %aa%
call %cmdstr%
pause
鏈緥涓鏋滀笉鐢╟all锛岃岀洿鎺ヨ繍琛%cmdstr%锛屽皢鏄剧ず缁撴灉%aa%锛岃屼笉鏄123456

14銆乻hift
鏇存敼鎵瑰鐞嗘枃浠朵腑鍙浛鎹㈠弬鏁扮殑浣嶇疆銆
SHIFT [/n]
濡傛灉鍛戒护鎵╁睍鍚嶈鍚敤锛孲HIFT 鍛戒护鏀寔/n 鍛戒护琛屽紑鍏筹紱璇ュ懡浠よ寮鍏冲憡璇
鍛戒护浠庣 n 涓弬鏁板紑濮嬬Щ浣嶏紱n 浠嬩簬闆跺拰鍏箣闂淬備緥濡:
    SHIFT /2
浼氬皢 %3 绉讳綅鍒 %2锛屽皢 %4 绉讳綅鍒 %3锛岀瓑绛夛紱骞朵笖涓嶅奖鍝 %0 鍜 %1銆
15銆両F
IF 鏉′欢鍒ゆ柇璇彞锛岃娉曟牸寮忓涓嬶細
IF [NOT] ERRORLEVEL number command
IF [NOT] string1==string2 command
IF [NOT] EXIST filename command
涓嬮潰閫愪竴浠嬬粛锛屾洿璇︾粏鐨勫垎鏋愯鐪嬪悗闈㈢珷鑺傘

(1) IF [NOT] ERRORLEVEL number command
IF ERRORLEVEL杩欎釜鍙ュ瓙蹇呴』鏀惧湪鏌愪竴涓懡浠ょ殑鍚庨潰锛屾墽琛屽懡浠ゅ悗鐢盜F ERRORLEVEL 鏉ュ垽鏂懡浠ょ殑杩斿洖鍊笺
Number鐨勬暟瀛楀彇鍊艰寖鍥0~255锛屽垽鏂椂鍊肩殑鎺掑垪椤哄簭搴旇鐢卞ぇ鍒板皬銆傝繑鍥炵殑鍊煎ぇ浜庣瓑浜庢寚瀹氱殑鍊兼椂锛屾潯浠舵垚绔
渚嬶細
@echo off
dir c:
rem閫鍑轰唬鐮佷负>=1灏辫烦鑷虫爣棰1澶勬墽琛岋紝>=0灏辫烦鑷虫爣棰0澶勬墽琛
IF ERRORLEVEL 1 goto 1
IF ERRORLEVEL 0 goto 0
Rem 涓婇潰鐨勪袱琛屼笉鍙氦鎹綅缃紝鍚﹀垯澶辫触浜嗕篃鏄剧ず鎴愬姛銆
:0
echo 鍛戒护鎵ц鎴愬姛锛
Rem 绋嬪簭鎵ц瀹屾瘯璺宠嚦鏍囬exit澶勯鍑
goto exit
:1
echo 鍛戒护鎵ц澶辫触锛
Rem 绋嬪簭鎵ц瀹屾瘯璺宠嚦鏍囬exit澶勯鍑
goto exit
:exit
pause
杩愯鏄剧ず锛氬懡浠ゆ墽琛屾垚鍔燂紒
(2) IF [NOT] string1==string2 command
string1鍜宻tring2閮戒负瀛楃鐨勬暟鎹紝鑻辨枃鍐呭瓧绗︾殑澶у皬鍐欏皢鐪嬩綔涓嶅悓锛岃繖涓潯浠朵腑鐨勭瓑浜庡彿蹇呴』鏄袱涓紙缁濆鐩哥瓑鐨勬剰鎬濓級
鏉′欢鐩哥瓑鍚庡嵆鎵ц鍚庨潰鐨刢ommand
妫娴嬪綋鍓嶅彉閲忕殑鍊煎仛鍑哄垽鏂紝涓轰簡闃叉瀛楃涓蹭腑鍚湁绌烘牸锛屽彲鐢ㄤ互涓嬫牸寮
if [NOT] {string1}=={string2} command
if [NOT] [string1]==[string2] command
if [NOT] "string1"=="string2" command
杩欑鍐欐硶瀹為檯涓婂皢鎷彿鎴栧紩鍙峰綋鎴愬瓧绗︿覆鐨勪竴閮ㄥ垎浜嗭紝鍙绛夊彿宸﹀彸涓よ竟涓鑷村氨琛屼簡锛屾瘮濡備笅闈㈢殑鍐欐硶灏变笉琛岋細
if {string1}==[string2] command

(3) IF [NOT] EXIST filename command
EXIST filename涓烘枃浠舵垨鐩綍瀛樺湪鐨勬剰鎬
echo off
IF EXIST autoexec.bat echo 鏂囦欢瀛樺湪锛
IF not EXIST autoexec.bat echo 鏂囦欢涓嶅瓨鍦紒
杩欎釜鎵瑰鐞嗗ぇ瀹跺彲浠ユ斁鍦–鐩樺拰D鐩樺垎鍒墽琛岋紝鐪嬬湅鏁堟灉



16銆乻etlocal 涓 鍙橀噺寤惰繜
鏈潯鍐呭寮曠敤[鑻遍泟鍑哄搧]鐨勬壒澶勭悊鏁欑▼锛
瑕佹兂杩涢樁锛屽彉閲忓欢杩熸槸蹇呰繃鐨勪竴鍏筹紒鎵浠ヨ繖涓閮ㄥ垎甯屾湜浣犺兘璁ょ湡鐪嬨
涓轰簡鏇村ソ鐨勮鏄庨棶棰橈紝鎴戜滑鍏堝紩鍏ヤ竴涓緥瀛愩
渚1:
@echo off
set a=4
set a=5 & echo %a%
pause
缁撴灉锛4
瑙ｈ锛氫负浠涔堟槸4鑰屼笉鏄5鍛紵鍦╡cho涔嬪墠鏄庢槑宸茬粡鎶婂彉閲廰鐨勫兼敼鎴5浜嗭紵
璁╂垜浠厛浜嗚В涓涓嬫壒澶勭悊杩愯鍛戒护鐨勬満鍒讹細
鎵 澶勭悊璇诲彇鍛戒护鏃舵槸鎸夎璇诲彇鐨勶紙鍙﹀渚嬪for鍛戒护绛夛紝鍏跺悗鐢ㄤ竴瀵瑰渾鎷彿闂悎鐨勬墍鏈夎鍙ヤ篃褰撲綔涓琛岋級锛屽湪澶勭悊涔嬪墠瑕佸畬鎴愬繀瑕佺殑棰勫鐞嗗伐浣滐紝杩欏叾涓氨鍖呮嫭瀵硅 琛屽懡浠や腑鐨勫彉閲忚祴鍊笺傛垜浠幇鍦ㄥ垎鏋愪竴涓嬩緥1锛屾壒澶勭悊鍦ㄨ繍琛屽埌杩欏彞鈥渟et a=5 & echo %a%鈥濅箣鍓嶏紝鍏堟妸杩欎竴鍙ユ暣鍙ヨ鍙栧苟鍋氫簡棰勫鐞嗏斺斿鍙橀噺a璧嬩簡鍊硷紝閭ｄ箞%a%褰撶劧灏辨槸4浜嗭紒锛堟病鏈変负浠涔堬紝鎵瑰鐞嗗氨鏄繖鏍峰仛鐨勩傦級
鑰屼负浜嗚兘澶熸劅鐭ョ幆澧冨彉閲忕殑鍔ㄦ佸彉鍖栵紝鎵瑰鐞嗚璁′簡鍙橀噺寤惰繜銆傜畝鍗曟潵璇达紝鍦ㄨ鍙栦簡涓鏉″畬鏁寸殑璇彞涔嬪悗锛屼笉绔嬪嵆瀵硅琛岀殑鍙橀噺璧嬪硷紝鑰屼細鍦ㄦ煇涓崟鏉¤鍙ユ墽琛屼箣鍓嶅啀杩涜璧嬪硷紝涔熷氨鏄鈥滃欢杩熲濅簡瀵瑰彉閲忕殑璧嬪笺
閭ｄ箞濡備綍寮鍚彉閲忓欢杩熷憿锛熷彉閲忓欢杩熷張闇瑕佹敞鎰忎粈涔堝憿锛熶妇涓緥瀛愯鏄庝竴涓嬶細
渚2:
@echo off
setlocal enabledelayedexpansion
set a=4
set a=5 & echo !a!
pause
缁撴灉锛5
瑙ｈ锛氬惎鍔ㄤ簡鍙橀噺寤惰繜锛屽緱鍒颁簡姝ｇ‘绛旀銆傚彉閲忓欢杩熺殑鍚姩璇彞鏄渟etlocal enabledelayedexpansion鈥濓紝骞朵笖鍙橀噺瑕佺敤涓瀵瑰徆鍙封!!鈥濇嫭璧锋潵锛堟敞鎰忚鐢ㄨ嫳鏂囩殑鍙瑰彿锛夛紝鍚﹀垯灏辨病鏈夊彉閲忓欢杩熺殑鏁堟灉銆
鍒嗘瀽涓涓嬩緥2锛岄鍏堚渟etlocal enabledelayedexpansion鈥濆紑鍚彉閲忓欢杩燂紝鐒跺悗鈥渟et a=4鈥濆厛缁欏彉閲廰璧嬪间负
4锛屸渟et a=5 & echo !a!鈥濊繖鍙ユ槸缁欏彉閲廰璧嬪间负5骞惰緭鍑猴紙鐢变簬鍚姩浜嗗彉閲忓欢杩燂紝鎵浠ユ壒澶勭悊鑳藉鎰熺煡鍒板姩鎬佸彉鍖栵紝鍗充笉鏄厛缁欒琛屽彉閲忚祴鍊硷紝鑰屾槸鍦ㄨ繍琛岃繃绋嬩腑缁欏彉閲忚祴鍊硷紝鍥犳姝ゆ椂a鐨勫煎氨鏄5浜嗭級銆
鍐嶄妇涓涓緥瀛愬珐鍥轰竴涓嬨
渚3:
@echo off
setlocal enabledelayedexpansion
for /l %%i in (1,1,5) do (
set a=%%i
echo !a!
)
pause
缁撴灉锛
1
2
3
4
5
瑙ｈ锛氭湰渚嬪紑鍚簡鍙橀噺寤惰繜骞剁敤鈥!!鈥濆皢鍙橀噺鎵╄捣鏉ワ紝鍥犳寰楀埌鎴戜滑棰勬湡鐨勭粨鏋溿傚鏋滀笉鐢ㄥ彉閲忓欢杩熶細鍑虹幇浠
涔堢粨鏋滃憿锛熺粨鏋滄槸杩欐牱鐨勶細
ECHO 澶勪簬鍏抽棴鐘舵併
ECHO 澶勪簬鍏抽棴鐘舵併
ECHO 澶勪簬鍏抽棴鐘舵併
ECHO 澶勪簬鍏抽棴鐘舵併
ECHO 澶勪簬鍏抽棴鐘舵併
鍗虫病鏈夋劅鐭ュ埌for璇彞涓殑鍔ㄦ佸彉鍖栥
鎻愮ず锛氬湪娌℃湁寮鍚彉閲忓欢杩熺殑鎯呭喌涓嬶紝鏌愭潯鍛戒护琛屼腑鐨勫彉閲忔敼鍙橈紝蹇呴』鍒颁笅涓鏉″懡浠ゆ墠鑳戒綋鐜般傝繖涓鐐逛篃鍙互鍔犱互鍒╃敤锛岀湅渚嬪瓙銆
渚嬶細浜ゆ崲涓や釜鍙橀噺鐨勫硷紝涓斾笉鐢ㄤ腑闂村彉閲
@echo off
::鐩殑锛氫氦鎹袱涓彉閲忕殑鍊硷紝浣嗘槸涓嶄娇鐢ㄤ复鏃跺彉閲
::Code by JM 2007-1-24 [email=CMD@XP]CMD@XP[/email]
::鍑哄锛歨ttp://www.cn-dos.net/forum/viewthread.php?tid=27078
set var1=abc
set var2=123
echo 浜ゆ崲鍓嶏細 var1=%var1% var2=%var2%
set var1=%var2%& set var2=%var1%
echo 浜ゆ崲鍚庯細 var1=%var1% var2=%var2%
pause

17銆丄TTRIB  鏄剧ず鎴栨洿鏀规枃浠跺睘鎬
ATTRIB [+R|-R] [+A|-A] [+S|-S] [+H|-H] [[drive:] [path] filename] [/S [/D]]
  +   璁剧疆灞炴с
  -    娓呴櫎灞炴с
  R   鍙鏂囦欢灞炴с
  A   瀛樻。鏂囦欢灞炴с
  S   绯荤粺鏂囦欢灞炴с
  H   闅愯棌鏂囦欢灞炴с
  [drive:][path][filename]
      鎸囧畾瑕佸鐞嗙殑鏂囦欢灞炴с
  /S  澶勭悊褰撳墠鏂囦欢澶瑰強鍏跺瓙鏂囦欢澶逛腑鐨勫尮閰嶆枃浠躲
  /D  涔熷鐞嗘枃浠跺す銆

渚嬶細
md autorun
attrib +a +s +h autorun
涓婇潰鐨勫懡浠ゅ皢寤虹珛鏂囦欢澶筧utorun锛岀劧鍚庡皢鍏惰涓哄瓨妗ｃ佺郴缁熴侀殣钘忓睘鎬

锛濓紳锛濓紳锛濓紳锛濓紳锛濓紳锛濓紳锛濓紳锛濓紳锛濓紳锛濓紳锛濓紳锛濓紳锛濓紳锛濓紳锛濓紳锛濓紳锛濓紳锛濓紳锛濓紳锛濓紳锛濓紳锛濓紳锛濓紳锛濓紳锛濓紳
绗簩鑺 甯哥敤鐗规畩绗﹀彿
    1銆丂  鍛戒护琛屽洖鏄惧睆钄界
    2銆%  鎵瑰鐞嗗彉閲忓紩瀵肩
    3銆>   閲嶅畾鍚戠
    4銆>>  閲嶅畾鍚戠
    5銆<銆>&銆<& 閲嶅畾鍚戠
    6銆亅  鍛戒护绠￠亾绗
    7銆乛  杞箟瀛楃
    8銆&  缁勫悎鍛戒护
    9銆&& 缁勫悎鍛戒护
    10銆亅|  缁勫悎鍛戒护
    11銆""  瀛楃涓茬晫瀹氱
    12銆, 閫楀彿
    13銆; 鍒嗗彿
    14銆() 鎷彿
    15銆! 鎰熷徆鍙
    16銆佹壒澶勭悊涓彲鑳戒細瑙佸埌鐨勫叾瀹冪壒娈婃爣璁扮: 锛堢暐锛
        CR(0D) 鍛戒护琛岀粨鏉熺
        Escape(1B) ANSI杞箟瀛楃寮曞绗
        Space(20) 甯哥敤鐨勫弬鏁扮晫瀹氱
        Tab(09) ; = 涓嶅父鐢ㄧ殑鍙傛暟鐣屽畾绗
        + COPY鍛戒护鏂囦欢杩炴帴绗
        * ? 鏂囦欢閫氶厤绗
        / 鍙傛暟寮鍏冲紩瀵肩
        : 鎵瑰鐞嗘爣绛惧紩瀵肩

搴熻瘽灏戣锛屽紑璁蹭簡
1銆丂  鍛戒护琛屽洖鏄惧睆钄界
杩欎釜瀛楃鍦ㄦ壒澶勭悊涓殑鎰忔濇槸鍏抽棴褰撳墠琛岀殑鍥炴樉銆傛垜浠粠鍓嶅嚑璇剧煡閬
ECHO OFF鍙互鍏抽棴鎺夋暣涓壒澶勭悊鍛戒护鐨勫洖鏄撅紝浣嗕笉鑳藉叧鎺塃CHO OFF杩欎釜鍛戒护锛岀幇鍦ㄦ垜浠湪ECHO OFF杩欎釜鍛戒护鍓嶅姞涓狜锛屽氨鍙互杈惧埌鎵鏈夊懡浠ゅ潎涓嶅洖鏄剧殑瑕佹眰

2銆%  鎵瑰鐞嗗彉閲忓紩瀵肩
杩欎釜鐧惧垎鍙蜂弗鏍兼潵璇存槸绠椾笉涓婂懡浠ょ殑锛屽畠鍙槸鎵瑰鐞嗕腑鐨勫弬鏁拌屽凡锛堝涓%涓璧蜂娇鐢ㄧ殑鎯呭喌闄ゅ锛屼互鍚庤繕灏嗚缁嗕粙缁嶏級銆
寮曠敤鍙橀噺鐢%var%锛岃皟鐢ㄧ▼搴忓閮ㄥ弬鏁扮敤%1鑷%9绛夌瓑
%0  %1  %2  %3  %4  %5  %6  %7  %8  %9  %*涓哄懡浠よ浼犻掔粰鎵瑰鐞嗙殑鍙傛暟
%0 鎵瑰鐞嗘枃浠舵湰韬紝鍖呮嫭瀹屾暣鐨勮矾寰勫拰鎵╁睍鍚
%1 绗竴涓弬鏁
%9 绗節涓弬鏁
%* 浠庣涓涓弬鏁板紑濮嬬殑鎵鏈夊弬鏁
鍙傛暟%0鍏锋湁鐗规畩鐨勫姛鑳斤紝鍙互璋冪敤鎵瑰鐞嗚嚜韬紝浠ヨ揪鍒版壒澶勭悊鏈韩寰幆鐨勭洰鐨勶紝涔熷彲浠ュ鍒舵枃浠惰嚜韬瓑绛夈
渚嬶細鏈绠鍗曠殑澶嶅埗鏂囦欢鑷韩鐨勬柟娉
copy %0 d:\wind.bat
灏忔妧宸э細娣诲姞琛屽唴娉ㄩ噴
%娉ㄩ噴鍐呭%锛堝彲浠ョ敤浣滆鍐呮敞閲婏紝涓嶈兘鍑虹幇閲嶅畾鍚戠鍙峰拰绠￠亾绗﹀彿锛
涓轰粈涔堣繖鏍峰憿锛熸鏃垛滄敞閲婂唴瀹光濆叾瀹炶褰撲綔鍙橀噺锛屽叾鍊兼槸绌虹殑锛屾晠鍙捣娉ㄩ噴浣滅敤锛屼笉杩囪繖绉嶇敤娉曞鏄撳嚭鐜拌娉曢敊璇紝涓鑸笉鐢ㄣ

3銆>   閲嶅畾鍚戠
杈撳嚭閲嶅畾鍚戝懡浠
DOS鐨勬爣鍑嗚緭鍏ヨ緭鍑洪氬父鏄湪鏍囧噯璁惧閿洏鍜屾樉绀哄櫒涓婅繘琛岀殑锛屽埄鐢ㄩ噸瀹氬悜,鍙互鏂逛究鍦板皢杈撳叆杈撳嚭鏀瑰悜纾佺洏鏂囦欢鎴栧叾瀹冭澶囥傚叾涓:
1.澶т簬鍙封>鈥濆皢鍛戒护鍙戦佸埌鏂囦欢鎴栬澶囷紝渚嬪鎵撳嵃鏈>prn銆備娇鐢ㄥぇ浜庡彿鈥>鈥濇椂锛屾湁浜涘懡浠よ緭鍑(渚嬪閿欒娑堟伅)涓嶈兘閲嶅畾鍚戙
2.鍙屽ぇ浜庡彿鈥>>鈥濆皢鍛戒护杈撳嚭娣诲姞鍒版枃浠剁粨灏捐屼笉鍒犻櫎鏂囦欢涓凡鏈夌殑淇℃伅銆
3.灏忎簬鍙封<鈥濅粠鏂囦欢鑰屼笉鏄敭鐩樹笂鑾峰彇鍛戒护鎵闇鐨勮緭鍏ャ
4.>&绗﹀彿灏嗚緭鍑轰粠涓涓粯璁/O娴(stdout,stdin,stderr)閲嶆柊瀹氬悜鍒板彟涓涓粯璁/O娴併
渚嬪锛宑ommand >output_file 2>&1灏嗗鐞哻ommand杩囩▼涓殑鎵鏈夐敊璇俊鎭粠灞忓箷閲嶅畾鍚戝埌鏍囧噯鏂囦欢杈撳嚭涓傛爣鍑嗚緭鍑虹殑鏁板煎涓嬫墍绀猴細
鍛戒护閲嶅畾鍚戠殑鏍囧噯鍙ユ焺

 鍙ユ焺鍚嶇О	 鍊	 璇存槑
 STDIN	0 	鏍囧噯杈撳叆锛屽彂閫佽嚜閿洏
 STDUOT	1	鏍囧噯杈撳嚭锛屽彂閫佸埌鍛戒护Shell绐楀彛
 STDERR	2 	鏍囧噯閿欒杈撳嚭锛屽彂閫佸埌鍛戒护Shell绐楀彛
 UNDEFINED	3~9 	鐗瑰畾浜庡簲鐢ㄧ▼搴忕殑鍙ユ焺
杩欎釜瀛楃鐨勬剰鎬濇槸浼犻掑苟涓旇鐩栵紝浠栨墍璧风殑浣滅敤鏄皢杩愯鐨勭粨鏋滀紶閫掑埌鍚庨潰鐨勮寖鍥达紙鍚庤竟鍙互鏄枃浠讹紝涔熷彲浠ユ槸榛樿鐨勭郴缁熸帶鍒跺彴锛
鍦∟T绯诲垪鍛戒护琛屼腑锛岄噸瀹氬悜鐨勪綔鐢ㄨ寖鍥寸敱鏁翠釜鍛戒护琛岃浆鍙樹负鍗曚釜鍛戒护璇彞锛屽彈鍒颁簡鍛戒护鍒嗛殧绗&,&&,||鍜岃鍙ュ潡鐨勫埗绾﹂檺鍒躲
姣斿锛
浣跨敤鍛戒护锛歟cho hello >1.txt灏嗗缓绔嬫枃浠1.txt锛屽唴瀹逛负鈥漢ello 鈥滐紙娉ㄦ剰琛屽熬鏈変竴绌烘牸锛
浣跨敤鍛戒护锛歟cho hello>1.txt灏嗗缓绔嬫枃浠1.txt锛屽唴瀹逛负鈥漢ello鈥滐紙娉ㄦ剰琛屽熬娌℃湁绌烘牸锛夛細
鍏蜂綋閲嶅畾鍚戝疄渚嬭鐪嬫垜鐨勫彟澶栦竴绡囨枃绔狅細DOS鐨勯噸瀹氬悜鍛戒护鍙婂湪瀹夊叏鏂归潰鐨勫簲鐢

4銆>>  閲嶅畾鍚戠
杈撳嚭閲嶅畾鍚戝懡浠
杩欎釜绗﹀彿鐨勪綔鐢ㄥ拰>鏈夌偣绫讳技锛屼絾浠栦滑鐨勫尯鍒槸>>鏄紶閫掑苟鍦ㄦ枃浠剁殑鏈熬杩藉姞锛岃>鏄鐩
鐢ㄦ硶鍚屼笂
鍚屾牱鎷1.txt鍋氫緥瀛
浣跨敤鍛戒护锛
echo hello > 1.txt
echo world >>1.txt
杩欐椂鍊1.txt 鍐呭濡備笅:
hello
world

5銆<銆>&銆<& 閲嶅畾鍚戠
杩欎笁涓懡浠や篃鏄閬撳懡浠わ紝浣嗗畠浠竴鑸笉甯哥敤锛屼綘鍙渶瑕佺煡閬撲竴涓嬪氨ok浜嗭紝褰撶劧濡傛灉鎯充粩缁嗙爺绌剁殑璇濓紝鍙互鑷繁鏌ヤ竴涓嬭祫鏂欍(鏈汉宸叉煡杩囷紝缃戜笂涔熸煡涓嶅埌鐩稿叧璧勬枡)
<锛岃緭鍏ラ噸瀹氬悜鍛戒护锛屼粠鏂囦欢涓鍏ュ懡浠よ緭鍏ワ紝鑰屼笉鏄粠閿洏涓鍏ャ
@echo off
echo 2005-05-01>temp.txt
date <temp.txt
del temp.txt
杩欐牱灏卞彲浠ヤ笉绛夊緟杈撳叆鐩存帴淇敼褰撳墠鏃ユ湡
>&锛屽皢涓涓彞鏌勭殑杈撳嚭鍐欏叆鍒板彟涓涓彞鏌勭殑杈撳叆涓
<&锛屽垰濂藉拰>&鐩稿弽锛屼粠涓涓彞鏌勮鍙栬緭鍏ュ苟灏嗗叾鍐欏叆鍒板彟涓涓彞鏌勮緭鍑轰腑銆
甯哥敤鍙ユ焺锛0銆1銆2锛屾湭瀹氫箟鍙ユ焺锛3鈥9
1>nul 琛ㄧず绂佹杈撳嚭姝ｇ‘鐨勪俊鎭
2>nul 琛ㄧず绂佹杈撳嚭閿欒淇℃伅銆
鍏朵腑鐨1涓2閮芥槸浠ｈ〃鏌愪釜鏁版嵁娴佽緭鍏ヨ緭鍑虹殑鍦板潃锛圢T CMD 绉颁箣涓哄彞鏌勶紝MSDOS绉颁箣涓鸿澶囷級銆
鍙ユ焺0锛氭爣鍑嗚緭鍏tdin锛岄敭鐩樿緭鍏
鍙ユ焺1锛氭爣鍑嗚緭鍑簊tdout锛岃緭鍑哄埌鍛戒护鎻愮ず绗︾獥鍙ｏ紙console锛屼唬鐮佷负CON锛
鍙ユ焺2锛氭爣鍑嗛敊璇痵tderr锛岃緭鍑哄埌鍛戒护鎻愮ず绗︾獥鍙ｏ紙console锛屼唬鐮佷负CON锛
鍏朵腑鐨剆tdin鍙<閲嶅畾鍚戯紝stdout鍙>銆>>閲嶅畾鍚戙
鎴戜滑宸茬粡鐭ラ亾璇诲彇鏂囨湰涓殑鍐呭鍙互鐢╢or鍛戒护锛屼絾濡傛灉鍙渶瑕佽鍙栫涓琛岀敤for鍛戒护灏辨湁鐐归夯鐑︺傜畝鍗曠殑鍔炴硶濡備笅:
@echo off
set /p str=<%0
echo %str%
pause
杩愯鏄剧ず鎵瑰鐞嗘枃浠惰嚜韬殑绗竴琛岋細@echo off

6銆亅  鍛戒护绠￠亾绗
鏍煎紡锛氱涓鏉″懡浠 | 绗簩鏉″懡浠 [| 绗笁鏉″懡浠...]
灏嗙涓鏉″懡浠ょ殑缁撴灉浣滀负绗簩鏉″懡浠ょ殑鍙傛暟鏉ヤ娇鐢紝璁板緱鍦╱nix涓繖绉嶆柟寮忓緢甯歌銆
渚嬪锛
dir c:\|find "txt"
浠ヤ笂鍛戒护鏄細鏌ユ壘C锛歕鎵鏈夛紝骞跺彂鐜癟XT瀛楃涓层
FIND鐨勫姛鑳借鐢 FIND /? 鑷鏌ョ湅
鍦ㄤ笉浣縡ormat鐨勮嚜鍔ㄦ牸寮忓寲鍙傛暟鏃讹紝鎴戞槸杩欐牱鏉ヨ嚜鍔ㄦ牸寮忓寲A鐩樼殑
echo y|format a: /s /q /v:system
鐢ㄨ繃format鐨勯兘鐭ラ亾锛屽啀鏍肩洏鏃惰杈撳叆y鏉ョ‘璁ゆ槸鍚︽牸鐩橈紝杩欎釜鍛戒护鍓嶅姞涓奺cho y骞剁敤|瀛楃鏉ュ皢echo y鐨勭粨鏋滀紶缁檉ormat鍛戒护
浠庤岃揪鍒拌嚜鍔ㄨ緭鍏鐨勭洰鐨
锛堣繖鏉″懡浠ゆ湁鍗卞鎬э紝娴嬭瘯鏃惰鎱庨噸锛


7銆乛  杞箟瀛楃
^鏄鐗规畩绗﹀彿<,>,&鐨勫墠瀵煎瓧绗︼紝鍦ㄥ懡浠や腑浠栧皢浠ヤ笂3涓鍙风殑鐗规畩鍔熻兘鍘绘帀锛屼粎浠呭彧鎶婁粬浠綋鎴愮鍙疯屼笉浣跨敤浠栦滑鐨勭壒娈婃剰涔夈
姣斿
echo test ^>1.txt
缁撴灉鍒欐槸锛歵est > 1.txt
浠栨病鏈夎拷鍔犲湪1.txt閲岋紝鍛靛懙銆傚彧鏄樉绀轰簡鍑烘潵
鍙﹀锛屾杞箟瀛楃杩樺彲浠ョ敤浣滅画琛岀鍙枫
涓句釜绠鍗曠殑渚嬪瓙锛
@echo off
echo 鑻遍泟^
鏄痎
濂絕
鐢蜂汉
pause
涓嶇敤澶氳锛岃嚜宸辫瘯涓涓嬪氨鏄庣櫧浜嗐
涓轰粈涔堣浆涔夊瓧绗︽斁鍦ㄨ灏惧彲浠ヨ捣鍒扮画琛岀鐨勪綔鐢ㄥ憿锛熷師鍥犲緢绠鍗曪紝鍥犱负姣忚鏈熬杩樻湁涓涓湅涓嶈鐨勭鍙凤紝鍗冲洖杞︾锛岃浆涔夊瓧绗︿綅浜庤灏炬椂灏辫鍥炶溅绗﹀け鏁堜簡锛屼粠鑰岃捣鍒颁簡缁鐨勪綔鐢ㄣ


8銆& 缁勫悎鍛戒护
璇硶锛氱涓鏉″懡浠 & 绗簩鏉″懡浠 [& 绗笁鏉″懡浠...]
&銆&&銆亅|涓虹粍鍚堝懡浠わ紝椤惧悕鎬濅箟锛屽氨鏄彲浠ユ妸澶氫釜鍛戒护缁勫悎璧锋潵褰撲竴涓懡浠ゆ潵鎵ц銆傝繖鍦ㄦ壒澶勭悊鑴氭湰閲屾槸鍏佽鐨勶紝鑰屼笖鐢ㄧ殑闈炲父骞挎硾銆傚洜涓烘壒澶勭悊璁よ涓嶈鍛戒护鏁扮洰銆
杩欎釜绗﹀彿鍏佽鍦ㄤ竴琛屼腑浣跨敤2涓互涓婁笉鍚岀殑鍛戒护锛屽綋绗竴涓懡浠ゆ墽琛屽け璐ヤ簡锛屼篃涓嶅奖鍝嶅悗杈圭殑鍛戒护鎵ц銆
杩欓噷&涓よ竟鐨勫懡浠ゆ槸椤哄簭鎵ц鐨勶紝浠庡墠寰鍚庢墽琛屻
姣斿锛
dir z:\ & dir y:\ & dir c:\
浠ヤ笂鍛戒护浼氳繛缁樉绀簔,y,c鐩樼殑鍐呭锛屼笉鐞嗕細璇ョ洏鏄惁瀛樺湪


9銆&& 缁勫悎鍛戒护
璇硶锛氱涓鏉″懡浠 && 绗簩鏉″懡浠 [&& 绗笁鏉″懡浠...]
鐢ㄨ繖绉嶆柟娉曞彲浠ュ悓鏃舵墽琛屽鏉″懡浠わ紝褰撶鍒版墽琛屽嚭閿欑殑鍛戒护鍚庡皢涓嶆墽琛屽悗闈㈢殑鍛戒护锛屽鏋滀竴鐩存病鏈夊嚭閿欏垯涓鐩存墽琛屽畬鎵鏈夊懡浠
杩欎釜鍛戒护鍜屼笂杈圭殑绫讳技锛屼絾鍖哄埆鏄紝绗竴涓懡浠ゅけ璐ユ椂锛屽悗杈圭殑鍛戒护涔熶笉浼氭墽琛
dir z:\ && dir y:\ && dir c:\


10銆亅|  缁勫悎鍛戒护
璇硶锛氱涓鏉″懡浠 || 绗簩鏉″懡浠 [|| 绗笁鏉″懡浠...]
鐢ㄨ繖绉嶆柟娉曞彲浠ュ悓鏃舵墽琛屽鏉″懡浠わ紝褰撲竴鏉″懡浠ゅけ璐ュ悗鎵嶆墽琛岀浜屾潯鍛戒护锛屽綋纰板埌鎵ц姝ｇ‘鐨勫懡浠ゅ悗灏嗕笉鎵ц鍚庨潰鐨勫懡浠わ紝濡傛灉娌℃湁鍑虹幇姝ｇ‘鐨勫懡浠ゅ垯涓鐩存墽琛屽畬鎵鏈夊懡浠わ紱

鎻愮ず锛氱粍鍚堝懡浠ゅ拰閲嶅畾鍚戝懡浠や竴璧蜂娇鐢ㄥ繀椤绘敞鎰忎紭鍏堢骇
绠￠亾鍛戒护鐨勪紭鍏